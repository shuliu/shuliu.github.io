!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([function(t,e,i){"use strict";(function(t,n){i.d(e,"f",function(){return r}),i.d(e,"h",function(){return o}),i.d(e,"g",function(){return s}),i.d(e,"d",function(){return l}),i.d(e,"a",function(){return h}),i.d(e,"b",function(){return c}),i.d(e,"e",function(){return u}),i.d(e,"c",function(){return f});
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var r="undefined"!=typeof window?window:void 0!==t&&t.exports&&void 0!==n?n:{},s=function(t,e){var i={},n=t.document,r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(r.TweenLite)return r.TweenLite;var s,o,a,l,h,c=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},u=c("com.greensock"),f=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},p=function(){},d=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),_={},m=function(t,e,n,s){this.sc=_[t]?_[t].sc:[],_[t]=this,this.gsClass=null,this.func=n;var o=[];this.check=function(a){for(var l,h,u,f,p=e.length,d=p;--p>-1;)(l=_[e[p]]||new m(e[p],[])).gsClass?(o[p]=l.gsClass,d--):a&&l.sc.push(this);if(0===d&&n)for(u=(h=("com.greensock."+t).split(".")).pop(),f=c(h.join("."))[u]=this.gsClass=n.apply(n,o),s&&(r[u]=i[u]=f),p=0;p<this.sc.length;p++)this.sc[p].check()},this.check(!0)},g=t._gsDefine=function(t,e,i,n){return new m(t,e,i,n)},v=u._class=function(t,e,i){return e=e||function(){},g(t,[],function(){return e},i),e};g.globals=r;var y=[0,0,1,1],x=v("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?y.concat(e):y},!0),b=x.map={},T=x.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),h=l.length,c=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(s=l[h],r=n?v("easing."+s,null,!0):u.easing[s]||{},o=c.length;--o>-1;)a=c[o],b[s+"."+a]=b[a+s]=r[a]=t.getRatio?t:t[a]||new t};for((a=x.prototype)._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},o=(s=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--o>-1;)a=s[o]+",Power"+o,T(new x(null,null,1,o),a,"easeOut",!0),T(new x(null,null,2,o),a,"easeIn"+(0===o?",easeNone":"")),T(new x(null,null,3,o),a,"easeInOut");b.linear=u.easing.Linear.easeIn,b.swing=u.easing.Quad.easeInOut;var w=v("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(a=w.prototype).addEventListener=function(t,e,i,n,r){r=r||0;var s,o,a=this._listeners[t],c=0;for(this!==l||h||l.wake(),null==a&&(this._listeners[t]=a=[]),o=a.length;--o>-1;)(s=a[o]).c===e&&s.s===i?a.splice(o,1):0===c&&s.pr<r&&(c=o+1);a.splice(c,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for((e=r.length)>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)(n=r[e])&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var P=t.requestAnimationFrame,k=t.cancelAnimationFrame,S=Date.now||function(){return(new Date).getTime()},O=S();for(o=(s=["ms","moz","webkit","o"]).length;--o>-1&&!P;)P=t[s[o]+"RequestAnimationFrame"],k=t[s[o]+"CancelAnimationFrame"]||t[s[o]+"CancelRequestAnimationFrame"];v("Ticker",function(t,e){var i,r,s,o,a,c=this,u=S(),f=!(!1===e||!P)&&"auto",d=500,_=33,m=function(t){var e,n,l=S()-O;l>d&&(u+=l-_),O+=l,c.time=(O-u)/1e3,e=c.time-a,(!i||e>0||!0===t)&&(c.frame++,a+=e+(e>=o?.004:o-e),n=!0),!0!==t&&(s=r(m)),n&&c.dispatchEvent("tick")};w.call(c),c.time=c.frame=0,c.tick=function(){m(!0)},c.lagSmoothing=function(t,e){if(!arguments.length)return d<1e10;d=t||1e10,_=Math.min(e,d,0)},c.sleep=function(){null!=s&&(f&&k?k(s):clearTimeout(s),r=p,s=null,c===l&&(h=!1))},c.wake=function(t){null!==s?c.sleep():t?u+=-O+(O=S()):c.frame>10&&(O=S()-d+5),r=0===i?p:f&&P?P:function(t){return setTimeout(t,1e3*(a-c.time)+1|0)},c===l&&(h=!0),m(2)},c.fps=function(t){if(!arguments.length)return i;o=1/((i=t)||60),a=this.time+o,c.wake()},c.useRAF=function(t){if(!arguments.length)return f;c.sleep(),f=t,c.fps(i)},c.fps(t),setTimeout(function(){"auto"===f&&c.frame<5&&"hidden"!==(n||{}).visibilityState&&c.useRAF(!1)},1500)}),(a=u.Ticker.prototype=new u.events.EventDispatcher).constructor=u.Ticker;var C=v("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,G){h||l.wake();var i=this.vars.useFrames?H:G;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=C.ticker=new u.Ticker,(a=C.prototype)._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var R=function(){h&&S()-O>2e3&&("hidden"!==(n||{}).visibilityState||!l.lagSmoothing())&&l.wake();var t=setTimeout(R,2e3);t.unref&&t.unref()};R(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},a._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(n?n.length:0){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=d(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(L.length&&$(),this.render(t,e,!1),L.length&&$())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||1e-10,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(h||t||l.wake(),i=(e=n.rawTime())-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var M=v("core.SimpleTimeline",function(t){C.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(a=M.prototype=new C).constructor=M,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return h||l.wake(),this._totalTime};var A=v("TweenLite",function(e,i,n){if(C.call(this,i,n),this.render=A.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:A.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?V[A.defaultOverwrite]:"number"==typeof l?l>>0:V[l],(a||e instanceof Array||e.push&&d(e))&&"number"!=typeof e[0])for(this._targets=o=f(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)(s=o[r])?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(f(s))):(this._siblings[r]=Z(s,this,!1),1===l&&this._siblings[r].length>1&&Q(s,this,null,1,this._siblings[r])):"string"==typeof(s=o[r--]=A.selector(s))&&o.splice(r+1,1):o.splice(r--,1);else this._propLookup={},this._siblings=Z(e,this,!1),1===l&&this._siblings.length>1&&Q(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-1e-10,this.render(Math.min(0,-this._delay)))},!0),D=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)};(a=A.prototype=new C).constructor=A,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,A.version="2.0.2",A.defaultEase=a._ease=new x(null,null,1,1),A.defaultOverwrite="auto",A.ticker=l,A.autoSleep=120,A.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},A.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(A.selector=i,i(e)):(n||(n=t.document),n?n.querySelectorAll?n.querySelectorAll(e):n.getElementById("#"===e.charAt(0)?e.substr(1):e):e)};var L=[],E={},B=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,N=/[\+-]=-?[\.\d]/,X=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&e>-1e-6&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},F=function(t,e,i,n){var r,s,o,a,l,h,c,u=[],f=0,p="",d=0;for(u.start=t,u.end=e,t=u[0]=t+"",e=u[1]=e+"",i&&(i(u),t=u[0],e=u[1]),u.length=0,r=t.match(B)||[],s=e.match(B)||[],n&&(n._next=null,n.blob=1,u._firstPT=u._applyPT=n),l=s.length,a=0;a<l;a++)c=s[a],p+=(h=e.substr(f,e.indexOf(c,f)-f))||!a?h:",",f+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),c===r[a]||r.length<=a?p+=c:(p&&(u.push(p),p=""),o=parseFloat(r[a]),u.push(o),u._firstPT={_next:u._firstPT,t:u,p:u.length-1,s:o,c:("="===c.charAt(1)?parseInt(c.charAt(0)+"1",10)*parseFloat(c.substr(2)):parseFloat(c)-o)||0,f:0,m:d&&d<4?Math.round:0}),f+=c.length;return(p+=e.substr(f))&&u.push(p),u.setRatio=X,N.test(e)&&(u.end=null),u},Y=function(t,e,i,n,r,s,o,a,l){"function"==typeof n&&(n=n(l||0,t));var h=typeof t[e],c="function"!==h?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),u="get"!==i?i:c?o?t[c](o):t[c]():t[e],f="string"==typeof n&&"="===n.charAt(1),p={t:t,p:e,s:u,f:"function"===h,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:f?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-u||0};if(("number"!=typeof u||"number"!=typeof n&&!f)&&(o||isNaN(u)||!f&&isNaN(n)||"boolean"==typeof u||"boolean"==typeof n?(p.fp=o,p={t:F(u,f?parseFloat(p.s)+p.c+(p.s+"").replace(/[0-9\-\.]/g,""):n,a||A.defaultStringFilter,p),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(p.s=parseFloat(u),f||(p.c=parseFloat(n)-p.s||0))),p.c)return(p._next=this._firstPT)&&(p._next._prev=p),this._firstPT=p,p},I=A._internals={isArray:d,isSelector:D,lazyTweens:L,blobDif:F},z=A._plugins={},j=I.tweenLookup={},W=0,U=I.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},V={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},H=C._rootFramesTimeline=new M,G=C._rootTimeline=new M,q=30,$=I.lazyRender=function(){var t,e=L.length;for(E={};--e>-1;)(t=L[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);L.length=0};G._startTime=l.time,H._startTime=l.frame,G._active=H._active=!0,setTimeout($,1),C._updateRoot=A.render=function(){var t,e,i;if(L.length&&$(),G.render((l.time-G._startTime)*G._timeScale,!1,!1),H.render((l.frame-H._startTime)*H._timeScale,!1,!1),L.length&&$(),l.frame>=q){for(i in q=l.frame+(parseInt(A.autoSleep,10)||120),j){for(t=(e=j[i].tweens).length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete j[i]}if((!(i=G._first)||i._paused)&&A.autoSleep&&!H._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",C._updateRoot);var Z=function(t,e,i){var n,r,s=t._gsTweenID;if(j[s||(t._gsTweenID=s="t"+W++)]||(j[s]={target:t,tweens:[]}),e&&((n=j[s].tweens)[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return j[s].tweens},K=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),(o=A.onOverwrite)&&(s=o(t,e,i,n)),!1!==r&&!1!==s},Q=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var h,c=e._startTime+1e-10,u=[],f=0,p=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(h=h||J(e,0,p),0===J(a,h,p)&&(u[f++]=a)):a._startTime<=c&&a._startTime+a.totalDuration()/a._timeScale>c&&((p||!a._initted)&&c-a._startTime<=2e-10||(u[f++]=a)));for(s=f;--s>-1;)if(l=(a=u[s])._firstPT,2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted&&l){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},J=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return(s/=r)>e?s-e:i&&s===e||!t._initted&&s-e<2e-10?1e-10:(s+=t.totalDuration()/t._timeScale/r)>e+1e-10?0:s-e-1e-10};a._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,l=this._duration,h=!!o.immediateRender,c=o.ease;if(o.startAt){for(n in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={},o.startAt)r[n]=o.startAt[n];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&!1!==o.lazy,r.startAt=r.delay=null,r.onUpdate=o.onUpdate,r.onUpdateParams=o.onUpdateParams,r.onUpdateScope=o.onUpdateScope||o.callbackScope||this,this._startAt=A.to(this.target||{},0,r),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(n in 0!==this._time&&(h=!1),i={},o)U[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==o.lazy,i.immediateRender=h,this._startAt=A.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=c=c?c instanceof x?c:"function"==typeof c?new x(c,o.easeParams):b[c]||A.defaultEase:A.defaultEase,o.easeParams instanceof Array&&c.config&&(this._ease=c.config.apply(c,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&A._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,s){var o,a,l,h,c,u;if(null==e)return!1;for(o in E[e._gsTweenID]&&$(),this.vars.css||e.style&&e!==t&&e.nodeType&&z.css&&!1!==this.vars.autoCSS&&function(t,e){var i,n={};for(i in t)U[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!z[i]||z[i]&&z[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n}(this.vars,e),this.vars)if(u=this.vars[o],U[o])u&&(u instanceof Array||u.push&&d(u))&&-1!==u.join("").indexOf("{self}")&&(this.vars[o]=u=this._swapSelfInParams(u,this));else if(z[o]&&(h=new z[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=c={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:h._priority,m:0},a=h._overwriteProps.length;--a>-1;)i[h._overwriteProps[a]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),c._next&&(c._next._prev=c)}else i[o]=Y.call(this,e,o,"get",u,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&Q(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(E[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7&&t>=0)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||1e-10===h&&"isPause"!==this.data)&&h!==t&&(i=!0,h>1e-10&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||h===t?t:1e-10);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&h>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(1e-10!==h||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||h===t?t:1e-10)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var c=t/l,u=this._easeType,f=this._easePower;(1===u||3===u&&c>=.5)&&(c=1-c),3===u&&(c*=2),1===f?c*=c:2===f?c*=c*c:3===f?c*=c*c*c:4===f&&(c*=c*c*c*c),this.ratio=1===u?1-c:2===u?c:t/l<.5?c/2:1-c/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=h,L.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&1e-10===this._rawPrevTime&&1e-10!==o&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:A.selector(e)||e;var n,r,s,o,a,l,h,c,u,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,p=this._firstPT;if((d(e)||D(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(h=t||a,c=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(A.onOverwrite||this.vars.onOverwrite)){for(s in h)a[s]&&(u||(u=[]),u.push(s));if((u||!t)&&!K(this,i,e,u))return!1}for(s in h)(o=a[s])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(h)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),c&&(r[s]=1);!this._firstPT&&this._initted&&p&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&A._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],C.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-1e-10,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Z(n[i],this,!0);else this._siblings=Z(this.target,this,!0)}return C.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&A._onPluginEvent(t?"_onEnable":"_onDisable",this)},A.to=function(t,e,i){return new A(t,e,i)},A.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new A(t,e,i)},A.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new A(t,e,n)},A.delayedCall=function(t,e,i,n,r){return new A(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},A.set=function(t,e){return new A(t,0,e)},A.getTweensOf=function(t,e){if(null==t)return[];var i,n,r,s;if(t="string"!=typeof t?t:A.selector(t)||t,(d(t)||D(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(A.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else if(t._gsTweenID)for(i=(n=Z(t).concat()).length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n||[]},A.killTweensOf=A.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=A.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var tt=v("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=tt.prototype},!0);if(a=tt.prototype,tt.version="1.19.0",tt.API=2,a._firstPT=null,a._addTween=Y,a.setRatio=X,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},A._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},tt.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===tt.API&&(z[(new t[e])._propName]=t[e]);return!0},g.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=v("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){tt.call(this,i,n),this._overwriteProps=r||[]},!0===t.global),a=o.prototype=new tt(i);for(e in a.constructor=o,o.API=t.API,s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,tt.activate([o]),o},s=t._gsQueue){for(o=0;o<s.length;o++)s[o]();for(a in _)_[a].func||t.console.log("GSAP encountered missing dependency: "+a)}return h=!1,A}(r),o=r.GreenSockGlobals,a=o.com.greensock,l=a.core.SimpleTimeline,h=a.core.Animation,c=o.Ease,u=(o.Linear,o.Power1,o.Power2,o.Power3,o.Power4,o.TweenPlugin),f=a.events.EventDispatcher}).call(this,i(2)(t),i(3))},function(t,e,i){i(9),t.exports=i(4)},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){var n=i(5);"string"==typeof n&&(n=[[t.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};i(7)(n,r);n.locals&&(t.exports=n.locals)},function(t,e,i){(e=t.exports=i(6)(!1)).push([t.i,'html, body {\n  background: #666;\n  height: 100%;\n  margin: 0;\n  padding: 0; }\n\n.elements {\n  min-width: 100px;\n  min-height: 100px;\n  background: #FFF;\n  position: fixed;\n  left: 1em;\n  top: 1em; }\n  .elements:before {\n    width: 10px;\n    height: 10px;\n    content: "Elements list";\n    color: lightblue; }\n\n.control {\n  min-width: 100px;\n  padding: 4px;\n  margin: auto;\n  text-align: center; }\n  .control button {\n    margin: 0 8px; }\n\n#gameBox {\n  min-width: 300px;\n  max-width: 500px;\n  width: 100%;\n  height: 80%;\n  margin: auto;\n  background: #666;\n  position: relative;\n  background: lightpink; }\n\n.gift {\n  width: 20px;\n  height: 20px;\n  background: #E6E;\n  border-radius: 50px;\n  border: 1px solid #D3D;\n  position: absolute; }\n\n#gameBox .gift.bomb {\n  background: yellow; }\n\n#gameBox .gift.hit {\n  background: #000;\n  width: 40px;\n  height: 40px;\n  transition-duration: 3s;\n  opacity: 0; }\n\n.BoomAnimate {\n  width: 40px;\n  height: 40px;\n  border-radius: 50px;\n  background: lightgreen;\n  position: absolute;\n  opacity: 1; }\n\n.BoomAnimate.hit {\n  transition-duration: 5s;\n  opacity: 0; }\n\n#gameBox #catcher {\n  width: 16%;\n  height: 20px;\n  display: inline-block;\n  background: lightseagreen; }\n\n#orientation {\n  min-width: 300px;\n  width: 100%;\n  height: 40px;\n  background: #DDD;\n  color: #333;\n  margin: auto; }\n\n.hide {\n  display: none; }\n\nbutton {\n  border: 1px solid #DDD;\n  border-radius: 15px;\n  padding: 2px 12px; }\n  button:disabled {\n    color: #CCC;\n    background: #666; }\n',""]),e.locals={elements:"elements",control:"control",gameBox:"gameBox",gift:"gift",bomb:"bomb",hit:"hit",BoomAnimate:"BoomAnimate",catcher:"catcher",orientation:"orientation",hide:"hide"}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var i=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var r=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(n),s=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[i].concat(s).concat([r]).join("\n")}return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i}).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},r=0;r<this.length;r++){var s=this[r][0];"number"==typeof s&&(n[s]=!0)}for(r=0;r<t.length;r++){var o=t[r];"number"==typeof o[0]&&n[o[0]]||(i&&!o[2]?o[2]=i:i&&(o[2]="("+o[2]+") and ("+i+")"),e.push(o))}},e}},function(t,e,i){var n={},r=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),s=function(t){var e={};return function(t,i){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,i);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),o=null,a=0,l=[],h=i(8);function c(t,e){for(var i=0;i<t.length;i++){var r=t[i],s=n[r.id];if(s){s.refs++;for(var o=0;o<s.parts.length;o++)s.parts[o](r.parts[o]);for(;o<r.parts.length;o++)s.parts.push(m(r.parts[o],e))}else{var a=[];for(o=0;o<r.parts.length;o++)a.push(m(r.parts[o],e));n[r.id]={id:r.id,refs:1,parts:a}}}}function u(t,e){for(var i=[],n={},r=0;r<t.length;r++){var s=t[r],o=e.base?s[0]+e.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};n[o]?n[o].parts.push(a):i.push(n[o]={id:o,parts:[a]})}return i}function f(t,e){var i=s(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=l[l.length-1];if("top"===t.insertAt)n?n.nextSibling?i.insertBefore(e,n.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),l.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=s(t.insertAt.before,i);i.insertBefore(e,r)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function d(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return i.nc}();n&&(t.attrs.nonce=n)}return _(e,t.attrs),f(t,e),e}function _(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})}function m(t,e){var i,n,r,s;if(e.transform&&t.css){if(!(s=e.transform(t.css)))return function(){};t.css=s}if(e.singleton){var l=a++;i=o||(o=d(e)),n=v.bind(null,i,l,!1),r=v.bind(null,i,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",_(e,t.attrs),f(t,e),e}(e),n=function(t,e,i){var n=i.css,r=i.sourceMap,s=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||s)&&(n=h(n));r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,i,e),r=function(){p(i),i.href&&URL.revokeObjectURL(i.href)}):(i=d(e),n=function(t,e){var i=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),r=function(){p(i)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else r()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=r()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=u(t,e);return c(i,e),function(t){for(var r=[],s=0;s<i.length;s++){var o=i[s];(a=n[o.id]).refs--,r.push(a)}t&&c(u(t,e),e);for(s=0;s<r.length;s++){var a;if(0===(a=r[s]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete n[a.id]}}}};var g=function(){var t=[];return function(e,i){return t[e]=i,t.filter(Boolean).join("\n")}}();function v(t,e,i,n){var r=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=g(e,r);else{var s=document.createTextNode(r),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(s,o[e]):t.appendChild(s)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,n=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var r,s=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?t:(r=0===s.indexOf("//")?s:0===s.indexOf("/")?i+s:n+s.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(t,e,i){"use strict";i.r(e);var n=i(0);
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/n.f._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(){var t=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},e=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},i=function(t,e,r){n.g.call(this,t,e,r),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=i.prototype.render},r=n.g._internals,s=r.isSelector,o=r.isArray,a=i.prototype=n.g.to({},.1,{}),l=[];i.version="2.0.2",a.constructor=i,a.kill()._gc=!1,i.killTweensOf=i.killDelayedCallsTo=n.g.killTweensOf,i.getTweensOf=n.g.getTweensOf,i.lagSmoothing=n.g.lagSmoothing,i.ticker=n.g.ticker,i.render=n.g.render,a.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),n.g.prototype.invalidate.call(this)},a.updateTo=function(t,e){var i,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;for(i in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[i]=t[i];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&n.g._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var o=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(o,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var a,l=1/(1-r),h=this._firstPT;h;)a=h.s+h.c,h.c*=l,h.s=a-h.c,h=h._next;return this},a.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var s,o,a,l,h,c,u,f,p,d=this._dirty?this.totalDuration():this._totalDuration,_=this._time,m=this._totalTime,g=this._cycle,v=this._duration,y=this._rawPrevTime;if(t>=d-1e-7&&t>=0?(this._totalTime=d,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=v,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(s=!0,o="onComplete",i=i||this._timeline.autoRemoveChildren),0===v&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(y<0||t<=0&&t>=-1e-7||1e-10===y&&"isPause"!==this.data)&&y!==t&&(i=!0,y>1e-10&&(o="onReverseComplete")),this._rawPrevTime=f=!e||t||y===t?t:1e-10)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==m||0===v&&y>0)&&(o="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===v&&(this._initted||!this.vars.lazy||i)&&(y>=0&&(i=!0),this._rawPrevTime=f=!e||t||y===t?t:1e-10)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=v+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=v-this._time,(p=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==p||this._initted?this._yoyoEase=p=!0===p?this._ease:p instanceof n.b?p:n.b.map[p]:(p=this.vars.ease,this._yoyoEase=p=p?p instanceof n.b?p:"function"==typeof p?new n.b(p,this.vars.easeParams):n.b.map[p]||n.g.defaultEase:n.g.defaultEase)),this.ratio=p?1-p.getRatio((v-this._time)/v):0)),this._time>v?this._time=v:this._time<0&&(this._time=0)),this._easeType&&!p?(h=this._time/v,c=this._easeType,u=this._easePower,(1===c||3===c&&h>=.5)&&(h=1-h),3===c&&(h*=2),1===u?h*=h:2===u?h*=h*h:3===u?h*=h*h*h:4===u&&(h*=h*h*h*h),1===c?this.ratio=1-h:2===c?this.ratio=h:this._time/v<.5?this.ratio=h/2:this.ratio=1-h/2):p||(this.ratio=this._ease.getRatio(this._time/v))),_!==this._time||i||g!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=_,this._totalTime=m,this._rawPrevTime=y,this._cycle=g,r.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||s||p?s&&this._ease._calcEnd&&!p&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/v)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==_&&t>=0&&(this._active=!0),0===m&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,!0,i):o||(o="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==v||e||this._callback("onStart"))),a=this._firstPT;a;)a.f?a.t[a.p](a.c*this.ratio+a.s):a.t[a.p]=a.c*this.ratio+a.s,a=a._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,i),e||(this._totalTime!==m||o)&&this._callback("onUpdate")),this._cycle!==g&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),o&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[o]&&this._callback(o),0===v&&1e-10===this._rawPrevTime&&1e-10!==f&&(this._rawPrevTime=0)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},i.to=function(t,e,n){return new i(t,e,n)},i.from=function(t,e,n){return n.runBackwards=!0,n.immediateRender=0!=n.immediateRender,new i(t,e,n)},i.fromTo=function(t,e,n,r){return r.startAt=n,r.immediateRender=0!=r.immediateRender&&0!=n.immediateRender,new i(t,e,r)},i.staggerTo=i.allTo=function(r,a,h,c,u,f,p){c=c||0;var d,_,m,g,v=0,y=[],x=function(){h.onComplete&&h.onComplete.apply(h.onCompleteScope||this,arguments),u.apply(p||h.callbackScope||this,f||l)},b=h.cycle,T=h.startAt&&h.startAt.cycle;for(o(r)||("string"==typeof r&&(r=n.g.selector(r)||r),s(r)&&(r=t(r))),r=r||[],c<0&&((r=t(r)).reverse(),c*=-1),d=r.length-1,m=0;m<=d;m++){for(g in _={},h)_[g]=h[g];if(b&&(e(_,r,m),null!=_.duration&&(a=_.duration,delete _.duration)),T){for(g in T=_.startAt={},h.startAt)T[g]=h.startAt[g];e(_.startAt,r,m)}_.delay=v+(_.delay||0),m===d&&u&&(_.onComplete=x),y[m]=new i(r[m],a,_),v+=c}return y},i.staggerFrom=i.allFrom=function(t,e,n,r,s,o,a){return n.runBackwards=!0,n.immediateRender=0!=n.immediateRender,i.staggerTo(t,e,n,r,s,o,a)},i.staggerFromTo=i.allFromTo=function(t,e,n,r,s,o,a,l){return r.startAt=n,r.immediateRender=0!=r.immediateRender&&0!=n.immediateRender,i.staggerTo(t,e,r,s,o,a,l)},i.delayedCall=function(t,e,n,r,s){return new i(e,0,{delay:t,onComplete:e,onCompleteParams:n,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:n,immediateRender:!1,useFrames:s,overwrite:0})},i.set=function(t,e){return new i(t,0,e)},i.isTweening=function(t){return n.g.getTweensOf(t,!0).length>0};var h=function(t,e){for(var i=[],r=0,s=t._first;s;)s instanceof n.g?i[r++]=s:(e&&(i[r++]=s),r=(i=i.concat(h(s,e))).length),s=s._next;return i},c=i.getAllTweens=function(t){return h(n.a._rootTimeline,t).concat(h(n.a._rootFramesTimeline,t))};i.killAll=function(t,e,i,r){null==e&&(e=!0),null==i&&(i=!0);var s,o,a,l=c(0!=r),h=l.length,u=e&&i&&r;for(a=0;a<h;a++)o=l[a],(u||o instanceof n.d||(s=o.target===o.vars.onComplete)&&i||e&&!s)&&(t?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},i.killChildTweensOf=function(e,a){if(null!=e){var l,h,c,u,f,p=r.tweenLookup;if("string"==typeof e&&(e=n.g.selector(e)||e),s(e)&&(e=t(e)),o(e))for(u=e.length;--u>-1;)i.killChildTweensOf(e[u],a);else{for(c in l=[],p)for(h=p[c].target.parentNode;h;)h===e&&(l=l.concat(p[c].tweens)),h=h.parentNode;for(f=l.length,u=0;u<f;u++)a&&l[u].totalTime(l[u].totalDuration()),l[u]._enabled(!1,!1)}}};var u=function(t,e,i,r){e=!1!==e,i=!1!==i;for(var s,o,a=c(r=!1!==r),l=e&&i&&r,h=a.length;--h>-1;)o=a[h],(l||o instanceof n.d||(s=o.target===o.vars.onComplete)&&i||e&&!s)&&o.paused(t)};return i.pauseAll=function(t,e,i){u(!0,t,e,i)},i.resumeAll=function(t,e,i){u(!1,t,e,i)},i.globalTimeScale=function(t){var e=n.a._rootTimeline,i=n.g.ticker.time;return arguments.length?(t=t||1e-10,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=n.a._rootFramesTimeline,i=n.g.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=n.a._rootTimeline._timeScale=t,t):e._timeScale},a.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},a.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},a.duration=function(t){return arguments.length?n.a.prototype.duration.call(this,t):this._duration},a.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},a.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},a.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},a.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},i},!0);var r=n.h.TweenMax;
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
n.f._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(){var t,e,i,r,s=function(){n.e.call(this,"css"),this._overwriteProps.length=0,this.setRatio=s.prototype.setRatio},o=n.f._gsDefine.globals,a={},l=s.prototype=new n.e("css");l.constructor=s,s.version="2.0.2",s.API=2,s.defaultTransformPerspective=0,s.defaultSkewType="compensated",s.defaultSmoothOrigin=!0,l="px",s.suffixMap={top:l,right:l,bottom:l,left:l,width:l,height:l,fontSize:l,padding:l,margin:l,perspective:l,lineHeight:""};var h,c,u,f,p,d,_,m,g=/(?:\-|\.|\b)(\d|\.|e\-)+/g,v=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,y=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,x=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,b=/(?:\d|\-|\+|=|#|\.)*/g,T=/opacity *= *([^)]*)/i,w=/opacity:([^;]*)/i,P=/alpha\(opacity *=.+?\)/i,k=/^(rgb|hsl)/,S=/([A-Z])/g,O=/-([a-z])/gi,C=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,R=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,A=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,D=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,L=/,(?=[^\)]*(?:\(|$))/gi,E=/[\s,\(]/i,B=Math.PI/180,N=180/Math.PI,X={},F={style:{}},Y=n.f.document||{createElement:function(){return F}},I=function(t,e){return Y.createElementNS?Y.createElementNS(e||"http://www.w3.org/1999/xhtml",t):Y.createElement(t)},z=I("div"),j=I("img"),W=s._internals={_specialProps:a},U=(n.f.navigator||{}).userAgent||"",V=function(){var t=U.indexOf("Android"),e=I("a");return u=-1!==U.indexOf("Safari")&&-1===U.indexOf("Chrome")&&(-1===t||parseFloat(U.substr(t+8,2))>3),p=u&&parseFloat(U.substr(U.indexOf("Version/")+8,2))<6,f=-1!==U.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(U)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(U))&&(d=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),H=function(t){return T.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},G=function(t){n.f.console&&console.log(t)},q="",$="",Z=function(t,e){var i,n,r=(e=e||z).style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(q="-"+($=3===n?"ms":i[n]).toLowerCase()+"-",$+t):null},K=("undefined"!=typeof window?window:Y.defaultView||{getComputedStyle:function(){}}).getComputedStyle,Q=s.getStyle=function(t,e,i,n,r){var s;return V||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(S,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):H(t)},J=W.convertToPixels=function(t,e,i,r,o){if("px"===r||!r&&"lineHeight"!==e)return i;if("auto"===r||!i)return 0;var a,l,h,c=M.test(e),u=t,f=z.style,p=i<0,d=1===i;if(p&&(i=-i),d&&(i*=100),"lineHeight"!==e||r)if("%"===r&&-1!==e.indexOf("border"))a=i/100*(c?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+Q(t,"position")+";line-height:0;","%"!==r&&u.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[c?"borderLeftWidth":"borderTopWidth"]=i+r;else{if(u=t.parentNode||Y.body,-1!==Q(u,"display").indexOf("flex")&&(f.position="absolute"),l=u._gsCache,h=n.g.ticker.frame,l&&c&&l.time===h)return l.width*i/100;f[c?"width":"height"]=i+r}u.appendChild(z),a=parseFloat(z[c?"offsetWidth":"offsetHeight"]),u.removeChild(z),c&&"%"===r&&!1!==s.cacheWidths&&((l=u._gsCache=u._gsCache||{}).time=h,l.width=a/i*100),0!==a||o||(a=J(t,e,i,r,!0))}else l=K(t).lineHeight,t.style.lineHeight=i,a=parseFloat(K(t).lineHeight),t.style.lineHeight=l;return d&&(a/=100),p?-a:a},tt=W.calculateOffset=function(t,e,i){if("absolute"!==Q(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=Q(t,"margin"+n,i);return t["offset"+n]-(J(t,e,parseFloat(r),r.replace(b,""))||0)},et=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)-1!==(r=e[i]).indexOf("-transform")&&Ct!==r||(s[r.replace(O,R)]=e.getPropertyValue(r));else for(i in e)-1!==i.indexOf("Transform")&&Ot!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(O,R)]=e[i]);return V||(s.opacity=H(t)),n=zt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Mt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},it=function(t,e,i,n,r){var s,o,a,l={},h=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&-1===o.indexOf("Origin")&&("number"!=typeof s&&"string"!=typeof s||(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(x,"")?s:0:tt(t,o),void 0!==h[o]&&(a=new gt(h,o,h[o],a))));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},nt={width:["Left","Right"],height:["Top","Bottom"]},rt=["marginLeft","marginRight","marginTop","marginBottom"],st=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getCTM&&Ft(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=nt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(Q(t,"padding"+r[s],i,!0))||0,n-=parseFloat(Q(t,"border"+r[s]+"Width",i,!0))||0;return n},ot=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":n[0],s=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(ot(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=-1!==r.indexOf("%"),e.oyp=-1!==s.indexOf("%"),e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(x,"")),e.oy=parseFloat(s.replace(x,"")),e.v=t),e||t},at=function(t,e){return"function"==typeof t&&(t=t(m,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},lt=function(t,e){"function"==typeof t&&(t=t(m,_));var i="string"==typeof t&&"="===t.charAt(1);return"string"==typeof t&&"v"===t.charAt(t.length-2)&&(t=(i?t.substr(0,2):0)+window["inner"+("vh"===t.substr(-2)?"Height":"Width")]*(parseFloat(i?t.substr(2):t)/100)),null==t?e:i?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ht=function(t,e,i,n){var r,s,o,a,l;return"function"==typeof t&&(t=t(m,_)),null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),o=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(-1===t.indexOf("rad")?1:N)-(l?0:e),s.length&&(n&&(n[i]=e+o),-1!==t.indexOf("short")&&(o%=r)!==o%(r/2)&&(o=o<0?o+r:o-r),-1!==t.indexOf("_cw")&&o<0?o=(o+9999999999*r)%r-(o/r|0)*r:-1!==t.indexOf("ccw")&&o>0&&(o=(o-9999999999*r)%r-(o/r|0)*r)),a=e+o),a<1e-6&&a>-1e-6&&(a=0),a},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ut=function(t,e,i){return 255*(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},ft=s.parseColor=function(t,e){var i,n,r,s,o,a,l,h,c,u,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(n=t.charAt(1))+n+(r=t.charAt(2))+r+(s=t.charAt(3))+s),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(g),e){if(-1!==t.indexOf("="))return t.match(v)}else o=Number(i[0])%360/360,a=Number(i[1])/100,n=2*(l=Number(i[2])/100)-(r=l<=.5?l*(a+1):l+a-l*a),i.length>3&&(i[3]=Number(i[3])),i[0]=ut(o+1/3,n,r),i[1]=ut(o,n,r),i[2]=ut(o-1/3,n,r);else i=t.match(g)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,l=((h=Math.max(n,r,s))+(c=Math.min(n,r,s)))/2,h===c?o=a=0:(u=h-c,a=l>.5?u/(2-h-c):u/(h+c),o=h===n?(r-s)/u+(r<s?6:0):h===r?(s-n)/u+2:(n-r)/u+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},pt=function(t,e){var i,n,r,s=t.match(dt)||[],o=0,a="";if(!s.length)return t;for(i=0;i<s.length;i++)n=s[i],o+=(r=t.substr(o,t.indexOf(n,o)-o)).length+n.length,3===(n=ft(n,e)).length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},dt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(l in ct)dt+="|"+l+"\\b";dt=new RegExp(dt+")","gi"),s.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];dt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=pt(t[0],e),t[1]=pt(t[1],e)),dt.lastIndex=0},n.g.defaultStringFilter||(n.g.defaultStringFilter=s.colorStringFilter);var _t=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(dt)||[""])[0]:"",o=t.split(s).join("").match(y)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",h=-1!==t.indexOf(" ")?" ":",",c=o.length,u=c>0?o[0].replace(g,""):"";return c?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=u;else if(n&&L.test(t)){for(d=t.replace(L,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(dt)||[s])[0],p=(f=t.split(e).join("").match(y)||[]).length,c>p--)for(;++p<c;)f[p]=i?f[(p-1)/2|0]:o[p];return a+f.join(h)+h+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=u;else if(n&&L.test(t)){for(s=t.replace(L,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(f=(e=t.match(y)||[]).length,c>f--)for(;++f<c;)e[f]=i?e[(f-1)/2|0]:o[f];return a+e.join(h)+l}:function(t){return t}},mt=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,h=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return r.parse(e,a,s,o)}},gt=(W._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,l=o.firstMPT;l;)e=a[l.v],l.r?e=l.r(e):e<1e-6&&e>-1e-6&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod.call(this._tween,a.rotation,this.t,this._tween):a.rotation),1===t||0===t)for(l=o.firstMPT,s=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),vt=(W._parseToProxy=function(t,e,i,n,r,s){var o,a,l,h,c,u=n,f={},p={},d=i._transform,_=X;for(i._transform=null,X=e,n=c=i.parse(t,e,n,r),X=_,s&&(i._transform=d,u&&(u._prev=null,u._prev&&(u._prev._next=null)));n&&n!==u;){if(n.type<=1&&(p[a=n.p]=n.s+n.c,f[a]=n.s,s||(h=new gt(n,"s",a,h,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,p[a=n.p+"_"+l]=n.data[l],f[a]=n[l],s||(h=new gt(n,l,a,h,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:h,pt:c}},W.CSSPropTween=function(e,i,n,s,o,a,l,h,c,u,f){this.t=e,this.p=i,this.s=n,this.c=s,this.n=l||i,e instanceof vt||r.push(this.n),this.r=h?"function"==typeof h?h:Math.round:h,this.type=a||0,c&&(this.pr=c,t=!0),this.b=void 0===u?n:u,this.e=void 0===f?n+s:f,o&&(this._next=o,o._prev=this)}),yt=function(t,e,i,n,r,s){var o=new vt(t,e,i,n-i,r,-1,s);return o.b=i,o.e=o.xs0=n,o},xt=s.parseComplex=function(t,e,i,n,r,o,a,l,c,u){i=i||o||"","function"==typeof n&&(n=n(m,_)),a=new vt(t,e,0,0,a,u?2:1,null,!1,l,i,n),n+="",r&&dt.test(n+i)&&(n=[i,n],s.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,y,x,b,T,w,P,k,S,O,C,R=i.split(", ").join(",").split(" "),M=n.split(", ").join(",").split(" "),A=R.length,D=!1!==h;for(-1===n.indexOf(",")&&-1===i.indexOf(",")||(-1!==(n+i).indexOf("rgb")||-1!==(n+i).indexOf("hsl")?(R=R.join(" ").replace(L,", ").split(" "),M=M.join(" ").replace(L,", ").split(" ")):(R=R.join(" ").split(",").join(", ").split(" "),M=M.join(" ").split(",").join(", ").split(" ")),A=R.length),A!==M.length&&(A=(R=(o||"").split(" ")).length),a.plugin=c,a.setRatio=u,dt.lastIndex=0,f=0;f<A;f++)if(y=R[f],x=M[f]+"",(w=parseFloat(y))||0===w)a.appendXtra("",w,at(x,w),x.replace(v,""),!(!D||-1===x.indexOf("px"))&&Math.round,!0);else if(r&&dt.test(y))O=")"+((O=x.indexOf(")")+1)?x.substr(O):""),C=-1!==x.indexOf("hsl")&&V,k=x,y=ft(y,C),x=ft(x,C),(P=y.length+x.length>6)&&!V&&0===x[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(M[f]).join("transparent")):(V||(P=!1),C?a.appendXtra(k.substr(0,k.indexOf("hsl"))+(P?"hsla(":"hsl("),y[0],at(x[0],y[0]),",",!1,!0).appendXtra("",y[1],at(x[1],y[1]),"%,",!1).appendXtra("",y[2],at(x[2],y[2]),P?"%,":"%"+O,!1):a.appendXtra(k.substr(0,k.indexOf("rgb"))+(P?"rgba(":"rgb("),y[0],x[0]-y[0],",",Math.round,!0).appendXtra("",y[1],x[1]-y[1],",",Math.round).appendXtra("",y[2],x[2]-y[2],P?",":O,Math.round),P&&(y=y.length<4?1:y[3],a.appendXtra("",y,(x.length<4?1:x[3])-y,O,!1))),dt.lastIndex=0;else if(b=y.match(g)){if(!(T=x.match(v))||T.length!==b.length)return a;for(d=0,p=0;p<b.length;p++)S=b[p],k=y.indexOf(S,d),a.appendXtra(y.substr(d,k-d),Number(S),at(T[p],S),"",!(!D||"px"!==y.substr(k+S.length,2))&&Math.round,0===p),d=k+S.length;a["xs"+a.l]+=y.substr(d)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+x:x;if(-1!==n.indexOf("=")&&a.data){for(O=a.xs0+a.data.s,f=1;f<a.l;f++)O+=a["xs"+f]+a.data["xn"+f];a.e=O+a["xs"+f]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},bt=9;for((l=vt.prototype).l=l.pr=0;--bt>0;)l["xn"+bt]=0,l["xs"+bt]="";l.xs0="",l._next=l._prev=l.xfirst=l.data=l.plugin=l.setRatio=l.rxp=null,l.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new vt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var Tt=function(t,e){e=e||{},this.p=e.prefix&&Z(t)||t,a[t]=a[this.p]=this,this.format=e.formatter||_t(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},wt=W._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r=t.split(","),s=e.defaultValue;for(i=i||[s],n=0;n<r.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||s,new Tt(r[n],e)},Pt=W._registerPluginProp=function(t){if(!a[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";wt(t,{parser:function(t,i,n,r,s,l,h){var c=o.com.greensock.plugins[e];return c?(c._cssRegister(),a[n].parse(t,i,n,r,s,l,h)):(G("Error: "+e+" js file not loaded."),s)}})}};(l=Tt.prototype).parseComplex=function(t,e,i,n,r,s){var o,a,l,h,c,u,f=this.keyword;if(this.multi&&(L.test(i)||L.test(e)?(a=e.replace(L,"|").split("|"),l=i.replace(L,"|").split("|")):f&&(a=[e],l=[i])),l){for(h=l.length>a.length?l.length:a.length,o=0;o<h;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(c=e.indexOf(f))!==(u=i.indexOf(f))&&(-1===u?a[o]=a[o].split(f).join(""):-1===c&&(a[o]+=" "+f));e=a.join(", "),i=l.join(", ")}return xt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},l.parse=function(t,e,n,r,s,o,a){return this.parseComplex(t.style,this.format(Q(t,this.p,i,!1,this.dflt)),this.format(e),s,o)},s.registerSpecialProp=function(t,e,i){wt(t,{parser:function(t,n,r,s,o,a,l){var h=new vt(t,r,0,0,o,2,r,!1,i);return h.plugin=a,h.setRatio=e(t,n,s._tween,r),h},priority:i})},s.useSVGTransformAttr=!0;var kt,St="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ot=Z("transform"),Ct=q+"transform",Rt=Z("transformOrigin"),Mt=null!==Z("perspective"),At=W.Transform=function(){this.perspective=parseFloat(s.defaultTransformPerspective)||0,this.force3D=!(!1===s.defaultForce3D||!Mt)&&(s.defaultForce3D||"auto")},Dt=n.f.SVGElement,Lt=function(t,e,i){var n,r=Y.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Et=Y.documentElement||{},Bt=function(){var t,e,i,r=d||/Android/i.test(U)&&!n.f.chrome;return Y.createElementNS&&!r&&(t=Lt("svg",Et),i=(e=Lt("rect",t,{width:100,height:50,x:100})).getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[Ot]="scaleX(0.5)",r=i===e.getBoundingClientRect().width&&!(f&&Mt),Et.removeChild(t)),r}(),Nt=function(t,e,i,n,r,o){var a,l,h,c,u,f,p,d,_,m,g,v,y,x,b=t._gsTransform,T=It(t,!0);b&&(y=b.xOrigin,x=b.yOrigin),(!n||(a=n.split(" ")).length<2)&&(0===(p=t.getBBox()).x&&0===p.y&&p.width+p.height===0&&(p={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),a=[(-1!==(e=ot(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=c=parseFloat(a[0]),i.yOrigin=u=parseFloat(a[1]),n&&T!==Yt&&(f=T[0],p=T[1],d=T[2],_=T[3],m=T[4],g=T[5],(v=f*_-p*d)&&(l=c*(_/v)+u*(-d/v)+(d*g-_*m)/v,h=c*(-p/v)+u*(f/v)-(f*g-p*m)/v,c=i.xOrigin=a[0]=l,u=i.yOrigin=a[1]=h)),b&&(o&&(i.xOffset=b.xOffset,i.yOffset=b.yOffset,b=i),r||!1!==r&&!1!==s.defaultSmoothOrigin?(l=c-y,h=u-x,b.xOffset+=l*T[0]+h*T[2]-l,b.yOffset+=l*T[1]+h*T[3]-h):b.xOffset=b.yOffset=0),o||t.setAttribute("data-svg-origin",a.join(" "))},Xt=function(t){var e,i=I("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,r=this.nextSibling,s=this.style.cssText;if(Et.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=Xt}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return r?n.insertBefore(this,r):n.appendChild(this),Et.removeChild(i),this.style.cssText=s,e},Ft=function(t){return!(!Dt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!function(t){try{return t.getBBox()}catch(e){return Xt.call(t,!0)}}(t))},Yt=[1,0,0,1,0,0],It=function(t,e){var i,n,r,s,o,a,l=t._gsTransform||new At,h=t.style;if(Ot?n=Q(t,Ct,null,!0):t.currentStyle&&(n=(n=t.currentStyle.filter.match(A))&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,!Ot||!(a=!K(t)||"none"===K(t).display)&&t.parentNode||(a&&(s=h.display,h.display="block"),t.parentNode||(o=1,Et.appendChild(t)),i=!(n=Q(t,Ct,null,!0))||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?h.display=s:a&&Vt(h,"display"),o&&Et.removeChild(t)),(l.svg||t.getCTM&&Ft(t))&&(i&&-1!==(h[Ot]+"").indexOf("matrix")&&(n=h[Ot],i=0),r=t.getAttribute("transform"),i&&r&&(n="matrix("+(r=t.transform.baseVal.consolidate().matrix).a+","+r.b+","+r.c+","+r.d+","+r.e+","+r.f+")",i=0)),i)return Yt;for(r=(n||"").match(g)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(o=s-(s|=0))?(1e5*o+(o<0?-.5:.5)|0)/1e5+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},zt=W.getTransform=function(t,e,i,r){if(t._gsTransform&&i&&!r)return t._gsTransform;var o,a,l,h,c,u,f=i&&t._gsTransform||new At,p=f.scaleX<0,d=Mt&&(parseFloat(Q(t,Rt,e,!1,"0 0 0").split(" ")[2])||f.zOrigin)||0,_=parseFloat(s.defaultTransformPerspective)||0;if(f.svg=!(!t.getCTM||!Ft(t)),f.svg&&(Nt(t,Q(t,Rt,e,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),kt=s.useSVGTransformAttr||Bt),(o=It(t))!==Yt){if(16===o.length){var m,g,v,y,x,b=o[0],T=o[1],w=o[2],P=o[3],k=o[4],S=o[5],O=o[6],C=o[7],R=o[8],M=o[9],A=o[10],D=o[12],L=o[13],E=o[14],B=o[11],X=Math.atan2(O,A);f.zOrigin&&(D=R*(E=-f.zOrigin)-o[12],L=M*E-o[13],E=A*E+f.zOrigin-o[14]),f.rotationX=X*N,X&&(m=k*(y=Math.cos(-X))+R*(x=Math.sin(-X)),g=S*y+M*x,v=O*y+A*x,R=k*-x+R*y,M=S*-x+M*y,A=O*-x+A*y,B=C*-x+B*y,k=m,S=g,O=v),X=Math.atan2(-w,A),f.rotationY=X*N,X&&(g=T*(y=Math.cos(-X))-M*(x=Math.sin(-X)),v=w*y-A*x,M=T*x+M*y,A=w*x+A*y,B=P*x+B*y,b=m=b*y-R*x,T=g,w=v),X=Math.atan2(T,b),f.rotation=X*N,X&&(m=b*(y=Math.cos(X))+T*(x=Math.sin(X)),g=k*y+S*x,v=R*y+M*x,T=T*y-b*x,S=S*y-k*x,M=M*y-R*x,b=m,k=g,R=v),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),X=Math.atan2(k,S),f.scaleX=(1e5*Math.sqrt(b*b+T*T+w*w)+.5|0)/1e5,f.scaleY=(1e5*Math.sqrt(S*S+O*O)+.5|0)/1e5,f.scaleZ=(1e5*Math.sqrt(R*R+M*M+A*A)+.5|0)/1e5,b/=f.scaleX,k/=f.scaleY,T/=f.scaleX,S/=f.scaleY,Math.abs(X)>2e-5?(f.skewX=X*N,k=0,"simple"!==f.skewType&&(f.scaleY*=1/Math.cos(X))):f.skewX=0,f.perspective=B?1/(B<0?-B:B):0,f.x=D,f.y=L,f.z=E,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*b-f.yOrigin*k),f.y-=f.yOrigin-(f.yOrigin*T-f.xOrigin*S))}else if(!Mt||r||!o.length||f.x!==o[4]||f.y!==o[5]||!f.rotationX&&!f.rotationY){var F=o.length>=6,Y=F?o[0]:1,I=o[1]||0,z=o[2]||0,j=F?o[3]:1;f.x=o[4]||0,f.y=o[5]||0,l=Math.sqrt(Y*Y+I*I),h=Math.sqrt(j*j+z*z),c=Y||I?Math.atan2(I,Y)*N:f.rotation||0,u=z||j?Math.atan2(z,j)*N+c:f.skewX||0,f.scaleX=l,f.scaleY=h,f.rotation=c,f.skewX=u,Mt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*Y+f.yOrigin*z),f.y-=f.yOrigin-(f.xOrigin*I+f.yOrigin*j))}for(a in Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180)),f.zOrigin=d,f)f[a]<2e-5&&f[a]>-2e-5&&(f[a]=0)}return i&&(t._gsTransform=f,f.svg&&(kt&&t.style[Ot]?n.g.delayedCall(.001,function(){Vt(t.style,Ot)}):!kt&&t.getAttribute("transform")&&n.g.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},jt=function(t){var e,i,n=this.data,r=-n.rotation*B,s=r+n.skewX*B,o=(Math.cos(r)*n.scaleX*1e5|0)/1e5,a=(Math.sin(r)*n.scaleX*1e5|0)/1e5,l=(Math.sin(s)*-n.scaleY*1e5|0)/1e5,h=(Math.cos(s)*n.scaleY*1e5|0)/1e5,c=this.t.style,u=this.t.currentStyle;if(u){i=a,a=-l,l=-i,e=u.filter,c.filter="";var f,p,_=this.t.offsetWidth,m=this.t.offsetHeight,g="absolute"!==u.position,v="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+a+", M21="+l+", M22="+h,y=n.x+_*n.xPercent/100,x=n.y+m*n.yPercent/100;if(null!=n.ox&&(y+=(f=(n.oxp?_*n.ox*.01:n.ox)-_/2)-(f*o+(p=(n.oyp?m*n.oy*.01:n.oy)-m/2)*a),x+=p-(f*l+p*h)),v+=g?", Dx="+((f=_/2)-(f*o+(p=m/2)*a)+y)+", Dy="+(p-(f*l+p*h)+x)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?c.filter=e.replace(D,v):c.filter=v+" "+e,0!==t&&1!==t||1===o&&0===a&&0===l&&1===h&&(g&&-1===v.indexOf("Dx=0, Dy=0")||T.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&c.removeAttribute("filter")),!g){var w,P,k,S=d<8?1:-1;for(f=n.ieOffsetX||0,p=n.ieOffsetY||0,n.ieOffsetX=Math.round((_-((o<0?-o:o)*_+(a<0?-a:a)*m))/2+y),n.ieOffsetY=Math.round((m-((h<0?-h:h)*m+(l<0?-l:l)*_))/2+x),bt=0;bt<4;bt++)k=(i=-1!==(w=u[P=rt[bt]]).indexOf("px")?parseFloat(w):J(this.t,P,parseFloat(w),w.replace(b,""))||0)!==n[P]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?f-n.ieOffsetX:p-n.ieOffsetY,c[P]=(n[P]=Math.round(i-k*(0===bt||2===bt?1:S)))+"px"}}},Wt=W.set3DTransformRatio=W.setTransformRatio=function(t){var e,i,n,r,s,o,a,l,h,c,u,p,d,_,m,g,v,y,x,b,T,w=this.data,P=this.t.style,k=w.rotation,S=w.rotationX,O=w.rotationY,C=w.scaleX,R=w.scaleY,M=w.scaleZ,A=w.x,D=w.y,L=w.z,E=w.svg,N=w.perspective,X=w.force3D,F=w.skewY,Y=w.skewX;if(F&&(Y+=F,k+=F),!((1!==t&&0!==t||"auto"!==X||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&X||L||N||O||S||1!==M)||kt&&E||!Mt)k||Y||E?(k*=B,b=Y*B,T=1e5,i=Math.cos(k)*C,s=Math.sin(k)*C,n=Math.sin(k-b)*-R,o=Math.cos(k-b)*R,b&&"simple"===w.skewType&&(e=Math.tan(b-F*B),n*=e=Math.sqrt(1+e*e),o*=e,F&&(e=Math.tan(F*B),i*=e=Math.sqrt(1+e*e),s*=e)),E&&(A+=w.xOrigin-(w.xOrigin*i+w.yOrigin*n)+w.xOffset,D+=w.yOrigin-(w.xOrigin*s+w.yOrigin*o)+w.yOffset,kt&&(w.xPercent||w.yPercent)&&(m=this.t.getBBox(),A+=.01*w.xPercent*m.width,D+=.01*w.yPercent*m.height),A<(m=1e-6)&&A>-m&&(A=0),D<m&&D>-m&&(D=0)),x=(i*T|0)/T+","+(s*T|0)/T+","+(n*T|0)/T+","+(o*T|0)/T+","+A+","+D+")",E&&kt?this.t.setAttribute("transform","matrix("+x):P[Ot]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+x):P[Ot]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+C+",0,0,"+R+","+A+","+D+")";else{if(f&&(C<(m=1e-4)&&C>-m&&(C=M=2e-5),R<m&&R>-m&&(R=M=2e-5),!N||w.z||w.rotationX||w.rotationY||(N=0)),k||Y)k*=B,g=i=Math.cos(k),v=s=Math.sin(k),Y&&(k-=Y*B,g=Math.cos(k),v=Math.sin(k),"simple"===w.skewType&&(e=Math.tan((Y-F)*B),g*=e=Math.sqrt(1+e*e),v*=e,w.skewY&&(e=Math.tan(F*B),i*=e=Math.sqrt(1+e*e),s*=e))),n=-v,o=g;else{if(!(O||S||1!==M||N||E))return void(P[Ot]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) translate3d(":"translate3d(")+A+"px,"+D+"px,"+L+"px)"+(1!==C||1!==R?" scale("+C+","+R+")":""));i=o=1,n=s=0}c=1,r=a=l=h=u=p=0,d=N?-1/N:0,_=w.zOrigin,m=1e-6,",","0",(k=O*B)&&(g=Math.cos(k),l=-(v=Math.sin(k)),u=d*-v,r=i*v,a=s*v,c=g,d*=g,i*=g,s*=g),(k=S*B)&&(e=n*(g=Math.cos(k))+r*(v=Math.sin(k)),y=o*g+a*v,h=c*v,p=d*v,r=n*-v+r*g,a=o*-v+a*g,c*=g,d*=g,n=e,o=y),1!==M&&(r*=M,a*=M,c*=M,d*=M),1!==R&&(n*=R,o*=R,h*=R,p*=R),1!==C&&(i*=C,s*=C,l*=C,u*=C),(_||E)&&(_&&(A+=r*-_,D+=a*-_,L+=c*-_+_),E&&(A+=w.xOrigin-(w.xOrigin*i+w.yOrigin*n)+w.xOffset,D+=w.yOrigin-(w.xOrigin*s+w.yOrigin*o)+w.yOffset),A<m&&A>-m&&(A="0"),D<m&&D>-m&&(D="0"),L<m&&L>-m&&(L=0)),x=w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix3d(":"matrix3d(",x+=(i<m&&i>-m?"0":i)+","+(s<m&&s>-m?"0":s)+","+(l<m&&l>-m?"0":l),x+=","+(u<m&&u>-m?"0":u)+","+(n<m&&n>-m?"0":n)+","+(o<m&&o>-m?"0":o),S||O||1!==M?(x+=","+(h<m&&h>-m?"0":h)+","+(p<m&&p>-m?"0":p)+","+(r<m&&r>-m?"0":r),x+=","+(a<m&&a>-m?"0":a)+","+(c<m&&c>-m?"0":c)+","+(d<m&&d>-m?"0":d)+","):x+=",0,0,0,0,1,0,",x+=A+","+D+","+L+","+(N?1+-L/N:1)+")",P[Ot]=x}};(l=At.prototype).x=l.y=l.z=l.skewX=l.skewY=l.rotation=l.rotationX=l.rotationY=l.zOrigin=l.xPercent=l.yPercent=l.xOffset=l.yOffset=0,l.scaleX=l.scaleY=l.scaleZ=1,wt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,n,r,o,a,l){if(r._lastParsedTransform===l)return o;r._lastParsedTransform=l;var h,c=l.scale&&"function"==typeof l.scale?l.scale:0;"function"==typeof l[n]&&(h=l[n],l[n]=e),c&&(l.scale=c(m,t));var u,f,p,d,g,v,y,x,b,T=t._gsTransform,w=t.style,P=St.length,k=l,S={},O=zt(t,i,!0,k.parseTransform),C=k.transform&&("function"==typeof k.transform?k.transform(m,_):k.transform);if(O.skewType=k.skewType||O.skewType||s.defaultSkewType,r._transform=O,"rotationZ"in k&&(k.rotation=k.rotationZ),C&&"string"==typeof C&&Ot)(f=z.style)[Ot]=C,f.display="block",f.position="absolute",-1!==C.indexOf("%")&&(f.width=Q(t,"width"),f.height=Q(t,"height")),Y.body.appendChild(z),u=zt(z,null,!1),"simple"===O.skewType&&(u.scaleY*=Math.cos(u.skewX*B)),O.svg&&(v=O.xOrigin,y=O.yOrigin,u.x-=O.xOffset,u.y-=O.yOffset,(k.transformOrigin||k.svgOrigin)&&(C={},Nt(t,ot(k.transformOrigin),C,k.svgOrigin,k.smoothOrigin,!0),v=C.xOrigin,y=C.yOrigin,u.x-=C.xOffset-O.xOffset,u.y-=C.yOffset-O.yOffset),(v||y)&&(x=It(z,!0),u.x-=v-(v*x[0]+y*x[2]),u.y-=y-(v*x[1]+y*x[3]))),Y.body.removeChild(z),u.perspective||(u.perspective=O.perspective),null!=k.xPercent&&(u.xPercent=lt(k.xPercent,O.xPercent)),null!=k.yPercent&&(u.yPercent=lt(k.yPercent,O.yPercent));else if("object"==typeof k){if(u={scaleX:lt(null!=k.scaleX?k.scaleX:k.scale,O.scaleX),scaleY:lt(null!=k.scaleY?k.scaleY:k.scale,O.scaleY),scaleZ:lt(k.scaleZ,O.scaleZ),x:lt(k.x,O.x),y:lt(k.y,O.y),z:lt(k.z,O.z),xPercent:lt(k.xPercent,O.xPercent),yPercent:lt(k.yPercent,O.yPercent),perspective:lt(k.transformPerspective,O.perspective)},null!=(g=k.directionalRotation))if("object"==typeof g)for(f in g)k[f]=g[f];else k.rotation=g;"string"==typeof k.x&&-1!==k.x.indexOf("%")&&(u.x=0,u.xPercent=lt(k.x,O.xPercent)),"string"==typeof k.y&&-1!==k.y.indexOf("%")&&(u.y=0,u.yPercent=lt(k.y,O.yPercent)),u.rotation=ht("rotation"in k?k.rotation:"shortRotation"in k?k.shortRotation+"_short":O.rotation,O.rotation,"rotation",S),Mt&&(u.rotationX=ht("rotationX"in k?k.rotationX:"shortRotationX"in k?k.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",S),u.rotationY=ht("rotationY"in k?k.rotationY:"shortRotationY"in k?k.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",S)),u.skewX=ht(k.skewX,O.skewX),u.skewY=ht(k.skewY,O.skewY)}for(Mt&&null!=k.force3D&&(O.force3D=k.force3D,d=!0),(p=O.force3D||O.z||O.rotationX||O.rotationY||u.z||u.rotationX||u.rotationY||u.perspective)||null==k.scale||(u.scaleZ=1);--P>-1;)((C=u[b=St[P]]-O[b])>1e-6||C<-1e-6||null!=k[b]||null!=X[b])&&(d=!0,o=new vt(O,b,O[b],C,o),b in S&&(o.e=S[b]),o.xs0=0,o.plugin=a,r._overwriteProps.push(o.n));return C=k.transformOrigin,O.svg&&(C||k.svgOrigin)&&(v=O.xOffset,y=O.yOffset,Nt(t,ot(C),u,k.svgOrigin,k.smoothOrigin),o=yt(O,"xOrigin",(T?O:u).xOrigin,u.xOrigin,o,"transformOrigin"),o=yt(O,"yOrigin",(T?O:u).yOrigin,u.yOrigin,o,"transformOrigin"),v===O.xOffset&&y===O.yOffset||(o=yt(O,"xOffset",T?v:O.xOffset,O.xOffset,o,"transformOrigin"),o=yt(O,"yOffset",T?y:O.yOffset,O.yOffset,o,"transformOrigin")),C="0px 0px"),(C||Mt&&p&&O.zOrigin)&&(Ot?(d=!0,b=Rt,C=(C||Q(t,b,i,!1,"50% 50%"))+"",(o=new vt(w,b,0,0,o,-1,"transformOrigin")).b=w[b],o.plugin=a,Mt?(f=O.zOrigin,C=C.split(" "),O.zOrigin=(C.length>2&&(0===f||"0px"!==C[2])?parseFloat(C[2]):f)||0,o.xs0=o.e=C[0]+" "+(C[1]||"50%")+" 0px",(o=new vt(O,"zOrigin",0,0,o,-1,o.n)).b=f,o.xs0=o.e=O.zOrigin):o.xs0=o.e=C):ot(C+"",O)),d&&(r._transformType=O.svg&&kt||!p&&3!==this._transformType?2:3),h&&(l[n]=h),c&&(l.scale=c),o},prefix:!0}),wt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),wt("borderRadius",{defaultValue:"0px",parser:function(t,n,r,s,o,a){n=this.format(n);var l,h,c,u,f,p,d,_,m,g,v,y,x,b,T,w,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(m=parseFloat(t.offsetWidth),g=parseFloat(t.offsetHeight),l=n.split(" "),h=0;h<P.length;h++)this.p.indexOf("border")&&(P[h]=Z(P[h])),-1!==(f=u=Q(t,P[h],i,!1,"0px")).indexOf(" ")&&(f=(u=f.split(" "))[0],u=u[1]),p=c=l[h],d=parseFloat(f),y=f.substr((d+"").length),(x="="===p.charAt(1))?(_=parseInt(p.charAt(0)+"1",10),p=p.substr(2),_*=parseFloat(p),v=p.substr((_+"").length-(_<0?1:0))||""):(_=parseFloat(p),v=p.substr((_+"").length)),""===v&&(v=e[r]||y),v!==y&&(b=J(t,"borderLeft",d,y),T=J(t,"borderTop",d,y),"%"===v?(f=b/m*100+"%",u=T/g*100+"%"):"em"===v?(f=b/(w=J(t,"borderLeft",1,"em"))+"em",u=T/w+"em"):(f=b+"px",u=T+"px"),x&&(p=parseFloat(f)+_+v,c=parseFloat(u)+_+v)),o=xt(k,P[h],f+" "+u,p+" "+c,!1,"0px",o);return o},prefix:!0,formatter:_t("0px 0px 0px 0px",!1,!0)}),wt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,n,r,s,o){return xt(t.style,n,this.format(Q(t,n,i,!1,"0px 0px")),this.format(e),!1,"0px",s)},prefix:!0,formatter:_t("0px 0px",!1,!0)}),wt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,n,r,s,o){var a,l,h,c,u,f,p="background-position",_=i||K(t,null),m=this.format((_?d?_.getPropertyValue(p+"-x")+" "+_.getPropertyValue(p+"-y"):_.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(-1!==m.indexOf("%")!=(-1!==g.indexOf("%"))&&g.split(",").length<2&&(f=Q(t,"backgroundImage").replace(C,""))&&"none"!==f){for(a=m.split(" "),l=g.split(" "),j.setAttribute("src",f),h=2;--h>-1;)(c=-1!==(m=a[h]).indexOf("%"))!==(-1!==l[h].indexOf("%"))&&(u=0===h?t.offsetWidth-j.width:t.offsetHeight-j.height,a[h]=c?parseFloat(m)/100*u+"px":parseFloat(m)/u*100+"%");m=a.join(" ")}return this.parseComplex(t.style,m,g,s,o)},formatter:ot}),wt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:ot(-1===t.indexOf(" ")?t+" "+t:t)}}),wt("perspective",{defaultValue:"0px",prefix:!0}),wt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),wt("transformStyle",{prefix:!0}),wt("backfaceVisibility",{prefix:!0}),wt("userSelect",{prefix:!0}),wt("margin",{parser:mt("marginTop,marginRight,marginBottom,marginLeft")}),wt("padding",{parser:mt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),wt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,n,r,s,o){var a,l,h;return d<9?(l=t.currentStyle,h=d<8?" ":",",a="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(a=this.format(Q(t,this.p,i,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,s,o)}}),wt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),wt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),wt("border",{defaultValue:"0px solid #000",parser:function(t,e,n,r,s,o){var a=Q(t,"borderTopWidth",i,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(b,"");return"px"!==h&&(a=parseFloat(a)/J(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(a+" "+Q(t,"borderTopStyle",i,!1,"solid")+" "+Q(t,"borderTopColor",i,!1,"#000")),l.join(" "),s,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(dt)||["#000"])[0]}}),wt("borderWidth",{parser:mt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),wt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new vt(o,a,0,0,r,-1,i,!1,0,o[a],e)}});var Ut=function(t){var e,i=this.t,n=i.filter||Q(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(-1===n.indexOf("atrix(")&&-1===n.indexOf("radient(")&&-1===n.indexOf("oader(")?(i.removeAttribute("filter"),e=!Q(this.data,"filter")):(i.filter=n.replace(P,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),-1===n.indexOf("pacity")?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(T,"opacity="+r))};wt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,n,r,s,o){var a=parseFloat(Q(t,"opacity",i,!1,"1")),l=t.style,h="autoAlpha"===n;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),h&&1===a&&"hidden"===Q(t,"visibility",i)&&0!==e&&(a=0),V?s=new vt(l,"opacity",a,e-a,s):((s=new vt(l,"opacity",100*a,100*(e-a),s)).xn1=h?1:0,l.zoom=1,s.type=2,s.b="alpha(opacity="+s.s+")",s.e="alpha(opacity="+(s.s+s.c)+")",s.data=t,s.plugin=o,s.setRatio=Ut),h&&((s=new vt(l,"visibility",0,0,s,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",r._overwriteProps.push(s.n),r._overwriteProps.push(n)),s}});var Vt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(S,"-$1").toLowerCase())):t.removeAttribute(e))},Ht=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Vt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};wt("className",{parser:function(e,n,r,s,o,a,l){var h,c,u,f,p,d=e.getAttribute("class")||"",_=e.style.cssText;if((o=s._classNamePT=new vt(e,r,0,0,o,2)).setRatio=Ht,o.pr=-11,t=!0,o.b=d,c=et(e,i),u=e._gsClassPT){for(f={},p=u.data;p;)f[p.p]=1,p=p._next;u.setRatio(1)}return e._gsClassPT=o,o.e="="!==n.charAt(1)?n:d.replace(new RegExp("(?:\\s|^)"+n.substr(2)+"(?![\\w-])"),"")+("+"===n.charAt(0)?" "+n.substr(2):""),e.setAttribute("class",o.e),h=it(e,c,et(e),l,f),e.setAttribute("class",d),o.data=h.firstMPT,e.style.cssText=_,o=o.xfirst=s.parse(e,h.difs,o,a)}});var Gt=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,l=a.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(n=(e=this.e.split(" ").join("").split(",")).length;--n>-1;)i=e[n],a[i]&&(a[i].parse===l?r=!0:i="transformOrigin"===i?Rt:a[i].p),Vt(o,i);r&&(Vt(o,Ot),(s=this.t._gsTransform)&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(wt("clearProps",{parser:function(e,i,n,r,s){return(s=new vt(e,n,0,0,s,2)).setRatio=Gt,s.e=i,s.pr=-10,s.data=r._tween,t=!0,s}}),l="bezier,throwProps,physicsProps,physics2D".split(","),bt=l.length;bt--;)Pt(l[bt]);(l=s.prototype)._firstPT=l._lastParsedTransform=l._transform=null,l._onInitTween=function(n,o,l,f){if(!n.nodeType)return!1;this._target=_=n,this._tween=l,this._vars=o,m=f,h=o.autoRound,t=!1,e=o.suffixMap||s.suffixMap,i=K(n,""),r=this._overwriteProps;var d,g,v,y,x,b,T,P,k,S=n.style;if(c&&""===S.zIndex&&("auto"!==(d=Q(n,"zIndex",i))&&""!==d||this._addLazySet(S,"zIndex",0)),"string"==typeof o&&(y=S.cssText,d=et(n,i),S.cssText=y+";"+o,d=it(n,d,et(n)).difs,!V&&w.test(o)&&(d.opacity=parseFloat(RegExp.$1)),o=d,S.cssText=y),o.className?this._firstPT=g=a.className.parse(n,o.className,"className",this,null,null,o):this._firstPT=g=this.parse(n,o,null),this._transformType){for(k=3===this._transformType,Ot?u&&(c=!0,""===S.zIndex&&("auto"!==(T=Q(n,"zIndex",i))&&""!==T||this._addLazySet(S,"zIndex",0)),p&&this._addLazySet(S,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(k?"visible":"hidden"))):S.zoom=1,v=g;v&&v._next;)v=v._next;P=new vt(n,"transform",0,0,null,2),this._linkCSSP(P,null,v),P.setRatio=Ot?Wt:jt,P.data=this._transform||zt(n,i,!0),P.tween=l,P.pr=-1,r.pop()}if(t){for(;g;){for(b=g._next,v=y;v&&v.pr>g.pr;)v=v._next;(g._prev=v?v._prev:x)?g._prev._next=g:y=g,(g._next=v)?v._prev=g:x=g,g=b}this._firstPT=y}return!0},l.parse=function(t,n,r,s){var o,l,c,u,f,p,d,g,v,y,x=t.style;for(o in n){if("function"==typeof(p=n[o])&&(p=p(m,_)),l=a[o])r=l.parse(t,p,o,this,r,s,n);else{if("--"===o.substr(0,2)){this._tween._propLookup[o]=this._addTween.call(this._tween,t.style,"setProperty",K(t).getPropertyValue(o)+"",p+"",o,!1,o);continue}f=Q(t,o,i)+"",v="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||-1!==o.indexOf("Color")||v&&k.test(p)?(v||(p=((p=ft(p)).length>3?"rgba(":"rgb(")+p.join(",")+")"),r=xt(x,o,f,p,!0,"transparent",r,0,s)):v&&E.test(p)?r=xt(x,o,f,p,!0,null,r,0,s):(d=(c=parseFloat(f))||0===c?f.substr((c+"").length):"",""!==f&&"auto"!==f||("width"===o||"height"===o?(c=st(t,o,i),d="px"):"left"===o||"top"===o?(c=tt(t,o,i),d="px"):(c="opacity"!==o?0:1,d="")),(y=v&&"="===p.charAt(1))?(u=parseInt(p.charAt(0)+"1",10),p=p.substr(2),u*=parseFloat(p),g=p.replace(b,"")):(u=parseFloat(p),g=v?p.replace(b,""):""),""===g&&(g=o in e?e[o]:d),p=u||0===u?(y?u+c:u)+g:n[o],d!==g&&(""===g&&"lineHeight"!==o||(u||0===u)&&c&&(c=J(t,o,c,d),"%"===g?(c/=J(t,o,100,"%")/100,!0!==n.strictUnits&&(f=c+"%")):"em"===g||"rem"===g||"vw"===g||"vh"===g?c/=J(t,o,1,g):"px"!==g&&(u=J(t,o,u,g),g="px"),y&&(u||0===u)&&(p=u+c+g))),y&&(u+=c),!c&&0!==c||!u&&0!==u?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(r=new vt(x,o,u||c||0,0,r,-1,o,!1,0,f,p)).xs0="none"!==p||"display"!==o&&-1===o.indexOf("Style")?p:f:G("invalid "+o+" tween value: "+n[o]):(r=new vt(x,o,c,u-c,r,0,o,!1!==h&&("px"===g||"zIndex"===o),0,f,p)).xs0=g)}s&&r&&!r.plugin&&(r.plugin=s)}return r},l.setRatio=function(t){var e,i,n,r=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(e=r.c*t+r.s,r.r?e=r.r(e):e<1e-6&&e>-1e-6&&(e=0),r.type)if(1===r.type)if(2===(n=r.l))r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(e=r.r(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},l._enableTransforms=function(t){this._transform=this._transform||zt(this._target,i,!0),this._transformType=this._transform.svg&&kt||!t&&3!==this._transformType?2:3};var qt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};l._addLazySet=function(t,e,i){var n=this._firstPT=new vt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=qt,n.data=this},l._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},l._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},l._kill=function(t){var e,i,r,s=t;if(t.autoAlpha||t.alpha){for(i in s={},t)s[i]=t[i];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(t.className&&(e=this._classNamePT)&&((r=e.xfirst)&&r._prev?this._linkCSSP(r._prev,e._next,r._prev._prev):r===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,r._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return n.e.prototype._kill.call(this,s)};var $t=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)$t(t[r],e,i);else for(r=(n=t.childNodes).length;--r>-1;)o=(s=n[r]).type,s.style&&(e.push(et(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||$t(s,e,i)};return s.cascadeTo=function(t,e,i){var r,s,o,a,l=n.g.to(t,e,i),h=[l],c=[],u=[],f=[],p=n.g._internals.reservedProps;for(t=l._targets||l.target,$t(t,c,f),l.render(e,!0,!0),$t(t,u),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if((s=it(f[r],c[r],u[r])).firstMPT){for(o in s=s.difs,i)p[o]&&(s[o]=i[o]);for(o in a={},s)a[o]=c[r][o];h.push(n.g.fromTo(f[r],e,a,s))}return h},n.e.activate([s]),s},!0);var s=n.h.CSSPlugin,o=n.f._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,n){var r,s;if("function"!=typeof t.setAttribute)return!1;for(r in e)"function"==typeof(s=e[r])&&(s=s(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",s+"",r,!1,r),this._overwriteProps.push(r);return!0}}),a=n.f._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),l=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(i){return(Math.round(i/t)*t*e|0)/e}},h=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},c=a.prototype;
/*!
 * VERSION: 0.6.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */c._onInitAllProps=function(){var t,e,i,n,r=this._tween,s=r.vars.roundProps,o={},a=r._propLookup.roundProps;if("object"!=typeof s||s.push)for("string"==typeof s&&(s=s.split(",")),i=s.length;--i>-1;)o[s[i]]=Math.round;else for(n in s)o[n]=l(s[n]);for(n in o)for(t=r._firstPT;t;)e=t._next,t.pg?t.t._mod(o):t.n===n&&(2===t.f&&t.t?h(t.t._firstPT,o[n]):(this._add(t.t,n,t.s,t.c,o[n]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:r._firstPT===t&&(r._firstPT=e),t._next=t._prev=null,r._propLookup[n]=a)),t=e;return!1},c._add=function(t,e,i,n,r){this._addTween(t,e,i,i+n,e,r||Math.round),this._overwriteProps.push(e)};
/*!
 * VERSION: 0.3.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var u=n.f._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,s,o,a,l,h,c=!0===e.useRadians?2*Math.PI:360;for(r in e)"useRadians"!==r&&("function"==typeof(a=e[r])&&(a=a(n,t)),s=(h=(a+"").split("_"))[0],o=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),l=(a=this.finals[r]="string"==typeof s&&"="===s.charAt(1)?o+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0)-o,h.length&&(-1!==(s=h.join("_")).indexOf("short")&&(l%=c)!==l%(c/2)&&(l=l<0?l+c:l-c),-1!==s.indexOf("_cw")&&l<0?l=(l+9999999999*c)%c-(l/c|0)*c:-1!==s.indexOf("ccw")&&l>0&&(l=(l-9999999999*c)%c-(l/c|0)*c)),(l>1e-6||l<-1e-6)&&(this._addTween(t,r,o,o+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}});u._autoCSS=!0,
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
n.f._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(){var t=function(t){n.d.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var e,i,r=this.vars;for(i in r)e=r[i],s(e)&&-1!==e.join("").indexOf("{self}")&&(r[i]=this._swapSelfInParams(e));s(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},e=n.g._internals,i=t._internals={},r=e.isSelector,s=e.isArray,o=e.lazyTweens,a=e.lazyRender,l=n.f._gsDefine.globals,h=function(t){var e,i={};for(e in t)i[e]=t[e];return i},c=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},u=i.pauseCallback=function(){},f=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},p=t.prototype=new n.d;return t.version="2.0.2",p.constructor=t,p.kill()._gc=p._forcingPlayhead=p._hasPause=!1,p.to=function(t,e,i,r){var s=i.repeat&&l.TweenMax||n.g;return e?this.add(new s(t,e,i),r):this.set(t,i,r)},p.from=function(t,e,i,r){return this.add((i.repeat&&l.TweenMax||n.g).from(t,e,i),r)},p.fromTo=function(t,e,i,r,s){var o=r.repeat&&l.TweenMax||n.g;return e?this.add(o.fromTo(t,e,i,r),s):this.set(t,r,s)},p.staggerTo=function(e,i,s,o,a,l,u,p){var d,_,m=new t({onComplete:l,onCompleteParams:u,callbackScope:p,smoothChildTiming:this.smoothChildTiming}),g=s.cycle;for("string"==typeof e&&(e=n.g.selector(e)||e),r(e=e||[])&&(e=f(e)),(o=o||0)<0&&((e=f(e)).reverse(),o*=-1),_=0;_<e.length;_++)(d=h(s)).startAt&&(d.startAt=h(d.startAt),d.startAt.cycle&&c(d.startAt,e,_)),g&&(c(d,e,_),null!=d.duration&&(i=d.duration,delete d.duration)),m.to(e[_],i,d,_*o);return this.add(m,a)},p.staggerFrom=function(t,e,i,n,r,s,o,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,o,a)},p.staggerFromTo=function(t,e,i,n,r,s,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,o,a,l)},p.call=function(t,e,i,r){return this.add(n.g.delayedCall(0,t,e,i),r)},p.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new n.g(t,0,e),i)},t.exportRoot=function(e,i){null==(e=e||{}).smoothChildTiming&&(e.smoothChildTiming=!0);var r,s,o,a,l=new t(e),h=l._timeline;for(null==i&&(i=!0),h._remove(l,!0),l._startTime=0,l._rawPrevTime=l._time=l._totalTime=h._time,o=h._first;o;)a=o._next,i&&o instanceof n.g&&o.target===o.vars.onComplete||((s=o._startTime-o._delay)<0&&(r=1),l.add(o,s)),o=a;return h.add(l,0),r&&l.totalDuration(),l},p.add=function(e,i,r,o){var a,l,h,c,u,f;if("number"!=typeof i&&(i=this._parseTimeOrLabel(i,0,!0,e)),!(e instanceof n.a)){if(e instanceof Array||e&&e.push&&s(e)){for(r=r||"normal",o=o||0,a=i,l=e.length,h=0;h<l;h++)s(c=e[h])&&(c=new t({tweens:c})),this.add(c,a),"string"!=typeof c&&"function"!=typeof c&&("sequence"===r?a=c._startTime+c.totalDuration()/c._timeScale:"start"===r&&(c._startTime-=c.delay())),a+=o;return this._uncache(!0)}if("string"==typeof e)return this.addLabel(e,i);if("function"!=typeof e)throw"Cannot add "+e+" into the timeline; it is not a tween, timeline, function, or string.";e=n.g.delayedCall(0,e)}if(n.d.prototype.add.call(this,e,i),e._time&&(a=Math.max(0,Math.min(e.totalDuration(),(this.rawTime()-e._startTime)*e._timeScale)),Math.abs(a-e._totalTime)>1e-5&&e.render(a,!1,!1)),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(f=(u=this).rawTime()>e._startTime;u._timeline;)f&&u._timeline.smoothChildTiming?u.totalTime(u._totalTime,!0):u._gc&&u._enabled(!0,!1),u=u._timeline;return this},p.remove=function(t){if(t instanceof n.a){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?n.a._rootFramesTimeline:n.a._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&s(t)){for(var i=t.length;--i>-1;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},p._remove=function(t,e){return n.d.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},p.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},p.insert=p.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},p.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},p.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},p.addPause=function(t,e,i,r){var s=n.g.delayedCall(0,u,i,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},p.removeLabel=function(t){return delete this._labels[t],this},p.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},p._parseTimeOrLabel=function(t,e,i,r){var o,a;if(r instanceof n.a&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&s(r)))for(a=r.length;--a>-1;)r[a]instanceof n.a&&r[a].timeline===this&&this.remove(r[a]);if(o="number"!=typeof t||e?this.duration()>99999999999?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-o:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=o);else{if(-1===(a=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=o+e:e:this._labels[t]+e;e=parseInt(t.charAt(a-1)+"1",10)*Number(t.substr(a+1)),t=a>1?this._parseTimeOrLabel(t.substr(0,a-1),0,i):o}return Number(t)+e},p.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},p.stop=function(){return this.paused(!0)},p.gotoAndPlay=function(t,e){return this.play(t,e)},p.gotoAndStop=function(t,e){return this.pause(t,e)},p.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,s,l,h,c,u,f=this._time,p=this._dirty?this.totalDuration():this._totalDuration,d=this._startTime,_=this._timeScale,m=this._paused;if(f!==this._time&&(t+=this._time-f),t>=p-1e-7&&t>=0)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,l="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||1e-10===this._rawPrevTime)&&this._rawPrevTime!==t&&this._first&&(h=!0,this._rawPrevTime>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==f||0===this._duration&&1e-10!==this._rawPrevTime&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(l="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=r=!0,l="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(h=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=f)for(n=this._first;n&&n._startTime<=t&&!c;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(c=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!c;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(c=n),n=n._prev;c&&(this._time=t=c._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==f&&this._first||i||h||c){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==f&&t>0&&(this._active=!0),0===f&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),(u=this._time)>=f)for(n=this._first;n&&(s=n._next,u===this._time&&(!this._paused||m));)(n._active||n._startTime<=u&&!n._paused&&!n._gc)&&(c===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=s;else for(n=this._last;n&&(s=n._prev,u===this._time&&(!this._paused||m));){if(n._active||n._startTime<=f&&!n._paused&&!n._gc){if(c===n){for(c=n._prev;c&&c.endTime()>this._time;)c.render(c._reversed?c.totalDuration()-(t-c._startTime)*c._timeScale:(t-c._startTime)*c._timeScale,e,i),c=c._prev;c=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=s}this._onUpdate&&(e||(o.length&&a(),this._callback("onUpdate"))),l&&(this._gc||d!==this._startTime&&_===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(o.length&&a(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}},p._hasPausedChild=function(){for(var e=this._first;e;){if(e._paused||e instanceof t&&e._hasPausedChild())return!0;e=e._next}return!1},p.getChildren=function(t,e,i,r){r=r||-9999999999;for(var s=[],o=this._first,a=0;o;)o._startTime<r||(o instanceof n.g?!1!==e&&(s[a++]=o):(!1!==i&&(s[a++]=o),!1!==t&&(a=(s=s.concat(o.getChildren(!0,e,i))).length))),o=o._next;return s},p.getTweensOf=function(t,e){var i,r,s=this._gc,o=[],a=0;for(s&&this._enabled(!0,!0),r=(i=n.g.getTweensOf(t)).length;--r>-1;)(i[r].timeline===this||e&&this._contains(i[r]))&&(o[a++]=i[r]);return s&&this._enabled(!1,!0),o},p.recent=function(){return this._recent},p._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},p.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},p._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},p.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},p.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return n.a.prototype.invalidate.call(this)},p._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return n.d.prototype._enabled.call(this,t,e)},p.totalTime=function(t,e,i){this._forcingPlayhead=!0;var r=n.a.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},p.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},p.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(r,r._startTime-r._delay),this._calculatingDuration=0):s=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale,this._time-=r._startTime,this._totalTime-=r._startTime,this._rawPrevTime-=r._startTime),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),(i=r._startTime+r._totalDuration/r._timeScale)>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},p.paused=function(t){if(!t)for(var e=this._first,i=this._time;e;)e._startTime===i&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return n.a.prototype.paused.apply(this,arguments)},p.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===n.a._rootFramesTimeline},p.rawTime=function(t){return t&&(this._paused||this._repeat&&this.time()>0&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},t},!0);var f=n.h.TimelineLite;
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */n.f._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(){var t=function(t){f.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},e=n.g._internals,i=e.lazyTweens,r=e.lazyRender,s=n.f._gsDefine.globals,o=new n.b(null,null,1,0),a=t.prototype=new f;return a.constructor=t,a.kill()._gc=!1,t.version="2.0.2",a.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),f.prototype.invalidate.call(this)},a.addCallback=function(t,e,i,r){return this.add(n.g.delayedCall(0,t,i,r),e)},a.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},a.removePause=function(t){return this.removeCallback(f._internals.pauseCallback,t)},a.tweenTo=function(t,e){e=e||{};var i,r,a,l={ease:o,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},h=e.repeat&&s.TweenMax||n.g;for(r in e)l[r]=e[r];return l.time=this._parseTimeOrLabel(t),i=Math.abs(Number(l.time)-this._time)/this._timeScale||.001,a=new h(this,i,l),l.onStart=function(){a.target.paused(!0),a.vars.time===a.target.time()||i!==a.duration()||a.isFromTo||a.duration(Math.abs(a.vars.time-a.target.time())/a.target._timeScale).render(a.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||a,e.onStartParams||[])},a},a.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var n=this.tweenTo(e,i);return n.isFromTo=1,n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},a.render=function(t,e,n){this._gc&&this._enabled(!0,!1);var s,o,a,l,h,c,u,f,p=this._time,d=this._dirty?this.totalDuration():this._totalDuration,_=this._duration,m=this._totalTime,g=this._startTime,v=this._timeScale,y=this._rawPrevTime,x=this._paused,b=this._cycle;if(p!==this._time&&(t+=this._time-p),t>=d-1e-7&&t>=0)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(o=!0,l="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||y<0||1e-10===y)&&y!==t&&this._first&&(h=!0,y>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:(this._time=_,t=_+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==p||0===_&&1e-10!==y&&(y>0||t<0&&y>=0)&&!this._locked)&&(l="onReverseComplete",o=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=o=!0,l="onReverseComplete"):y>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=_||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&o)for(s=this._first;s&&0===s._startTime;)s._duration||(o=!1),s=s._next;t=0,this._initted||(h=!0)}else if(0===_&&y<0&&(h=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=_+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!=(1&this._cycle)&&(this._time=_-this._time),this._time>_?(this._time=_,t=_+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if((t=this._time)>=p||this._repeat&&b!==this._cycle)for(s=this._first;s&&s._startTime<=t&&!u;)s._duration||"isPause"!==s.data||s.ratio||0===s._startTime&&0===this._rawPrevTime||(u=s),s=s._next;else for(s=this._last;s&&s._startTime>=t&&!u;)s._duration||"isPause"===s.data&&s._rawPrevTime>0&&(u=s),s=s._prev;u&&u._startTime<_&&(this._time=t=u._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var T=this._yoyo&&0!=(1&b),w=T===(this._yoyo&&0!=(1&this._cycle)),P=this._totalTime,k=this._cycle,S=this._rawPrevTime,O=this._time;if(this._totalTime=b*_,this._cycle<b?T=!T:this._totalTime+=_,this._time=p,this._rawPrevTime=0===_?y-1e-4:y,this._cycle=b,this._locked=!0,p=T?0:_,this.render(p,e,0===_),e||this._gc||this.vars.onRepeat&&(this._cycle=k,this._locked=!1,this._callback("onRepeat")),p!==this._time)return;if(w&&(this._cycle=b,this._locked=!0,p=T?_+1e-4:-1e-4,this.render(p,!0,!1)),this._locked=!1,this._paused&&!x)return;this._time=O,this._totalTime=P,this._cycle=k,this._rawPrevTime=S}if(this._time!==p&&this._first||n||h||u){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==m&&t>0&&(this._active=!0),0===m&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),(f=this._time)>=p)for(s=this._first;s&&(a=s._next,f===this._time&&(!this._paused||x));)(s._active||s._startTime<=this._time&&!s._paused&&!s._gc)&&(u===s&&this.pause(),s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,n):s.render((t-s._startTime)*s._timeScale,e,n)),s=a;else for(s=this._last;s&&(a=s._prev,f===this._time&&(!this._paused||x));){if(s._active||s._startTime<=p&&!s._paused&&!s._gc){if(u===s){for(u=s._prev;u&&u.endTime()>this._time;)u.render(u._reversed?u.totalDuration()-(t-u._startTime)*u._timeScale:(t-u._startTime)*u._timeScale,e,n),u=u._prev;u=null,this.pause()}s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,n):s.render((t-s._startTime)*s._timeScale,e,n)}s=a}this._onUpdate&&(e||(i.length&&r(),this._callback("onUpdate"))),l&&(this._locked||this._gc||g!==this._startTime&&v===this._timeScale||(0===this._time||d>=this.totalDuration())&&(o&&(i.length&&r(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},a.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],o=this.getChildren(t,e,i),a=0,l=o.length;for(n=0;n<l;n++)(r=o[n]).isActive()&&(s[a++]=r);return s},a.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},a.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},a.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},a.invalidate=function(){return this._locked=!1,f.prototype.invalidate.call(this)},a.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},a.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},a.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(f.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},a.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},a.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},a.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},a.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},t},!0);var p=n.h.TimelineMax,d=180/Math.PI,_=[],m=[],g=[],v={},y=n.f._gsDefine.globals,x=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},b=function(t,e,i,n){var r={a:t},s={},o={},a={c:n},l=(t+e)/2,h=(e+i)/2,c=(i+n)/2,u=(l+h)/2,f=(h+c)/2,p=(f-u)/8;return r.b=l+(t-l)/4,s.b=u+p,r.c=s.a=(r.b+s.b)/2,s.c=o.a=(u+f)/2,o.b=f-p,a.b=c+(n-c)/4,o.c=a.a=(o.b+a.b)/2,[r,s,o,a]},T=function(t,e,i,n,r){var s,o,a,l,h,c,u,f,p,d,v,y,x,T=t.length-1,w=0,P=t[0].a;for(s=0;s<T;s++)o=(h=t[w]).a,a=h.d,l=t[w+1].d,r?(v=_[s],x=((y=m[s])+v)*e*.25/(n?.5:g[s]||.5),f=a-((c=a-(a-o)*(n?.5*e:0!==v?x/v:0))+(((u=a+(l-a)*(n?.5*e:0!==y?x/y:0))-c)*(3*v/(v+y)+.5)/4||0))):f=a-((c=a-(a-o)*e*.5)+(u=a+(l-a)*e*.5))/2,c+=f,u+=f,h.c=p=c,h.b=0!==s?P:P=h.a+.6*(h.c-h.a),h.da=a-o,h.ca=p-o,h.ba=P-o,i?(d=b(o,P,p,a),t.splice(w,1,d[0],d[1],d[2],d[3]),w+=4):w++,P=u;(h=t[w]).b=P,h.c=P+.4*(h.d-P),h.da=h.d-h.a,h.ca=h.c-h.a,h.ba=P-h.a,i&&(d=b(h.a,P,h.c,h.d),t.splice(w,1,d[0],d[1],d[2],d[3]))},w=function(t,e,i,n){var r,s,o,a,l,h,c=[];if(n)for(s=(t=[n].concat(t)).length;--s>-1;)"string"==typeof(h=t[s][e])&&"="===h.charAt(1)&&(t[s][e]=n[e]+Number(h.charAt(0)+h.substr(2)));if((r=t.length-2)<0)return c[0]=new x(t[0][e],0,0,t[0][e]),c;for(s=0;s<r;s++)o=t[s][e],a=t[s+1][e],c[s]=new x(o,0,0,a),i&&(l=t[s+2][e],_[s]=(_[s]||0)+(a-o)*(a-o),m[s]=(m[s]||0)+(l-a)*(l-a));return c[s]=new x(t[s][e],0,0,t[s+1][e]),c},P=function(t,e,i,n,r,s){var o,a,l,h,c,u,f,p,d={},y=[],x=s||t[0];for(a in r="string"==typeof r?","+r+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])y.push(a);if(t.length>1){for(p=t[t.length-1],f=!0,o=y.length;--o>-1;)if(a=y[o],Math.abs(x[a]-p[a])>.05){f=!1;break}f&&(t=t.concat(),s&&t.unshift(s),t.push(t[1]),s=t[t.length-3])}for(_.length=m.length=g.length=0,o=y.length;--o>-1;)a=y[o],v[a]=-1!==r.indexOf(","+a+","),d[a]=w(t,a,v[a],s);for(o=_.length;--o>-1;)_[o]=Math.sqrt(_[o]),m[o]=Math.sqrt(m[o]);if(!n){for(o=y.length;--o>-1;)if(v[a])for(u=(l=d[y[o]]).length-1,h=0;h<u;h++)c=l[h+1].da/m[h]+l[h].da/_[h]||0,g[h]=(g[h]||0)+c*c;for(o=g.length;--o>-1;)g[o]=Math.sqrt(g[o])}for(o=y.length,h=i?4:1;--o>-1;)l=d[a=y[o]],T(l,e,i,n,v[a]),f&&(l.splice(0,h),l.splice(l.length-h,h));return d},k=function(t,e,i){for(var n,r,s,o,a,l,h,c,u,f,p,d=1/i,_=t.length;--_>-1;)for(s=(f=t[_]).a,o=f.d-s,a=f.c-s,l=f.b-s,n=r=0,c=1;c<=i;c++)n=r-(r=((h=d*c)*h*o+3*(u=1-h)*(h*a+u*l))*h),e[p=_*i+c-1]=(e[p]||0)+n*n},S=n.f._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,o,a,l=e.values||[],h={},c=l[0],u=e.autoRotate||i.vars.orientToBezier;for(n in this._autoRotate=u?u instanceof Array?u:[["x","y","rotation",!0===u?0:Number(u)||0]]:null,c)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],h[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||h[n]!==l[0][n]&&(a=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?P(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):function(t,e,i){var n,r,s,o,a,l,h,c,u,f,p,d={},_="cubic"===(e=e||"soft")?3:2,m="soft"===e,g=[];if(m&&i&&(t=[i].concat(t)),null==t||t.length<_+1)throw"invalid Bezier data";for(u in t[0])g.push(u);for(l=g.length;--l>-1;){for(d[u=g[l]]=a=[],f=0,c=t.length,h=0;h<c;h++)n=null==i?t[h][u]:"string"==typeof(p=t[h][u])&&"="===p.charAt(1)?i[u]+Number(p.charAt(0)+p.substr(2)):Number(p),m&&h>1&&h<c-1&&(a[f++]=(n+a[f-2])/2),a[f++]=n;for(c=f-_+1,f=0,h=0;h<c;h+=_)n=a[h],r=a[h+1],s=a[h+2],o=2===_?0:a[h+3],a[f++]=p=3===_?new x(n,r,s,o):new x(n,(2*r+n)/3,(2*r+s)/3,s);a.length=f}return d}(l,e.type,h),this._segCount=this._beziers[n].length,this._timeRes){var f=function(t,e){var i,n,r,s,o=[],a=[],l=0,h=0,c=(e=e>>0||6)-1,u=[],f=[];for(i in t)k(t[i],o,e);for(r=o.length,n=0;n<r;n++)l+=Math.sqrt(o[n]),f[s=n%e]=l,s===c&&(h+=l,u[s=n/e>>0]=f,a[s]=h,l=0,f=[]);return{length:h,lengths:a,segments:u}}(this._beziers,this._timeRes);this._length=f.length,this._lengths=f.lengths,this._segments=f.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(u=this._autoRotate)for(this._initialRotations=[],u[0]instanceof Array||(this._autoRotate=u=[u]),s=u.length;--s>-1;){for(o=0;o<3;o++)n=u[s][o],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=u[s][2],this._initialRotations[s]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,n,r,s,o,a,l,h,c,u=this._segCount,f=this._func,p=this._target,_=t!==this._startRatio;if(this._timeRes){if(h=this._lengths,c=this._curSeg,t*=this._length,n=this._li,t>this._l2&&n<u-1){for(l=u-1;n<l&&(this._l2=h[++n])<=t;);this._l1=h[n-1],this._li=n,this._curSeg=c=this._segments[n],this._s2=c[this._s1=this._si=0]}else if(t<this._l1&&n>0){for(;n>0&&(this._l1=h[--n])>=t;);0===n&&t<this._l1?this._l1=0:n++,this._l2=h[n],this._li=n,this._curSeg=c=this._segments[n],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(e=n,t-=this._l1,n=this._si,t>this._s2&&n<c.length-1){for(l=c.length-1;n<l&&(this._s2=c[++n])<=t;);this._s1=c[n-1],this._si=n}else if(t<this._s1&&n>0){for(;n>0&&(this._s1=c[--n])>=t;);0===n&&t<this._s1?this._s1=0:n++,this._s2=c[n],this._si=n}o=(n+(t-this._s1)/(this._s2-this._s1))*this._prec||0}else o=(t-(e=t<0?0:t>=1?u-1:u*t>>0)*(1/u))*u;for(i=1-o,n=this._props.length;--n>-1;)r=this._props[n],a=(o*o*(s=this._beziers[r][e]).da+3*i*(o*s.ca+i*s.ba))*o+s.a,this._mod[r]&&(a=this._mod[r](a,p)),f[r]?p[r](a):p[r]=a;if(this._autoRotate){var m,g,v,y,x,b,T,w=this._autoRotate;for(n=w.length;--n>-1;)r=w[n][2],b=w[n][3]||0,T=!0===w[n][4]?1:d,s=this._beziers[w[n][0]],m=this._beziers[w[n][1]],s&&m&&(s=s[e],m=m[e],g=s.a+(s.b-s.a)*o,g+=((y=s.b+(s.c-s.b)*o)-g)*o,y+=(s.c+(s.d-s.c)*o-y)*o,v=m.a+(m.b-m.a)*o,v+=((x=m.b+(m.c-m.b)*o)-v)*o,x+=(m.c+(m.d-m.c)*o-x)*o,a=_?Math.atan2(x-v,y-g)*T+b:this._initialRotations[n],this._mod[r]&&(a=this._mod[r](a,p)),f[r]?p[r](a):p[r]=a)}}}),O=S.prototype;
/*!
 * VERSION: 1.3.8
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/S.bezierThrough=P,S.cubicToQuadratic=b,S._autoCSS=!0,S.quadraticToCubic=function(t,e,i){return new x(t,(2*e+t)/3,(2*e+i)/3,i)},S._cssRegister=function(){var t=y.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,o,a,l){e instanceof Array&&(e={values:e}),l=new S;var h,c,u,f=e.values,p=f.length-1,d=[],_={};if(p<0)return a;for(h=0;h<=p;h++)u=i(t,f[h],o,a,l,p!==h),d[h]=u.end;for(c in e)_[c]=e[c];return _.values=d,(a=new r(t,"bezier",0,0,u.pt,2)).data=u,a.plugin=l,a.setRatio=n,0===_.autoRotate&&(_.autoRotate=!0),!_.autoRotate||_.autoRotate instanceof Array||(h=!0===_.autoRotate?0:Number(_.autoRotate),_.autoRotate=null!=u.end.left?[["left","top","rotation",h,!1]]:null!=u.end.x&&[["x","y","rotation",h,!1]]),_.autoRotate&&(o._transform||o._enableTransforms(!1),u.autoRotate=o._target._gsTransform,u.proxy.rotation=u.autoRotate.rotation||0,o._overwriteProps.push("rotation")),l._onInitTween(u.proxy,_,o._tween),a}})}},O._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)(e=t[i[n]])&&"function"==typeof e&&(this._mod[i[n]]=e)},O._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)},
/*!
 * VERSION: 1.16.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
n.f._gsDefine("easing.Back",["easing.Ease"],function(){var t,e,i,r,s=n.f.GreenSockGlobals||n.f,o=s.com.greensock,a=2*Math.PI,l=Math.PI/2,h=o._class,c=function(t,e){var i=h("easing."+t,function(){},!0),r=i.prototype=new n.b;return r.constructor=i,r.getRatio=e,i},u=n.b.register||function(){},f=function(t,e,i,n,r){var s=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return u(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(t,e){var i=h("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=i.prototype=new n.b;return r.constructor=i,r.getRatio=e,r.config=function(t){return new i(t)},i},_=f("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),g=m.prototype=new n.b;return g.constructor=m,g.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),g.config=m.config=function(t,e,i){return new m(t,e,i)},(g=(t=h("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new n.b).constructor=t,g.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},g.config=t.config=function(e,i){return new t(e,i)},(g=(e=h("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new n.b).constructor=e,g.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},g.config=e.config=function(t,i,n){return new e(t,i,n)},(g=(i=h("easing.RoughEase",function(t){for(var e,i,r,s,o,a,l=(t=t||{}).taper||"none",h=[],c=0,u=0|(t.points||20),f=u,d=!1!==t.randomize,_=!0===t.clamp,m=t.template instanceof n.b?t.template:null,g="number"==typeof t.strength?.4*t.strength:.4;--f>-1;)e=d?Math.random():1/u*f,i=m?m.getRatio(e):e,r="none"===l?g:"out"===l?(s=1-e)*s*g:"in"===l?e*e*g:e<.5?(s=2*e)*s*.5*g:(s=2*(1-e))*s*.5*g,d?i+=Math.random()*r-.5*r:f%2?i+=.5*r:i-=.5*r,_&&(i>1?i=1:i<0&&(i=0)),h[c++]={x:e,y:i};for(h.sort(function(t,e){return t.x-e.x}),a=new p(1,1,null),f=u;--f>-1;)o=h[f],a=new p(o.x,o.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)},!0)).prototype=new n.b).constructor=i,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new i(t)},i.ease=new i,f("Bounce",c("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),c("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),c("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",c("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),c("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),c("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),f("Elastic",(r=function(t,e,i){var r=h("easing."+t,function(t,e){this._p1=t>=1?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),s=r.prototype=new n.b;return s.constructor=r,s.getRatio=e,s.config=function(t,e){return new r(t,e)},r})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),r("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",c("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),c("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),c("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",c("SineOut",function(t){return Math.sin(t*l)}),c("SineIn",function(t){return 1-Math.cos(t*l)}),c("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(t){return n.b.map[t]}},!0),u(s.SlowMo,"SlowMo","ease,"),u(i,"RoughEase","ease,"),u(t,"SteppedEase","ease,"),_},!0);var C=n.h.Back,R=n.h.Elastic,M=n.h.Bounce,A=n.h.RoughEase,D=n.h.SlowMo,L=n.h.SteppedEase,E=n.h.Circ,B=n.h.Expo,N=n.h.Sine,X=n.h.ExpoScaleEase,F=r;F._autoActivated=[f,p,s,o,S,a,u,C,R,M,A,D,L,E,B,N,X],
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 **/
/*!
 * VERSION: 0.16.5
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * Requires TweenLite and CSSPlugin version 1.17.0 or later (TweenMax contains both TweenLite and CSSPlugin). ThrowPropsPlugin is required for momentum-based continuation of movement after the mouse/touch is released (ThrowPropsPlugin is a membership benefit of Club GreenSock - http://greensock.com/club/).
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
n.f._gsDefine("utils.Draggable",["events.EventDispatcher","TweenLite","plugins.CSSPlugin"],function(){var t,e,i,r,o,a,l,h={css:{},data:"_draggable"},c={css:{},data:"_draggable"},u={css:{},data:"_draggable"},f={css:{}},p=n.f._gsDefine.globals,d={},_=function(){return!1},m={style:{},appendChild:_,removeChild:_},g=n.f.document||{createElement:function(){return m}},v=g.documentElement||{},y=function(t){return g.createElementNS?g.createElementNS("http://www.w3.org/1999/xhtml",t):g.createElement(t)},x=y("div"),b=[],T=180/Math.PI,w=999999999999999,P=Date.now||function(){return(new Date).getTime()},k=!(g.addEventListener||!g.all),S=g.createElement("div"),O=[],C={},R=0,M=/^(?:a|input|textarea|button|select)$/i,A=0,D=n.f.navigator&&-1!==n.f.navigator.userAgent.toLowerCase().indexOf("android"),L=0,E={},B={},N=function(t,e){var i,n={};if(e)for(i in t)n[i]=t[i]*e;else for(i in t)n[i]=t[i];return n},X=function(){for(var t=O.length;--t>-1;)O[t]()},F=function(t){for(var e=O.length;--e>-1;)O[e]===t&&O.splice(e,1);n.g.to(Y,0,{overwrite:"all",delay:15,onComplete:Y,data:"_draggable"})},Y=function(){O.length||n.g.ticker.removeEventListener("tick",X)},I=function(){return null!=window.pageYOffset?window.pageYOffset:null!=g.scrollTop?g.scrollTop:v.scrollTop||g.body.scrollTop||0},z=function(){return null!=window.pageXOffset?window.pageXOffset:null!=g.scrollLeft?g.scrollLeft:v.scrollLeft||g.body.scrollLeft||0},j=function(t,e){Ot(t,"scroll",e),U(t.parentNode)||j(t.parentNode,e)},W=function(t,e){Ct(t,"scroll",e),U(t.parentNode)||W(t.parentNode,e)},U=function(t){return!(t&&t!==v&&t!==g&&t!==g.body&&t!==window&&t.nodeType&&t.parentNode)},V=function(t,e){var i="x"===e?"Width":"Height",n="scroll"+i,r="client"+i,s=g.body;return Math.max(0,U(t)?Math.max(v[n],s[n])-(window["inner"+i]||v[r]||s[r]):t[n]-t[r])},H=function(t){var e=U(t),i=V(t,"x"),n=V(t,"y");e?t=B:H(t.parentNode),t._gsMaxScrollX=i,t._gsMaxScrollY=n,t._gsScrollX=t.scrollLeft||0,t._gsScrollY=t.scrollTop||0},G=function(t,e){return t=t||window.event,d.pageX=t.clientX+g.body.scrollLeft+v.scrollLeft,d.pageY=t.clientY+g.body.scrollTop+v.scrollTop,e&&(t.returnValue=!1),d},q=function(t){return t?("string"==typeof t&&(t=n.g.selector(t)),t.length&&t!==window&&t[0]&&t[0].style&&!t.nodeType&&(t=t[0]),t===window||t.nodeType&&t.style?t:null):t},$=function(t,e){var i,n,r,s=t.style;if(void 0===s[e]){for(r=["O","Moz","ms","Ms","Webkit"],n=5,i=e.charAt(0).toUpperCase()+e.substr(1);--n>-1&&void 0===s[r[n]+i];);if(n<0)return"";e=(3===n?"ms":r[n])+i}return e},Z=function(t,e,i){var n=t.style;n&&(void 0===n[e]&&(e=$(t,e)),null==i?n.removeProperty?n.removeProperty(e.replace(/([A-Z])/g,"-$1").toLowerCase()):n.removeAttribute(e):void 0!==n[e]&&(n[e]=i))},K=("undefined"!=typeof window?window:g.defaultView||{getComputedStyle:function(){}}).getComputedStyle,Q=function(t,e){return K(t instanceof Element?t:t.host||(t.parentNode||{}).host||t,e)},J=/(?:Left|Right|Width)/i,tt=/(?:\d|\-|\+|=|#|\.)*/g,et=function(t,e,i,n,r){if("px"===n||!n)return i;if("auto"===n||!i)return 0;var s,o=J.test(e),a=t,l=x.style,h=i<0;return h&&(i=-i),"%"===n&&-1!==e.indexOf("border")?s=i/100*(o?t.clientWidth:t.clientHeight):(l.cssText="border:0 solid red;position:"+it(t,"position",!0)+";line-height:0;","%"!==n&&a.appendChild?l[o?"borderLeftWidth":"borderTopWidth"]=i+n:(a=t.parentNode||g.body,l[o?"width":"height"]=i+n),a.appendChild(x),s=parseFloat(x[o?"offsetWidth":"offsetHeight"]),a.removeChild(x),0!==s||r||(s=et(t,e,i,n,!0))),h?-s:s},it=function(t,e,i){var n,r=(t._gsTransform||{})[e];return r||0===r?r:(t.style&&t.style[e]?r=t.style[e]:(n=Q(t))?r=(r=n.getPropertyValue(e.replace(/([A-Z])/g,"-$1").toLowerCase()))||n.length?r:n[e]:t.currentStyle&&(r=t.currentStyle[e]),"auto"!==r||"top"!==e&&"left"!==e||(r=function(t,e){if("absolute"!==it(t,"position",!0))return 0;var i="left"===e?"Left":"Top",n=it(t,"margin"+i,!0);return t["offset"+i]-(et(t,e,parseFloat(n),(n+"").replace(tt,""))||0)}(t,e)),i?r:parseFloat(r)||0)},nt=function(t,e,i){var n=t.vars,r=n[i],s=t._listeners[e];"function"==typeof r&&r.apply(n[i+"Scope"]||n.callbackScope||t,n[i+"Params"]||[t.pointerEvent]),s&&t.dispatchEvent(e)},rt=function(t,e){var i,n,r,s=q(t);return s?wt(s,e):void 0!==t.left?(r=vt(e),{left:t.left-r.x,top:t.top-r.y,width:t.width,height:t.height}):{left:n=t.min||t.minX||t.minRotation||0,top:i=t.min||t.minY||0,width:(t.max||t.maxX||t.maxRotation||0)-n,height:(t.max||t.maxY||0)-i}},st=function(){if(!g.createElementNS)return i=0,void(r=!1);var t,e,n,s,h=y("div"),c=g.createElementNS("http://www.w3.org/2000/svg","svg"),u=y("div"),f=h.style,p=g.body||v,d="flex"===it(p,"display",!0);g.body&&lt&&(f.position="absolute",p.appendChild(u),u.appendChild(h),s=h.offsetParent,u.style[lt]="rotate(1deg)",l=h.offsetParent===s,u.style.position="absolute",f.height="10px",s=h.offsetTop,u.style.border="5px solid red",a=s!==h.offsetTop,p.removeChild(u)),f=c.style,c.setAttributeNS(null,"width","400px"),c.setAttributeNS(null,"height","400px"),c.setAttributeNS(null,"viewBox","0 0 400 400"),f.display="block",f.boxSizing="border-box",f.border="0px solid red",f.transform="none",h.style.cssText="width:100px;height:100px;overflow:scroll;-ms-overflow-style:none;",p.appendChild(h),h.appendChild(c),e=(n=c.createSVGPoint().matrixTransform(c.getScreenCTM())).y,h.scrollTop=100,n.x=n.y=0,n=n.matrixTransform(c.getScreenCTM()),o=e-n.y<100.1?0:e-n.y-150,h.removeChild(c),p.removeChild(h),p.appendChild(c),d&&(p.style.display="block"),e=(t=c.getScreenCTM()).e,f.border="50px solid red",t=c.getScreenCTM(),0===e&&0===t.e&&0===t.f&&1===t.a?(i=1,r=!0):(i=e!==t.e?1:0,r=1!==t.a),d&&(p.style.display="flex"),p.removeChild(c)},ot=""!==$(x,"perspective"),at=$(x,"transformOrigin").replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),lt=$(x,"transform"),ht=lt.replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),ct={},ut={},ft=n.f.SVGElement,pt=function(t){return!!(ft&&"function"==typeof t.getBBox&&t.getCTM&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},dt=n.f.navigator&&(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(n.f.navigator.userAgent)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(n.f.navigator.userAgent))&&parseFloat(RegExp.$1)<11,_t=[],mt=[],gt=function(t){if(!t.getBoundingClientRect||!t.parentNode||!lt)return{offsetTop:0,offsetLeft:0,scaleX:1,scaleY:1,offsetParent:v};if(!1!==Bt.cacheSVGData&&t._dCache&&t._dCache.lastUpdate===n.g.ticker.frame)return t._dCache;var e,s,a,l,h,c,u,f,p,d,_,m=t,y=yt(t);if(y.lastUpdate=n.g.ticker.frame,t.getBBox&&!y.isSVGRoot){for(m=t.parentNode,e=t.getBBox();m&&"svg"!==(m.nodeName+"").toLowerCase();)m=m.parentNode;return l=gt(m),y.offsetTop=e.y*l.scaleY,y.offsetLeft=e.x*l.scaleX,y.scaleX=l.scaleX,y.scaleY=l.scaleY,y.offsetParent=m||v,y}for((a=y.offsetParent)===g.body&&(a=v),mt.length=_t.length=0;m&&("matrix(1, 0, 0, 1, 0, 0)"!==(h=it(m,lt,!0))&&"none"!==h&&"translate3d(0px, 0px, 0px)"!==h&&(mt.push(m),_t.push(m.style[lt]),m.style[lt]="none"),m!==a);)m=m.parentNode;for(s=a.getBoundingClientRect(),h=t.getScreenCTM(),u=t.createSVGPoint().matrixTransform(h),y.scaleX=Math.sqrt(h.a*h.a+h.b*h.b),y.scaleY=Math.sqrt(h.d*h.d+h.c*h.c),void 0===i&&st(),y.borderBox&&!r&&t.getAttribute("width")&&(l=Q(t)||{},f=parseFloat(l.borderLeftWidth)+parseFloat(l.borderRightWidth)||0,p=parseFloat(l.borderTopWidth)+parseFloat(l.borderBottomWidth)||0,d=parseFloat(l.width)||0,_=parseFloat(l.height)||0,y.scaleX*=(d-f)/d,y.scaleY*=(_-p)/_),o?(e=t.getBoundingClientRect(),y.offsetLeft=e.left-s.left,y.offsetTop=e.top-s.top):(y.offsetLeft=u.x-s.left,y.offsetTop=u.y-s.top),y.offsetParent=a,c=mt.length;--c>-1;)mt[c].style[lt]=_t[c];return y},vt=function(t,e){if(e=e||{},!t||t===v||!t.parentNode||t===window)return{x:0,y:0};var i=Q(t),r=at&&i?i.getPropertyValue(at):"50% 50%",s=r.split(" "),o=-1!==r.indexOf("left")?"0%":-1!==r.indexOf("right")?"100%":s[0],a=-1!==r.indexOf("top")?"0%":-1!==r.indexOf("bottom")?"100%":s[1];return"center"!==a&&null!=a||(a="50%"),("center"===o||isNaN(parseFloat(o)))&&(o="50%"),t.getBBox&&pt(t)?(t._gsTransform||(n.g.set(t,{x:"+=0",overwrite:!1}),void 0===t._gsTransform.xOrigin&&console.log("Draggable requires at least GSAP 1.17.0")),r=t.getBBox(),e.x=t._gsTransform.xOrigin-r.x,e.y=t._gsTransform.yOrigin-r.y):(t.getBBox&&-1!==(o+a).indexOf("%")&&(t={offsetWidth:(t=t.getBBox()).width,offsetHeight:t.height}),e.x=-1!==o.indexOf("%")?t.offsetWidth*parseFloat(o)/100:parseFloat(o),e.y=-1!==a.indexOf("%")?t.offsetHeight*parseFloat(a)/100:parseFloat(a)),e},yt=function(t){if(!1!==Bt.cacheSVGData&&t._dCache&&t._dCache.lastUpdate===n.g.ticker.frame)return t._dCache;var e,i=t._dCache=t._dCache||{},r=Q(t),s=t.getBBox&&pt(t),o="svg"===(t.nodeName+"").toLowerCase();if(i.isSVG=s,i.isSVGRoot=o,i.borderBox="border-box"===r.boxSizing,i.computedStyle=r,o)(e=t.parentNode||v).insertBefore(x,t),i.offsetParent=x.offsetParent||v,e.removeChild(x);else if(s){for(e=t.parentNode;e&&"svg"!==(e.nodeName+"").toLowerCase();)e=e.parentNode;i.offsetParent=e}else i.offsetParent=t.offsetParent;return i},xt=function(t,e,n,r,s){if(t===window||!t||!t.style||!t.parentNode)return[1,0,0,1,0,0];var o,h,c,u,f,p,d,_,m,y,x,b,T,w,P=t._dCache||yt(t),k=t.parentNode,S=k._dCache||yt(k),O=P.computedStyle,C=P.isSVG?S.offsetParent:k.offsetParent;return o=P.isSVG&&-1!==(t.style[lt]+"").indexOf("matrix")?t.style[lt]:O?O.getPropertyValue(ht):t.currentStyle?t.currentStyle[lt]:"1,0,0,1,0,0",t.getBBox&&-1!==(t.getAttribute("transform")+"").indexOf("matrix")&&(o=t.getAttribute("transform")),(o=(o+"").match(/(?:\-|\.|\b)(\d|\.|e\-)+/g)||[1,0,0,1,0,0]).length>6&&(o=[o[0],o[1],o[4],o[5],o[12],o[13]]),r?o[4]=o[5]=0:P.isSVG&&(f=t._gsTransform)&&(f.xOrigin||f.yOrigin)&&(o[0]=parseFloat(o[0]),o[1]=parseFloat(o[1]),o[2]=parseFloat(o[2]),o[3]=parseFloat(o[3]),o[4]=parseFloat(o[4])-(f.xOrigin-(f.xOrigin*o[0]+f.yOrigin*o[2])),o[5]=parseFloat(o[5])-(f.yOrigin-(f.xOrigin*o[1]+f.yOrigin*o[3]))),e&&(void 0===i&&st(),c=P.isSVG||P.isSVGRoot?gt(t):t,P.isSVG?(u=t.getBBox(),y=S.isSVGRoot?{x:0,y:0}:k.getBBox(),c={offsetLeft:u.x-y.x,offsetTop:u.y-y.y,offsetParent:P.offsetParent}):P.isSVGRoot?(x=parseInt(O.borderTopWidth,10)||0,b=parseInt(O.borderLeftWidth,10)||0,T=(o[0]-i)*b+o[2]*x,w=o[1]*b+(o[3]-i)*x,p=e.x,d=e.y,_=p-(p*o[0]+d*o[2]),m=d-(p*o[1]+d*o[3]),o[4]=parseFloat(o[4])+_,o[5]=parseFloat(o[5])+m,e.x-=_,e.y-=m,p=c.scaleX,d=c.scaleY,s||(e.x*=p,e.y*=d),o[0]*=p,o[1]*=d,o[2]*=p,o[3]*=d,dt||(e.x+=T,e.y+=w),C===g.body&&c.offsetParent===v&&(C=v)):!a&&t.offsetParent&&(e.x+=parseInt(it(t.offsetParent,"borderLeftWidth"),10)||0,e.y+=parseInt(it(t.offsetParent,"borderTopWidth"),10)||0),h=k===v||k===g.body,o[4]=Number(o[4])+e.x+(c.offsetLeft||0)-n.x-(h?0:k.scrollLeft||0),o[5]=Number(o[5])+e.y+(c.offsetTop||0)-n.y-(h?0:k.scrollTop||0),k&&"fixed"===it(t,"position",O)&&(o[4]+=z(),o[5]+=I()),!k||k===v||C!==c.offsetParent||S.isSVG||l&&"100100"!==xt(k).join("")||(c=S.isSVGRoot?gt(k):k,o[4]-=c.offsetLeft||0,o[5]-=c.offsetTop||0,a||!S.offsetParent||P.isSVG||P.isSVGRoot||(o[4]-=parseInt(it(S.offsetParent,"borderLeftWidth"),10)||0,o[5]-=parseInt(it(S.offsetParent,"borderTopWidth"),10)||0))),o},bt=function(t,e){if(!t||t===window||!t.parentNode)return[1,0,0,1,0,0];for(var i,n,r,s,o,a,l,h,c=vt(t,ct),u=vt(t.parentNode,ut),f=xt(t,c,u,!1,!e);(t=t.parentNode)&&t.parentNode&&t!==v;)c=u,u=vt(t.parentNode,c===ct?ut:ct),l=xt(t,c,u),i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],f[0]=i*l[0]+n*l[2],f[1]=i*l[1]+n*l[3],f[2]=r*l[0]+s*l[2],f[3]=r*l[1]+s*l[3],f[4]=o*l[0]+a*l[2]+l[4],f[5]=o*l[1]+a*l[3]+l[5];return e&&(i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],h=i*s-n*r,f[0]=s/h,f[1]=-n/h,f[2]=-r/h,f[3]=i/h,f[4]=(r*a-s*o)/h,f[5]=-(i*a-n*o)/h),f},Tt=function(t,e,i){var n=t.x*e[0]+t.y*e[2]+e[4],r=t.x*e[1]+t.y*e[3]+e[5];return t.x=n*i[0]+r*i[2]+i[4],t.y=n*i[1]+r*i[3]+i[5],t},wt=function(t,e,i){if(!(t=q(t)))return null;e=q(e);var n,r,s,o,a,l,h,c,u,f,p,d,_,m,y,x,b,T,w,P,S,O,C=t.getBBox&&pt(t);if(t===window)o=I(),s=(r=z())+(v.clientWidth||t.innerWidth||g.body.clientWidth||0),a=o+((t.innerHeight||0)-20<v.clientHeight?v.clientHeight:t.innerHeight||g.body.clientHeight||0);else{if(void 0===e||e===window)return t.getBoundingClientRect();r=-(n=vt(t)).x,o=-n.y,C?(_=(d=t.getBBox()).width,m=d.height):"svg"!==(t.nodeName+"").toLowerCase()&&t.offsetWidth?(_=t.offsetWidth,m=t.offsetHeight):(S=Q(t),_=parseFloat(S.width),m=parseFloat(S.height)),s=r+_,a=o+m,"svg"!==t.nodeName.toLowerCase()||k||(O=(y=gt(t)).computedStyle||{},T=(t.getAttribute("viewBox")||"0 0").split(" "),w=parseFloat(T[0]),P=parseFloat(T[1]),x=parseFloat(O.borderLeftWidth)||0,b=parseFloat(O.borderTopWidth)||0,s-=_-(_-x)/y.scaleX-w,a-=m-(m-b)/y.scaleY-P,r-=x/y.scaleX-w,o-=b/y.scaleY-P,S&&(s+=(parseFloat(O.borderRightWidth)+x)/y.scaleX,a+=(b+parseFloat(O.borderBottomWidth))/y.scaleY))}return t===e?{left:r,top:o,width:s-r,height:a-o}:(l=bt(t),h=bt(e,!0),c=Tt({x:r,y:o},l,h),u=Tt({x:s,y:o},l,h),f=Tt({x:s,y:a},l,h),p=Tt({x:r,y:a},l,h),r=Math.min(c.x,u.x,f.x,p.x),o=Math.min(c.y,u.y,f.y,p.y),E.x=E.y=0,i&&vt(e,E),{left:r+E.x,top:o+E.y,width:Math.max(c.x,u.x,f.x,p.x)-r,height:Math.max(c.y,u.y,f.y,p.y)-o})},Pt=function(t){return!!(t&&t.length&&t[0]&&(t[0].nodeType&&t[0].style&&!t.nodeType||t[0].length&&t[0][0]))},kt="undefined"!=typeof window&&"ontouchstart"in v&&"orientation"in window,St=function(t){for(var e=t.split(","),i=(void 0!==x.onpointerdown?"pointerdown,pointermove,pointerup,pointercancel":void 0!==x.onmspointerdown?"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel":t).split(","),n={},r=4;--r>-1;)n[e[r]]=i[r],n[i[r]]=e[r];return n}("touchstart,touchmove,touchend,touchcancel"),Ot=function(t,e,i,n){if(t.addEventListener){var r=St[e];n=n||{passive:!1},t.addEventListener(r||e,i,n),r&&e!==r&&t.addEventListener(e,i,n)}else t.attachEvent&&t.attachEvent("on"+e,i)},Ct=function(t,e,i){if(t.removeEventListener){var n=St[e];t.removeEventListener(n||e,i),n&&e!==n&&t.removeEventListener(e,i)}else t.detachEvent&&t.detachEvent("on"+e,i)},Rt=function(e){t=e.touches&&A<e.touches.length,Ct(e.target,"touchend",Rt)},Mt=function(e){t=e.touches&&A<e.touches.length,Ot(e.target,"touchend",Rt)},At=function(t,e,i,n,r,s){var o,a,l,h={};if(e)if(1!==r&&e instanceof Array){if(h.end=o=[],l=e.length,"object"==typeof e[0])for(a=0;a<l;a++)o[a]=N(e[a],r);else for(a=0;a<l;a++)o[a]=e[a]*r;i+=1.1,n-=1.1}else h.end="function"==typeof e?function(i){var n,s,o=e.call(t,i);if(1!==r)if("object"==typeof o){for(s in n={},o)n[s]=o[s]*r;o=n}else o*=r;return o}:e;return(i||0===i)&&(h.max=i),(n||0===n)&&(h.min=n),s&&(h.velocity=0),h},Dt=function(t){var e;return!(!t||!t.getAttribute||"BODY"===t.nodeName)&&(!("true"!==(e=t.getAttribute("data-clickable"))&&("false"===e||!t.onclick&&!M.test(t.nodeName+"")&&"true"!==t.getAttribute("contentEditable")))||Dt(t.parentNode))},Lt=function(t,e){for(var i,n=t.length;--n>-1;)(i=t[n]).ondragstart=i.onselectstart=e?null:_,Z(i,"userSelect",e?"text":"none")},Et=function(){var t,e=g.createElement("div"),i=g.createElement("div"),n=i.style,r=g.body||x;return n.display="inline-block",n.position="relative",e.style.cssText=i.innerHTML="width:90px; height:40px; padding:10px; overflow:auto; visibility: hidden",e.appendChild(i),r.appendChild(e),t=i.offsetHeight+18>e.scrollHeight,r.removeChild(e),t}(),Bt=function(i,r){n.c.call(this,i),i=q(i),e||(e=p.com.greensock.plugins.ThrowPropsPlugin),this.vars=r=N(r||{}),this.target=i,this.x=this.y=this.rotation=0,this.dragResistance=parseFloat(r.dragResistance)||0,this.edgeResistance=isNaN(r.edgeResistance)?1:parseFloat(r.edgeResistance)||0,this.lockAxis=r.lockAxis,this.autoScroll=r.autoScroll||0,this.lockedAxis=null,this.allowEventDefault=!!r.allowEventDefault;var o,a,l,d,_,m,y,x,M,Y,I,z,V,$,K,Q,J,tt,et,st,at,ht,ct,ut,ft,dt,_t,mt,gt,yt,xt,Tt,wt=(r.type||(k?"top,left":"x,y")).toLowerCase(),Pt=-1!==wt.indexOf("x")||-1!==wt.indexOf("y"),Rt=-1!==wt.indexOf("rotation"),Nt=Rt?"rotation":Pt?"x":"left",Xt=Pt?"y":"top",Yt=-1!==wt.indexOf("x")||-1!==wt.indexOf("left")||"scroll"===wt,It=-1!==wt.indexOf("y")||-1!==wt.indexOf("top")||"scroll"===wt,zt=r.minimumMovement||2,jt=this,Wt=function(t){if("string"==typeof t&&(t=n.g.selector(t)),!t||t.nodeType)return[t];var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i}(r.trigger||r.handle||i),Ut={},Vt=0,Ht=!1,Gt=r.autoScrollMarginTop||40,qt=r.autoScrollMarginRight||40,$t=r.autoScrollMarginBottom||40,Zt=r.autoScrollMarginLeft||40,Kt=r.clickableTest||Dt,Qt=0,Jt=function(t){if(!(jt.isPressed&&t.which<2))return t.preventDefault(),t.stopPropagation(),!1;jt.endDrag()},te=function(t){if(jt.autoScroll&&jt.isDragging&&(Ht||tt)){var e,n,r,s,o,l,h,c,u=i,f=15*jt.autoScroll;for(Ht=!1,B.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=v.scrollTop?v.scrollTop:g.body.scrollTop,B.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=v.scrollLeft?v.scrollLeft:g.body.scrollLeft,s=jt.pointerX-B.scrollLeft,o=jt.pointerY-B.scrollTop;u&&!n;)e=(n=U(u.parentNode))?B:u.parentNode,r=n?{bottom:Math.max(v.clientHeight,window.innerHeight||0),right:Math.max(v.clientWidth,window.innerWidth||0),left:0,top:0}:e.getBoundingClientRect(),l=h=0,It&&((c=e._gsMaxScrollY-e.scrollTop)<0?h=c:o>r.bottom-$t&&c?(Ht=!0,h=Math.min(c,f*(1-Math.max(0,r.bottom-o)/$t)|0)):o<r.top+Gt&&e.scrollTop&&(Ht=!0,h=-Math.min(e.scrollTop,f*(1-Math.max(0,o-r.top)/Gt)|0)),h&&(e.scrollTop+=h)),Yt&&((c=e._gsMaxScrollX-e.scrollLeft)<0?l=c:s>r.right-qt&&c?(Ht=!0,l=Math.min(c,f*(1-Math.max(0,r.right-s)/qt)|0)):s<r.left+Zt&&e.scrollLeft&&(Ht=!0,l=-Math.min(e.scrollLeft,f*(1-Math.max(0,s-r.left)/Zt)|0)),l&&(e.scrollLeft+=l)),n&&(l||h)&&(window.scrollTo(e.scrollLeft,e.scrollTop),de(jt.pointerX+l,jt.pointerY+h)),u=e}if(tt){var p=jt.x,d=jt.y;p<1e-6&&p>-1e-6&&(p=0),d<1e-6&&d>-1e-6&&(d=0),Rt?(jt.deltaX=p-_t.data.rotation,_t.data.rotation=jt.rotation=p,_t.setRatio(1)):a?(It&&(jt.deltaY=d-a.top(),a.top(d)),Yt&&(jt.deltaX=p-a.left(),a.left(p))):Pt?(It&&(jt.deltaY=d-_t.data.y,_t.data.y=d),Yt&&(jt.deltaX=p-_t.data.x,_t.data.x=p),_t.setRatio(1)):(It&&(jt.deltaY=d-parseFloat(i.style.top||0),i.style.top=d+"px"),Yt&&(jt.deltaY=p-parseFloat(i.style.left||0),i.style.left=p+"px")),!x||t||yt||(yt=!0,nt(jt,"drag","onDrag"),yt=!1)}tt=!1},ee=function(t,e){var r,s=jt.x,o=jt.y;i._gsTransform||!Pt&&!Rt||n.g.set(i,{x:"+=0",overwrite:!1,data:"_draggable"}),Pt?(jt.y=i._gsTransform.y,jt.x=i._gsTransform.x):Rt?jt.x=jt.rotation=i._gsTransform.rotation:a?(jt.y=a.top(),jt.x=a.left()):(jt.y=parseInt(i.style.top,10)||0,jt.x=parseInt(i.style.left,10)||0),(st||at||ht)&&!e&&(jt.isDragging||jt.isThrowing)&&(ht&&(E.x=jt.x,E.y=jt.y,(r=ht(E)).x!==jt.x&&(jt.x=r.x,tt=!0),r.y!==jt.y&&(jt.y=r.y,tt=!0)),st&&(r=st(jt.x))!==jt.x&&(jt.x=r,Rt&&(jt.rotation=r),tt=!0),at&&((r=at(jt.y))!==jt.y&&(jt.y=r),tt=!0)),tt&&te(!0),t||(jt.deltaX=jt.x-s,jt.deltaY=jt.y-o,nt(jt,"throwupdate","onThrowUpdate"))},ie=function(){var t,e,n,s;y=!1,a?(a.calibrate(),jt.minX=Y=-a.maxScrollLeft(),jt.minY=z=-a.maxScrollTop(),jt.maxX=M=jt.maxY=I=0,y=!0):r.bounds&&(t=rt(r.bounds,i.parentNode),Rt?(jt.minX=Y=t.left,jt.maxX=M=t.left+t.width,jt.minY=z=jt.maxY=I=0):void 0!==r.bounds.maxX||void 0!==r.bounds.maxY?(t=r.bounds,jt.minX=Y=t.minX,jt.minY=z=t.minY,jt.maxX=M=t.maxX,jt.maxY=I=t.maxY):(e=rt(i,i.parentNode),jt.minX=Y=it(i,Nt)+t.left-e.left,jt.minY=z=it(i,Xt)+t.top-e.top,jt.maxX=M=Y+(t.width-e.width),jt.maxY=I=z+(t.height-e.height)),Y>M&&(jt.minX=M,jt.maxX=M=Y,Y=jt.minX),z>I&&(jt.minY=I,jt.maxY=I=z,z=jt.minY),Rt&&(jt.minRotation=Y,jt.maxRotation=M),y=!0),r.liveSnap&&(s=(n=!0===r.liveSnap?r.snap||{}:r.liveSnap)instanceof Array||"function"==typeof n,Rt?(st=ce(s?n:n.rotation,Y,M,1),at=null):n.points?ht=ue(s?n:n.points,Y,M,z,I,n.radius,a?-1:1):(Yt&&(st=ce(s?n:n.x||n.left||n.scrollLeft,Y,M,a?-1:1)),It&&(at=ce(s?n:n.y||n.top||n.scrollTop,z,I,a?-1:1))))},ne=function(){jt.isThrowing=!1,nt(jt,"throwcomplete","onThrowComplete")},re=function(){jt.isThrowing=!1},se=function(t,n){var s,o,l,h;t&&e?(!0===t&&(o=(s=r.snap||r.liveSnap||{})instanceof Array||"function"==typeof s,t={resistance:(r.throwResistance||r.resistance||1e3)/(Rt?10:1)},Rt?t.rotation=At(jt,o?s:s.rotation,M,Y,1,n):(Yt&&(t[Nt]=At(jt,o?s:s.points||s.x||s.left||s.scrollLeft,M,Y,a?-1:1,n||"x"===jt.lockedAxis)),It&&(t[Xt]=At(jt,o?s:s.points||s.y||s.top||s.scrollTop,I,z,a?-1:1,n||"y"===jt.lockedAxis)),(s.points||s instanceof Array&&"object"==typeof s[0])&&(t.linkedProps=Nt+","+Xt,t.radius=s.radius))),jt.isThrowing=!0,h=isNaN(r.overshootTolerance)?1===r.edgeResistance?0:1-jt.edgeResistance+.2:r.overshootTolerance,jt.tween=l=e.to(a||i,{throwProps:t,data:"_draggable",ease:r.ease||p.Power3.easeOut,onComplete:ne,onOverwrite:re,onUpdate:r.fastMode?nt:ee,onUpdateParams:r.fastMode?[jt,"onthrowupdate","onThrowUpdate"]:s&&s.radius?[!1,!0]:b},Math.max(r.minDuration||0,r.maxDuration||0)||2,isNaN(r.minDuration)?0===h||"object"==typeof t&&t.resistance>1e3?0:.5:r.minDuration,h),r.fastMode||(a&&(a._suspendTransforms=!0),l.render(l.duration(),!0,!0),ee(!0,!0),jt.endX=jt.x,jt.endY=jt.y,Rt&&(jt.endRotation=jt.x),l.play(0),ee(!0,!0),a&&(a._suspendTransforms=!1))):y&&jt.applyBounds()},oe=function(t){var e,n,r,s,o,a,h,c,u,f=ft||[1,0,0,1,0,0];ft=bt(i.parentNode,!0),t&&jt.isPressed&&f.join(",")!==ft.join(",")&&(e=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],u=l*(-n/(h=e*s-n*r))+d*(e/h)+-(e*a-n*o)/h,d=(c=l*(s/h)+d*(-r/h)+(r*a-s*o)/h)*ft[1]+u*ft[3]+ft[5],l=c*ft[0]+u*ft[2]+ft[4]),ft[1]||ft[2]||1!=ft[0]||1!=ft[3]||0!=ft[4]||0!=ft[5]||(ft=null)},ae=function(){var t=1-jt.edgeResistance;oe(!1),ft&&(l=jt.pointerX*ft[0]+jt.pointerY*ft[2]+ft[4],d=jt.pointerX*ft[1]+jt.pointerY*ft[3]+ft[5]),tt&&(de(jt.pointerX,jt.pointerY),te(!0)),a?(ie(),m=a.top(),_=a.left()):(le()?(ee(!0,!0),ie()):jt.applyBounds(),Rt?(J=jt.rotationOrigin=function(t,e,i,n,r){t=q(t);var s=bt(t,!1),o=e.x,a=e.y;return i&&(vt(t,e),o-=e.x,a-=e.y),(n=!0===n?e:n||{}).x=o*s[0]+a*s[2]+s[4],n.y=o*s[1]+a*s[3]+s[5],n}(i,{x:0,y:0}),ee(!0,!0),_=jt.x,m=jt.y=Math.atan2(J.y-jt.pointerY,jt.pointerX-J.x)*T):(i.parentNode&&i.parentNode.scrollTop||0,i.parentNode&&i.parentNode.scrollLeft||0,m=it(i,Xt),_=it(i,Nt))),y&&t&&(_>M?_=M+(_-M)/t:_<Y&&(_=Y-(Y-_)/t),Rt||(m>I?m=I+(m-I)/t:m<z&&(m=z-(z-m)/t))),jt.startX=_,jt.startY=m},le=function(){return jt.tween&&jt.tween.isActive()},he=function(){!S.parentNode||le()||jt.isDragging||S.parentNode.removeChild(S)},ce=function(t,e,i,n){return"function"==typeof t?function(r){var s=jt.isPressed?1-jt.edgeResistance:1;return t.call(jt,r>i?i+(r-i)*s:r<e?e+(r-e)*s:r)*n}:t instanceof Array?function(n){for(var r,s,o=t.length,a=0,l=w;--o>-1;)(s=(r=t[o])-n)<0&&(s=-s),s<l&&r>=e&&r<=i&&(a=o,l=s);return t[a]}:isNaN(t)?function(t){return t}:function(){return t*n}},ue=function(t,e,i,n,r,s,o){return s=s&&s<w?s*s:w,"function"==typeof t?function(a){var l,h,c,u=jt.isPressed?1-jt.edgeResistance:1,f=a.x,p=a.y;return a.x=f=f>i?i+(f-i)*u:f<e?e+(f-e)*u:f,a.y=p=p>r?r+(p-r)*u:p<n?n+(p-n)*u:p,(l=t.call(jt,a))!==a&&(a.x=l.x,a.y=l.y),1!==o&&(a.x*=o,a.y*=o),s<w&&(h=a.x-f)*h+(c=a.y-p)*c>s&&(a.x=f,a.y=p),a}:t instanceof Array?function(e){for(var i,n,r,o,a=t.length,l=0,h=w;--a>-1;)(o=(i=(r=t[a]).x-e.x)*i+(n=r.y-e.y)*n)<h&&(l=a,h=o);return h<=s?t[l]:e}:function(t){return t}},fe=function(t,e){var s;if(o&&!jt.isPressed&&t&&("mousedown"!==t.type&&"pointerdown"!==t.type||e||!(P()-Qt<30)||!St[jt.pointerEvent.type])){if(dt=le(),jt.pointerEvent=t,St[t.type]?(ut=-1!==t.type.indexOf("touch")?t.currentTarget||t.target:g,Ot(ut,"touchend",_e),Ot(ut,"touchmove",pe),Ot(ut,"touchcancel",_e),Ot(g,"touchstart",Mt)):(ut=null,Ot(g,"mousemove",pe)),gt=null,Ot(g,"mouseup",_e),t&&t.target&&Ot(t.target,"mouseup",_e),ct=Kt.call(jt,t.target)&&!r.dragClickables&&!e)return Ot(t.target,"change",_e),nt(jt,"pressInit","onPressInit"),nt(jt,"press","onPress"),void Lt(Wt,!0);if(mt=!(!ut||Yt===It||!1===jt.vars.allowNativeTouchScrolling||jt.vars.allowContextMenu&&t&&(t.ctrlKey||t.which>2))&&(Yt?"y":"x"),k?t=G(t,!0):mt||jt.allowEventDefault||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()),t.changedTouches?(t=K=t.changedTouches[0],Q=t.identifier):t.pointerId?Q=t.pointerId:K=Q=null,A++,function(t){O.push(t),1===O.length&&n.g.ticker.addEventListener("tick",X,this,!1,1)}(te),d=jt.pointerY=t.pageY,l=jt.pointerX=t.pageX,nt(jt,"pressInit","onPressInit"),(mt||jt.autoScroll)&&H(i.parentNode),!i.parentNode||!jt.autoScroll||a||Rt||!i.parentNode._gsMaxScrollX||S.parentNode||i.getBBox||(S.style.width=i.parentNode.scrollWidth+"px",i.parentNode.appendChild(S)),ae(),jt.tween&&jt.tween.kill(),jt.isThrowing=!1,n.g.killTweensOf(a||i,!0,Ut),a&&n.g.killTweensOf(i,!0,{scrollTo:1}),jt.tween=jt.lockedAxis=null,(r.zIndexBoost||!Rt&&!a&&!1!==r.zIndexBoost)&&(i.style.zIndex=Bt.zIndex++),jt.isPressed=!0,x=!(!r.onDrag&&!jt._listeners.drag),!Rt)for(s=Wt.length;--s>-1;)Z(Wt[s],"cursor",r.cursor||"move");nt(jt,"press","onPress")}},pe=function(e){var i,n,r,s,a,h,c=e;if(o&&!t&&jt.isPressed&&e){if(jt.pointerEvent=e,i=e.changedTouches){if((e=i[0])!==K&&e.identifier!==Q){for(s=i.length;--s>-1&&(e=i[s]).identifier!==Q;);if(s<0)return}}else if(e.pointerId&&Q&&e.pointerId!==Q)return;if(k)e=G(e,!0);else{if(ut&&mt&&!gt&&(n=e.pageX,r=e.pageY,ft&&(s=n*ft[0]+r*ft[2]+ft[4],r=n*ft[1]+r*ft[3]+ft[5],n=s),((a=Math.abs(n-l))!==(h=Math.abs(r-d))&&(a>zt||h>zt)||D&&mt===gt)&&(gt=a>h&&Yt?"x":"y",!1!==jt.vars.lockAxisOnTouchScroll&&(jt.lockedAxis="x"===gt?"y":"x","function"==typeof jt.vars.onLockAxis&&jt.vars.onLockAxis.call(jt,c)),D&&mt===gt)))return void _e(c);jt.allowEventDefault||mt&&(!gt||mt===gt)||!1===c.cancelable||(c.preventDefault(),c.preventManipulation&&c.preventManipulation())}jt.autoScroll&&(Ht=!0),de(e.pageX,e.pageY)}},de=function(t,e){var i,n,r,s,o,a,h=1-jt.dragResistance,c=1-jt.edgeResistance;jt.pointerX=t,jt.pointerY=e,Rt?(s=Math.atan2(J.y-e,t-J.x)*T,(o=jt.y-s)>180?(m-=360,jt.y=s):o<-180&&(m+=360,jt.y=s),jt.x!==_||Math.abs(m-s)>zt?(jt.y=s,r=_+(m-s)*h):r=_):(ft&&(a=t*ft[0]+e*ft[2]+ft[4],e=t*ft[1]+e*ft[3]+ft[5],t=a),i=t-l,(n=e-d)<zt&&n>-zt&&(n=0),i<zt&&i>-zt&&(i=0),(jt.lockAxis||jt.lockedAxis)&&(i||n)&&((a=jt.lockedAxis)||(jt.lockedAxis=a=Yt&&Math.abs(i)>Math.abs(n)?"y":It?"x":null,a&&"function"==typeof jt.vars.onLockAxis&&jt.vars.onLockAxis.call(jt,jt.pointerEvent)),"y"===a?n=0:"x"===a&&(i=0)),r=_+i*h,s=m+n*h),(st||at||ht)&&(jt.x!==r||jt.y!==s&&!Rt)?(ht&&(E.x=r,E.y=s,r=(a=ht(E)).x,s=a.y),st&&(r=st(r)),at&&(s=at(s))):y&&(r>M?r=M+(r-M)*c:r<Y&&(r=Y+(r-Y)*c),Rt||(s>I?s=I+(s-I)*c:s<z&&(s=z+(s-z)*c))),Rt||ft||(r=Math.round(r),s=Math.round(s)),(jt.x!==r||jt.y!==s&&!Rt)&&(Rt?(jt.endRotation=jt.x=jt.endX=r,tt=!0):(It&&(jt.y=jt.endY=s,tt=!0),Yt&&(jt.x=jt.endX=r,tt=!0)),!jt.isDragging&&jt.isPressed&&(jt.isDragging=!0,nt(jt,"dragstart","onDragStart")))},_e=function(t,e){if(o&&jt.isPressed&&(!t||null==Q||e||!(t.pointerId&&t.pointerId!==Q||t.changedTouches&&!function(t,e){for(var i=t.length;--i>-1;)if(t[i].identifier===e)return!0;return!1}(t.changedTouches,Q)))){jt.isPressed=!1;var s,a,l,h,c,u=t,f=jt.isDragging,p=jt.vars.allowContextMenu&&t&&(t.ctrlKey||t.which>2),d=n.g.delayedCall(.001,he);if(ut?(Ct(ut,"touchend",_e),Ct(ut,"touchmove",pe),Ct(ut,"touchcancel",_e),Ct(g,"touchstart",Mt)):Ct(g,"mousemove",pe),Ct(g,"mouseup",_e),t&&t.target&&Ct(t.target,"mouseup",_e),tt=!1,ct&&!p)return t&&(Ct(t.target,"change",_e),jt.pointerEvent=u),Lt(Wt,!1),nt(jt,"release","onRelease"),nt(jt,"click","onClick"),void(ct=!1);if(F(te),!Rt)for(a=Wt.length;--a>-1;)Z(Wt[a],"cursor",r.cursor||"move");if(f&&(Vt=L=P(),jt.isDragging=!1),A--,t){if(k&&(t=G(t,!1)),(s=t.changedTouches)&&(t=s[0])!==K&&t.identifier!==Q){for(a=s.length;--a>-1&&(t=s[a]).identifier!==Q;);if(a<0)return}jt.pointerEvent=u,jt.pointerX=t.pageX,jt.pointerY=t.pageY}return p&&u?(u.preventDefault(),u.preventManipulation&&u.preventManipulation(),nt(jt,"release","onRelease")):u&&!f?(dt&&(r.snap||r.bounds)&&se(r.throwProps),nt(jt,"release","onRelease"),D&&"touchmove"===u.type||-1!==u.type.indexOf("cancel")||(nt(jt,"click","onClick"),P()-Qt<300&&nt(jt,"doubleclick","onDoubleClick"),h=u.target||u.srcElement||i,Qt=P(),c=function(){Qt!==xt&&jt.enabled()&&!jt.isPressed&&(h.click?h.click():g.createEvent&&((l=g.createEvent("MouseEvents")).initMouseEvent("click",!0,!0,window,1,jt.pointerEvent.screenX,jt.pointerEvent.screenY,jt.pointerX,jt.pointerY,!1,!1,!1,!1,0,null),h.dispatchEvent(l)))},D||u.defaultPrevented||n.g.delayedCall(1e-5,c))):(se(r.throwProps),k||jt.allowEventDefault||!u||!r.dragClickables&&Kt.call(jt,u.target)||!f||mt&&(!gt||mt!==gt)||!1===u.cancelable||(u.preventDefault(),u.preventManipulation&&u.preventManipulation()),nt(jt,"release","onRelease")),le()&&d.duration(jt.tween.duration()),f&&nt(jt,"dragend","onDragEnd"),!0}},me=function(t){if(t&&jt.isDragging&&!a){var e=t.target||t.srcElement||i.parentNode,n=e.scrollLeft-e._gsScrollX,r=e.scrollTop-e._gsScrollY;(n||r)&&(ft?(l-=n*ft[0]+r*ft[2],d-=r*ft[3]+n*ft[1]):(l-=n,d-=r),e._gsScrollX+=n,e._gsScrollY+=r,de(jt.pointerX,jt.pointerY))}},ge=function(t){var e=P(),i=e-Qt<40,n=e-Vt<40,r=i&&xt===Qt,s=!!t.preventDefault,o=jt.pointerEvent&&jt.pointerEvent.defaultPrevented,a=i&&Tt===Qt,l=t.isTrusted||null==t.isTrusted&&i&&r;if(s&&(r||n&&!1!==jt.vars.suppressClickOnDrag)&&t.stopImmediatePropagation(),i&&(!jt.pointerEvent||!jt.pointerEvent.defaultPrevented)&&(!r||l!==a))return l&&r&&(Tt=Qt),void(xt=Qt);(jt.isPressed||n||i)&&(s?l&&t.detail&&i&&!o||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()):t.returnValue=!1)},ve=function(t){return ft?{x:t.x*ft[0]+t.y*ft[2]+ft[4],y:t.x*ft[1]+t.y*ft[3]+ft[5]}:{x:t.x,y:t.y}};(et=Bt.get(this.target))&&et.kill(),this.startDrag=function(t,e){var n,r,s,o;fe(t||jt.pointerEvent,!0),e&&!jt.hitTest(t||jt.pointerEvent)&&(n=Ft(t||jt.pointerEvent),r=Ft(i),s=ve({x:n.left+n.width/2,y:n.top+n.height/2}),o=ve({x:r.left+r.width/2,y:r.top+r.height/2}),l-=s.x-o.x,d-=s.y-o.y),jt.isDragging||(jt.isDragging=!0,nt(jt,"dragstart","onDragStart"))},this.drag=pe,this.endDrag=function(t){_e(t||jt.pointerEvent,!0)},this.timeSinceDrag=function(){return jt.isDragging?0:(P()-Vt)/1e3},this.timeSinceClick=function(){return(P()-Qt)/1e3},this.hitTest=function(t,e){return Bt.hitTest(jt.target,t,e)},this.getDirection=function(t,i){var n,r,s,o,a,l,h="velocity"===t&&e?t:"object"!=typeof t||Rt?"start":"element";return"element"===h&&(a=Ft(jt.target),l=Ft(t)),n="start"===h?jt.x-_:"velocity"===h?e.getVelocity(this.target,Nt):a.left+a.width/2-(l.left+l.width/2),Rt?n<0?"counter-clockwise":"clockwise":(i=i||2,r="start"===h?jt.y-m:"velocity"===h?e.getVelocity(this.target,Xt):a.top+a.height/2-(l.top+l.height/2),o=(s=Math.abs(n/r))<1/i?"":n<0?"left":"right",s<i&&(""!==o&&(o+="-"),o+=r<0?"up":"down"),o)},this.applyBounds=function(t){var e,n,s,o,a,l;if(t&&r.bounds!==t)return r.bounds=t,jt.update(!0);if(ee(!0),ie(),y){if(e=jt.x,n=jt.y,e>M?e=M:e<Y&&(e=Y),n>I?n=I:n<z&&(n=z),(jt.x!==e||jt.y!==n)&&(s=!0,jt.x=jt.endX=e,Rt?jt.endRotation=e:jt.y=jt.endY=n,tt=!0,te(!0),jt.autoScroll&&!jt.isDragging))for(H(i.parentNode),o=i,B.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=v.scrollTop?v.scrollTop:g.body.scrollTop,B.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=v.scrollLeft?v.scrollLeft:g.body.scrollLeft;o&&!l;)a=(l=U(o.parentNode))?B:o.parentNode,It&&a.scrollTop>a._gsMaxScrollY&&(a.scrollTop=a._gsMaxScrollY),Yt&&a.scrollLeft>a._gsMaxScrollX&&(a.scrollLeft=a._gsMaxScrollX),o=a;jt.isThrowing&&(s||jt.endX>M||jt.endX<Y||jt.endY>I||jt.endY<z)&&se(r.throwProps,s)}return jt},this.update=function(t,e,n){var r=jt.x,s=jt.y;return oe(!e),t?jt.applyBounds():(tt&&n&&te(!0),ee(!0)),e&&(de(jt.pointerX,jt.pointerY),tt&&te(!0)),jt.isPressed&&!e&&(Yt&&Math.abs(r-jt.x)>.01||It&&Math.abs(s-jt.y)>.01&&!Rt)&&ae(),jt.autoScroll&&(H(i.parentNode),Ht=jt.isDragging,te(!0)),jt.autoScroll&&(W(i,me),j(i,me)),jt},this.enable=function(t){var l,h,c;if("soft"!==t){for(h=Wt.length;--h>-1;)c=Wt[h],Ot(c,"mousedown",fe),Ot(c,"touchstart",fe),Ot(c,"click",ge,!0),Rt||Z(c,"cursor",r.cursor||"move"),Z(c,"touchCallout","none"),Z(c,"touchAction",Yt===It?"none":Yt?"pan-y":"pan-x"),pt(c)&&Z(c.ownerSVGElement||c,"touchAction",Yt===It?"none":Yt?"pan-y":"pan-x"),this.vars.allowContextMenu||Ot(c,"contextmenu",Jt);Lt(Wt,!1)}return j(i,me),o=!0,e&&"soft"!==t&&e.track(a||i,Pt?"x,y":Rt?"rotation":"top,left"),a&&a.enable(),i._gsDragID=l="d"+R++,C[l]=this,a&&(a.element._gsDragID=l),n.g.set(i,{x:"+=0",overwrite:!1,data:"_draggable"}),_t={t:i,data:k?$:i._gsTransform,tween:{},setRatio:k?function(){n.g.set(i,V)}:s._internals.setTransformRatio||s._internals.set3DTransformRatio},ae(),jt.update(!0),jt},this.disable=function(t){var n,r,s=jt.isDragging;if(!Rt)for(n=Wt.length;--n>-1;)Z(Wt[n],"cursor",null);if("soft"!==t){for(n=Wt.length;--n>-1;)r=Wt[n],Z(r,"touchCallout",null),Z(r,"touchAction",null),Ct(r,"mousedown",fe),Ct(r,"touchstart",fe),Ct(r,"click",ge),Ct(r,"contextmenu",Jt);Lt(Wt,!0),ut&&(Ct(ut,"touchcancel",_e),Ct(ut,"touchend",_e),Ct(ut,"touchmove",pe)),Ct(g,"mouseup",_e),Ct(g,"mousemove",pe)}return W(i,me),o=!1,e&&"soft"!==t&&e.untrack(a||i,Pt?"x,y":Rt?"rotation":"top,left"),a&&a.disable(),F(te),jt.isDragging=jt.isPressed=ct=!1,s&&nt(jt,"dragend","onDragEnd"),jt},this.enabled=function(t,e){return arguments.length?t?jt.enable(e):jt.disable(e):o},this.kill=function(){return jt.isThrowing=!1,n.g.killTweensOf(a||i,!0,Ut),jt.disable(),n.g.set(Wt,{clearProps:"userSelect"}),delete C[i._gsDragID],jt},-1!==wt.indexOf("scroll")&&(a=this.scrollProxy=new function(t,e){t=q(t),e=e||{};var i,r,s,o,a,l,h=g.createElement("div"),c=h.style,u=t.firstChild,f=0,p=0,d=t.scrollTop,_=t.scrollLeft,m=t.scrollWidth,v=t.scrollHeight,y=0,x=0,b=0;ot&&!1!==e.force3D?(a="translate3d(",l="px,0px)"):lt&&(a="translate(",l="px)"),this.scrollTop=function(t,e){if(!arguments.length)return-this.top();this.top(-t,e)},this.scrollLeft=function(t,e){if(!arguments.length)return-this.left();this.left(-t,e)},this.left=function(i,r){if(!arguments.length)return-(t.scrollLeft+p);var s=t.scrollLeft-_,o=p;if((s>2||s<-2)&&!r)return _=t.scrollLeft,n.g.killTweensOf(this,!0,{left:1,scrollLeft:1}),this.left(-_),void(e.onKill&&e.onKill());(i=-i)<0?(p=i-.5|0,i=0):i>x?(p=i-x|0,i=x):p=0,(p||o)&&(a?this._suspendTransforms||(c[lt]=a+-p+"px,"+-f+l):c.left=-p+"px",p+y>=0&&(c.paddingRight=p+y+"px")),t.scrollLeft=0|i,_=t.scrollLeft},this.top=function(i,r){if(!arguments.length)return-(t.scrollTop+f);var s=t.scrollTop-d,o=f;if((s>2||s<-2)&&!r)return d=t.scrollTop,n.g.killTweensOf(this,!0,{top:1,scrollTop:1}),this.top(-d),void(e.onKill&&e.onKill());(i=-i)<0?(f=i-.5|0,i=0):i>b?(f=i-b|0,i=b):f=0,(f||o)&&(a?this._suspendTransforms||(c[lt]=a+-p+"px,"+-f+l):c.top=-f+"px"),t.scrollTop=0|i,d=t.scrollTop},this.maxScrollTop=function(){return b},this.maxScrollLeft=function(){return x},this.disable=function(){for(u=h.firstChild;u;)o=u.nextSibling,t.appendChild(u),u=o;t===h.parentNode&&t.removeChild(h)},this.enable=function(){if((u=t.firstChild)!==h){for(;u;)o=u.nextSibling,h.appendChild(u),u=o;t.appendChild(h),this.calibrate()}},this.calibrate=function(e){var n,o,a=t.clientWidth===i;d=t.scrollTop,_=t.scrollLeft,a&&t.clientHeight===r&&h.offsetHeight===s&&m===t.scrollWidth&&v===t.scrollHeight&&!e||((f||p)&&(n=this.left(),o=this.top(),this.left(-t.scrollLeft),this.top(-t.scrollTop)),a&&!e||(c.display="block",c.width="auto",c.paddingRight="0px",(y=Math.max(0,t.scrollWidth-t.clientWidth))&&(y+=it(t,"paddingLeft")+(Et?it(t,"paddingRight"):0))),c.display="inline-block",c.position="relative",c.overflow="visible",c.verticalAlign="top",c.width="100%",c.paddingRight=y+"px",Et&&(c.paddingBottom=it(t,"paddingBottom",!0)),k&&(c.zoom="1"),i=t.clientWidth,r=t.clientHeight,m=t.scrollWidth,v=t.scrollHeight,x=t.scrollWidth-i,b=t.scrollHeight-r,s=h.offsetHeight,c.display="block",(n||o)&&(this.left(n),this.top(o)))},this.content=h,this.element=t,this._suspendTransforms=!1,this.enable()}(i,function(t,e){var i;for(i in e)void 0===t[i]&&(t[i]=e[i]);return t}({onKill:function(){jt.isPressed&&_e(null)}},r)),i.style.overflowY=It&&!kt?"auto":"hidden",i.style.overflowX=Yt&&!kt?"auto":"hidden",i=a.content),!1!==r.force3D&&n.g.set(i,{force3D:!0}),Rt?Ut.rotation=1:(Yt&&(Ut[Nt]=1),It&&(Ut[Xt]=1)),Rt?($=(V=f).css,V.overwrite=!1):Pt&&($=(V=Yt&&It?h:Yt?c:u).css,V.overwrite=!1),this.enable()},Nt=Bt.prototype=new n.c;Nt.constructor=Bt,Nt.pointerX=Nt.pointerY=Nt.startX=Nt.startY=Nt.deltaX=Nt.deltaY=0,Nt.isDragging=Nt.isPressed=!1,Bt.version="0.16.5",Bt.zIndex=1e3,Ot(g,"touchcancel",function(){}),Ot(g,"contextmenu",function(t){var e;for(e in C)C[e].isPressed&&C[e].endDrag()}),Bt.create=function(t,e){"string"==typeof t&&(t=n.g.selector(t));for(var i=t&&0!==t.length?Pt(t)?function(t){var e,i,n,r=[],s=t.length;for(e=0;e<s;e++)if(i=t[e],Pt(i))for(n=i.length,n=0;n<i.length;n++)r.push(i[n]);else i&&0!==i.length&&r.push(i);return r}(t):[t]:[],r=i.length;--r>-1;)i[r]=new Bt(i[r],e);return i},Bt.get=function(t){return C[(q(t)||{})._gsDragID]},Bt.timeSinceDrag=function(){return(P()-L)/1e3};var Xt={},Ft=function(t,e){if(t===window)return Xt.left=Xt.top=0,Xt.width=Xt.right=v.clientWidth||t.innerWidth||g.body.clientWidth||0,Xt.height=Xt.bottom=(t.innerHeight||0)-20<v.clientHeight?v.clientHeight:t.innerHeight||g.body.clientHeight||0,Xt;var i=t.pageX!==e?{left:t.pageX-z(),top:t.pageY-I(),right:t.pageX-z()+1,bottom:t.pageY-I()+1}:t.nodeType||t.left===e||t.top===e?k?function(t){var e,i,n=0,r=0;for(e=(t=q(t)).offsetWidth,i=t.offsetHeight;t;)n+=t.offsetTop,r+=t.offsetLeft,t=t.offsetParent;return{top:n,left:r,width:e,height:i}}(t):q(t).getBoundingClientRect():t;return i.right===e&&i.width!==e?(i.right=i.left+i.width,i.bottom=i.top+i.height):i.width===e&&(i={width:i.right-i.left,height:i.bottom-i.top,right:i.right,left:i.left,bottom:i.bottom,top:i.top}),i};return Bt.hitTest=function(t,e,i){if(t===e)return!1;var n,r,s,o=Ft(t),a=Ft(e),l=a.left>o.right||a.right<o.left||a.top>o.bottom||a.bottom<o.top;return l||!i?!l:(s=-1!==(i+"").indexOf("%"),i=parseFloat(i)||0,(n={left:Math.max(o.left,a.left),top:Math.max(o.top,a.top)}).width=Math.min(o.right,a.right)-n.left,n.height=Math.min(o.bottom,a.bottom)-n.top,!(n.width<0||n.height<0)&&(s?(i*=.01,(r=n.width*n.height)>=o.width*o.height*i||r>=a.width*a.height*i):n.width>i&&n.height>i))},S.style.cssText="visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;",Bt},!0);var Y=n.h.Draggable;function I(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var i=[],n=!0,r=!1,s=void 0;try{for(var o,a=t[Symbol.iterator]();!(n=(o=a.next()).done)&&(i.push(o.value),!e||i.length!==e);n=!0);}catch(t){r=!0,s=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw s}}return i}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function z(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",e=t.match(/^[a-z0-9]+/i),i=t.match(/#([a-z]+[a-z0-9-]*)/gi),n=t.match(/\.([a-z]+[a-z0-9-]*)/gi),r=t.match(/\[([a-z][a-z-]+)(=['|"]?([^\]]*)['|"]?)?\]/gi),s=e?e[0]:"div";if(i&&i.length>1)throw function(t){this.message=t,this.name="CreateElementException"}("only 1 ID is allowed");var o=document.createElement(s);if(i&&(o.id=i[0].replace("#","")),n){var a=n.join(" ").replace(/\./g,"");o.setAttribute("class",a)}r&&r.forEach(function(t){var e=I((t=t.slice(0,-1).slice(1)).split("="),2),i=e[0],n=e[1];n&&(n=n.replace(/^['"](.*)['"]$/,"$1")),o.setAttribute(i,n||"")});for(var l=arguments.length,h=new Array(l>1?l-1:0),c=1;c<l;c++)h[c-1]=arguments[c];return h.forEach(function(t){"string"==typeof t||"number"==typeof t?o.appendChild(document.createTextNode(t)):t.nodeType===document.ELEMENT_NODE&&o.appendChild(t)}),o}function j(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var W=function(){function t(e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.gameBox=null,this.gameElement=null,this.box=e,this.element=i}return function(t,e,i){e&&j(t.prototype,e),i&&j(t,i)}(t,[{key:"box",set:function(t){if(t instanceof HTMLElement==!1)return null;this.gameBox=t},get:function(){return this.gameBox||null}},{key:"element",set:function(t){if(t instanceof HTMLElement==!1)return null;this.gameElement=t},get:function(){return this.gameElement||null}}]),t}();function U(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var V=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.Control=e,this.myDrag=null}return function(t,e,i){e&&U(t.prototype,e),i&&U(t,i)}(t,[{key:"addDragEvent",value:function(){var t={minX:0,maxX:this.Control.box.clientWidth-this.Control.element.clientWidth};this.drag=Y.create(this.Control.element,{type:"x",throwProps:!0,bounds:t}),Y.get(this.Control.element).enable()}},{key:"removeDragEvent",value:function(){Y.get(this.Control.element).disable()}},{key:"setLocation",value:function(){var t={x:this.Control.box.clientWidth/2-this.Control.element.clientWidth/2,y:this.Control.box.offsetHeight-this.Control.element.offsetHeight-40};TweenMax.set(this.Control.element,t)}},{key:"drag",set:function(t){this.myDrag=t},get:function(){return this.myDrag[0]}}]),t}();function H(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var G=function(){function t(e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.ControlElementDTO=new W,this.ControlElementDTO.box=e,this.ControlElementDTO.element=i,this.myMove=new V(this.ControlElementDTO)}return function(t,e,i){e&&H(t.prototype,e),i&&H(t,i)}(t,[{key:"start",value:function(){this.myMove.setLocation(),this.myMove.addDragEvent()}},{key:"stop",value:function(){this.myMove.removeDragEvent()}}]),t}(),q=(HTMLElement.prototype.empty=function(){for(;this.hasChildNodes();)this.removeChild(this.lastChild)},{container:"#gameBox",elements:{basket:"#catcher",gift:".gift",scoreBoard:"#score-board"},bombKey:"bomb",hitKey:"hit",total:2e4,billList:[1e3,800,600,400,200],gameTime:30,endCallback:function(t){}}),$=function(t,e){return Math.round(Math.random()*(e-t)+t)},Z=function(t,e){return Math.random()*(e-t)+t},K=function(t){for(var e=t.length-1;e>0;e--){var i=Math.floor(Math.random()*(e+1)),n=[t[i],t[e]];t[e]=n[0],t[i]=n[1]}return t};function Q(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function J(t){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var tt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var i=this;this.setConfig(e),this.pointList=[],this.score=0,this.bombPercentage=.1,this.hitAnimateTime=3,this.moveWidth=40,this.gameStatus="stop",this.gammaRange=5,this.moveXWidth=80,this.moveXMobile=20,this.startCallbackLock=!0,this.endCallbackLock=!0,this.addBasket(),this.eventControl=new G(this.elements.get("container"),this.elements.get("basket")),this.startBtn=document.querySelector("#startBtn"),this.pauseBtn=document.querySelector("#pauseBtn"),this.stopBtn=document.querySelector("#stopBtn"),this.resetBtn=document.querySelector("#resetBtn"),this.timeLine=new p({delay:.5,onStart:function(){i.timeLineOnStart()},onComplete:function(){i.timeLineOnComplete()}}),this.initial()}return function(t,e,i){e&&Q(t.prototype,e),i&&Q(t,i)}(t,[{key:"setConfig",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.elements=new Map,Object.assign(q,t),this.configs=null,this.configs=function t(e){for(var i=new Map,n=Object.keys(e),r=0;r<n.length;r++){var s=n[r];"object"===J(e[s])?i.set(s,t(e[s])):i.set(s,e[s])}return i}(q);var e=this.elements;this.configs.get("elements").forEach(function(t,i){e.set(i,z(t))}),this.gameBoxSelector(this.configs.get("container"))}},{key:"gameBoxSelector",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=document.querySelector(t);null===e&&(e=z(t),document.body.append(e)),this.elements.set("container",e)}},{key:"setPoints",value:function(t,e){var i=[],n=0;do{(n=e.get($(0,e.size-1)+"")||0)>e[0]&&e.shift(),n<=t&&(t-=n,i.push(n))}while(t>0);return i}},{key:"bombList",value:function(t){for(var e=Math.floor(t.length*this.bombPercentage),i=[],n=0;n<e;n++)i.push(this.configs.get("bombKey"));return i}},{key:"addBasket",value:function(){var t=this.elements.get("container"),e=this.elements.get("basket");t.append(e);document.querySelector(this.configs.get("container")).querySelector(this.configs.get("basket"));F.set(e,{x:t.offsetWidth/2-e.offsetWidth/2,y:t.offsetHeight-e.offsetHeight-40})}},{key:"addScoreBoard",value:function(){var t=this.elements.get("container"),e=this.elements.get("scoreBoard");e.textContent=0,t.append(e),F.set(e,{x:t.offsetWidth-e.offsetWidth,y:t.offsetHeight-2*e.offsetHeight-10})}},{key:"addGift",value:function(t,e){var i=this,n=this.elements.get("container"),r=this.elements.get("gift").cloneNode(),s=this.configs.get("bombKey"),o=this.configs.get("elements").get("gift"),a=this.configs.get("gameTime"),l=n.querySelectorAll(o).length||0,h=(a-3)/this.pointList.length*(l+1),c=n.offsetHeight-this.moveWidth,u=Z(this.moveWidth,n.offsetWidth-this.moveWidth),f=Z(1,3);return r.dataset.point=t,r.dataset.index=e,t===s&&r.classList.add(s),this.timeLine.fromTo(r,f,{x:u,y:0},{y:"+="+c,ease:Power0.easeNone,onComplete:function(){r.remove()},onUpdate:function(){i.checkHit(r)}},h),n.append(r),r}},{key:"checkHit",value:function(t){var e=this.configs.get("bombKey"),i=this.configs.get("hitKey"),n=this.elements.get("scoreBoard");if(Y.hitTest(catcher,t))if(t.className.indexOf(e)>=0)Y.get(catcher).disable(),this.timeLine.paused(!0),this.endToSendPoint();else if(-1===t.className.indexOf(i)){t.classList.add(i),this.score+=parseInt(t.dataset.point,10),n.textContent=this.score.toString(),F.killTweensOf(t);var r=this.elements.get("boom").cloneNode();F.fromTo(r,3,{x:t._gsTransform.x-t.offsetWidth/2,y:t._gsTransform.y-t.offsetWidth/2},{autoAlpha:0}),gameBox.append(r),t.remove()}}},{key:"keyDownEvent",value:function(t){t.keyCode&&39===t.which&&this.moveCatcherBox(this.moveXWidth),t.keyCode&&37===t.which&&this.moveCatcherBox(-this.moveXWidth)}},{key:"moveCatcherBox",value:function(t){if(0===t)return!1;var e=this.elements.get("container"),i=this.elements.get("basket"),n=e.clientWidth-i.clientWidth,r=0;t>0&&(r=i._gsTransform.x+t>n?n:i._gsTransform.x+t),t<0&&(r=i._gsTransform.x+t<0?0:i._gsTransform.x+t),F.to(i,.3,{x:r})}},{key:"setStartEvent",value:function(t){var e=this;t.addEventListener("click",function(){e.startEvent()}),t.addEventListener("touchend",function(){e.startEvent()})}},{key:"setPauseEvent",value:function(t){var e=this;t.addEventListener("click",function(){e.pause()}),t.addEventListener("touchend",function(){e.pause()})}},{key:"setPauseEvent",value:function(t){var e=this;t.addEventListener("click",function(){e.pause()}),t.addEventListener("touchend",function(){e.pause()})}},{key:"setStopEvent",value:function(t){var e=this;t.addEventListener("click",function(){e.stop()}),t.addEventListener("touchend",function(){e.stop()})}},{key:"startEvent",value:function(){var t=this;t.startBtn.disabled=!0,t.pauseBtn.disabled=!1,this.timeLine._time>=this.timeLine.endTime()||0===this.timeLine._time?this.cleanItems(function(){t.start()}):this.timeLine.play()}},{key:"start",value:function(){var t=this;this.clear(),this.timeLine.clear();var e=this.elements.get("container"),i=this.elements.get("basket");e.append(i),this.eventControl.start(),this.addScoreBoard();var n=K(this.setPoints(this.configs.get("total"),this.configs.get("billList"))),r=this.bombList(n),s=n.concat(r);n.length>10?this.pointList=s.slice(0,10).concat(K(s.slice(10))):this.pointList=s.concat(K(s)),this.pointList.forEach(function(e,i){return t.addGift(e,i)})}},{key:"pause",value:function(){this.timeLine.paused(!0),this.startBtn.disabled=!1,this.pauseBtn.disabled=!0}},{key:"stop",value:function(){}},{key:"reset",value:function(){}},{key:"empty",value:function(t){for(;t.hasChildNodes();)t.removeChild(t.lastChild)}},{key:"clear",value:function(){this.elements.get("container").empty()}},{key:"cleanItems",value:function(t){var e=this.elements.get("container");e.querySelectorAll(".gift").forEach(function(t,i){e.removeChild(t)}),e.querySelectorAll(".BoomAnimate").forEach(function(t,i){e.removeChild(t)}),"function"==typeof t&&t()}},{key:"timeLineOnStart",value:function(){this.startCallbackLock||(this.startBtn.disabled=!0,this.pauseBtn.disabled=!1,this.startCallbackLock=!0),this.startCallbackLock=!1}},{key:"timeLineOnComplete",value:function(){this.endCallbackLock||(this.cleanItems(),this.eventControl.stop(),this.endToSendPoint(),this.endCallbackLock=!0),this.endCallbackLock=!1}},{key:"endToSendPoint",value:function(){this.startBtn.disabled=!0,this.pauseBtn.disabled=!0,this.configs.get("endCallback")(this.score)}},{key:"initial",value:function(){this.setStartEvent(this.startBtn),this.setPauseEvent(this.pauseBtn),this.startBtn.disabled=!1}}]),t}();document.addEventListener("DOMContentLoaded",function(){var t={container:"#gameBox",elements:{gift:".gift",boom:".BoomAnimate",basket:"#catcher",scoreBoard:"#score-board"},gameTime:30,total:2e4,billList:[1e3,800,600,400,200],endCallback:function(t){console.log("遊戲結束 callback"),console.log(t)}},e={easy:t,normal:t,hard:t};e.easy.gameTime=60,e.hard.gameTime=10;new tt(e.normal)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,