!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=10)}([function(t,e,i){"use strict";(function(t,n){i.d(e,"l",function(){return r}),i.d(e,"m",function(){return s}),i.d(e,"j",function(){return a}),i.d(e,"a",function(){return l}),i.d(e,"b",function(){return h}),i.d(e,"d",function(){return u}),i.d(e,"e",function(){return c}),i.d(e,"f",function(){return f}),i.d(e,"g",function(){return p}),i.d(e,"h",function(){return d}),i.d(e,"i",function(){return _}),i.d(e,"k",function(){return m}),i.d(e,"c",function(){return g});
/*!
 * VERSION: 2.0.1
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
const r="undefined"!=typeof window?window:void 0!==t&&t.exports&&void 0!==n?n:{},s=function(t,e){var i={},n=t.document,r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(r.TweenLite)return r.TweenLite;var s,o,a,l,h,u=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=u("com.greensock"),f=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},p=function(){},d=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),_={},m=function(t,e,n,s){this.sc=_[t]?_[t].sc:[],_[t]=this,this.gsClass=null,this.func=n;var o=[];this.check=function(a){for(var l,h,c,f,p=e.length,d=p;--p>-1;)(l=_[e[p]]||new m(e[p],[])).gsClass?(o[p]=l.gsClass,d--):a&&l.sc.push(this);if(0===d&&n)for(c=(h=("com.greensock."+t).split(".")).pop(),f=u(h.join("."))[c]=this.gsClass=n.apply(n,o),s&&(r[c]=i[c]=f),p=0;p<this.sc.length;p++)this.sc[p].check()},this.check(!0)},g=t._gsDefine=function(t,e,i,n){return new m(t,e,i,n)},v=c._class=function(t,e,i){return e=e||function(){},g(t,[],function(){return e},i),e};g.globals=r;var y=[0,0,1,1],x=v("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?y.concat(e):y},!0),b=x.map={},T=x.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(s=l[h],r=n?v("easing."+s,null,!0):c.easing[s]||{},o=u.length;--o>-1;)a=u[o],b[s+"."+a]=b[a+s]=r[a]=t.getRatio?t:t[a]||new t};for((a=x.prototype)._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},o=(s=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--o>-1;)a=s[o]+",Power"+o,T(new x(null,null,1,o),a,"easeOut",!0),T(new x(null,null,2,o),a,"easeIn"+(0===o?",easeNone":"")),T(new x(null,null,3,o),a,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var w=v("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(a=w.prototype).addEventListener=function(t,e,i,n,r){r=r||0;var s,o,a=this._listeners[t],u=0;for(this!==l||h||l.wake(),null==a&&(this._listeners[t]=a=[]),o=a.length;--o>-1;)(s=a[o]).c===e&&s.s===i?a.splice(o,1):0===u&&s.pr<r&&(u=o+1);a.splice(u,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for((e=r.length)>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)(n=r[e])&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var P=t.requestAnimationFrame,S=t.cancelAnimationFrame,O=Date.now||function(){return(new Date).getTime()},k=O();for(o=(s=["ms","moz","webkit","o"]).length;--o>-1&&!P;)P=t[s[o]+"RequestAnimationFrame"],S=t[s[o]+"CancelAnimationFrame"]||t[s[o]+"CancelRequestAnimationFrame"];v("Ticker",function(t,e){var i,r,s,o,a,u=this,c=O(),f=!(!1===e||!P)&&"auto",d=500,_=33,m=function(t){var e,n,l=O()-k;l>d&&(c+=l-_),k+=l,u.time=(k-c)/1e3,e=u.time-a,(!i||e>0||!0===t)&&(u.frame++,a+=e+(e>=o?.004:o-e),n=!0),!0!==t&&(s=r(m)),n&&u.dispatchEvent("tick")};w.call(u),u.time=u.frame=0,u.tick=function(){m(!0)},u.lagSmoothing=function(t,e){if(!arguments.length)return d<1e10;d=t||1e10,_=Math.min(e,d,0)},u.sleep=function(){null!=s&&(f&&S?S(s):clearTimeout(s),r=p,s=null,u===l&&(h=!1))},u.wake=function(t){null!==s?u.sleep():t?c+=-k+(k=O()):u.frame>10&&(k=O()-d+5),r=0===i?p:f&&P?P:function(t){return setTimeout(t,1e3*(a-u.time)+1|0)},u===l&&(h=!0),m(2)},u.fps=function(t){if(!arguments.length)return i;o=1/((i=t)||60),a=this.time+o,u.wake()},u.useRAF=function(t){if(!arguments.length)return f;u.sleep(),f=t,u.fps(i)},u.fps(t),setTimeout(function(){"auto"===f&&u.frame<5&&"hidden"!==(n||{}).visibilityState&&u.useRAF(!1)},1500)}),(a=c.Ticker.prototype=new c.events.EventDispatcher).constructor=c.Ticker;var C=v("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,q){h||l.wake();var i=this.vars.useFrames?H:q;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=C.ticker=new c.Ticker,(a=C.prototype)._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var R=function(){h&&O()-k>2e3&&("hidden"!==(n||{}).visibilityState||!l.lagSmoothing())&&l.wake();var t=setTimeout(R,2e3);t.unref&&t.unref()};R(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},a._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(n?n.length:0){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=d(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(E.length&&Z(),this.render(t,e,!1),E.length&&Z())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||1e-10,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(h||t||l.wake(),i=(e=n.rawTime())-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var M=v("core.SimpleTimeline",function(t){C.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(a=M.prototype=new C).constructor=M,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return h||l.wake(),this._totalTime};var A=v("TweenLite",function(e,i,n){if(C.call(this,i,n),this.render=A.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:A.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?V[A.defaultOverwrite]:"number"==typeof l?l>>0:V[l],(a||e instanceof Array||e.push&&d(e))&&"number"!=typeof e[0])for(this._targets=o=f(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)(s=o[r])?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(f(s))):(this._siblings[r]=$(s,this,!1),1===l&&this._siblings[r].length>1&&Q(s,this,null,1,this._siblings[r])):"string"==typeof(s=o[r--]=A.selector(s))&&o.splice(r+1,1):o.splice(r--,1);else this._propLookup={},this._siblings=$(e,this,!1),1===l&&this._siblings.length>1&&Q(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-1e-10,this.render(Math.min(0,-this._delay)))},!0),D=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)};(a=A.prototype=new C).constructor=A,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,A.version="2.0.1",A.defaultEase=a._ease=new x(null,null,1,1),A.defaultOverwrite="auto",A.ticker=l,A.autoSleep=120,A.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},A.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(A.selector=i,i(e)):(n||(n=t.document),n?n.querySelectorAll?n.querySelectorAll(e):n.getElementById("#"===e.charAt(0)?e.substr(1):e):e)};var E=[],L={},N=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,F=/[\+-]=-?[\.\d]/,X=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&e>-1e-6&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},B=function(t,e,i,n){var r,s,o,a,l,h,u,c=[],f=0,p="",d=0;for(c.start=t,c.end=e,t=c[0]=t+"",e=c[1]=e+"",i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(N)||[],s=e.match(N)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,a=0;a<l;a++)u=s[a],p+=(h=e.substr(f,e.indexOf(u,f)-f))||!a?h:",",f+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),u===r[a]||r.length<=a?p+=u:(p&&(c.push(p),p=""),o=parseFloat(r[a]),c.push(o),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:o,c:("="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*parseFloat(u.substr(2)):parseFloat(u)-o)||0,f:0,m:d&&d<4?Math.round:0}),f+=u.length;return(p+=e.substr(f))&&c.push(p),c.setRatio=X,F.test(e)&&(c.end=null),c},I=function(t,e,i,n,r,s,o,a,l){"function"==typeof n&&(n=n(l||0,t));var h=typeof t[e],u="function"!==h?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),c="get"!==i?i:u?o?t[u](o):t[u]():t[e],f="string"==typeof n&&"="===n.charAt(1),p={t:t,p:e,s:c,f:"function"===h,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:f?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if(("number"!=typeof c||"number"!=typeof n&&!f)&&(o||isNaN(c)||!f&&isNaN(n)||"boolean"==typeof c||"boolean"==typeof n?(p.fp=o,p={t:B(c,f?parseFloat(p.s)+p.c+(p.s+"").replace(/[0-9\-\.]/g,""):n,a||A.defaultStringFilter,p),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(p.s=parseFloat(c),f||(p.c=parseFloat(n)-p.s||0))),p.c)return(p._next=this._firstPT)&&(p._next._prev=p),this._firstPT=p,p},Y=A._internals={isArray:d,isSelector:D,lazyTweens:E,blobDif:B},z=A._plugins={},j=Y.tweenLookup={},U=0,W=Y.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},V={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},H=C._rootFramesTimeline=new M,q=C._rootTimeline=new M,G=30,Z=Y.lazyRender=function(){var t,e=E.length;for(L={};--e>-1;)(t=E[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);E.length=0};q._startTime=l.time,H._startTime=l.frame,q._active=H._active=!0,setTimeout(Z,1),C._updateRoot=A.render=function(){var t,e,i;if(E.length&&Z(),q.render((l.time-q._startTime)*q._timeScale,!1,!1),H.render((l.frame-H._startTime)*H._timeScale,!1,!1),E.length&&Z(),l.frame>=G){for(i in G=l.frame+(parseInt(A.autoSleep,10)||120),j){for(t=(e=j[i].tweens).length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete j[i]}if((!(i=q._first)||i._paused)&&A.autoSleep&&!H._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",C._updateRoot);var $=function(t,e,i){var n,r,s=t._gsTweenID;if(j[s||(t._gsTweenID=s="t"+U++)]||(j[s]={target:t,tweens:[]}),e&&((n=j[s].tweens)[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return j[s].tweens},K=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),(o=A.onOverwrite)&&(s=o(t,e,i,n)),!1!==r&&!1!==s},Q=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var h,u=e._startTime+1e-10,c=[],f=0,p=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(h=h||J(e,0,p),0===J(a,h,p)&&(c[f++]=a)):a._startTime<=u&&a._startTime+a.totalDuration()/a._timeScale>u&&((p||!a._initted)&&u-a._startTime<=2e-10||(c[f++]=a)));for(s=f;--s>-1;)if(a=c[s],2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},J=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return(s/=r)>e?s-e:i&&s===e||!t._initted&&s-e<2e-10?1e-10:(s+=t.totalDuration()/t._timeScale/r)>e+1e-10?0:s-e-1e-10};a._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,l=this._duration,h=!!o.immediateRender,u=o.ease;if(o.startAt){for(n in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={},o.startAt)r[n]=o.startAt[n];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&!1!==o.lazy,r.startAt=r.delay=null,r.onUpdate=o.onUpdate,r.onUpdateParams=o.onUpdateParams,r.onUpdateScope=o.onUpdateScope||o.callbackScope||this,this._startAt=A.to(this.target||{},0,r),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(n in 0!==this._time&&(h=!1),i={},o)W[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==o.lazy,i.immediateRender=h,this._startAt=A.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof x?u:"function"==typeof u?new x(u,o.easeParams):b[u]||A.defaultEase:A.defaultEase,o.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&A._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,s){var o,a,l,h,u,c;if(null==e)return!1;for(o in L[e._gsTweenID]&&Z(),this.vars.css||e.style&&e!==t&&e.nodeType&&z.css&&!1!==this.vars.autoCSS&&function(t,e){var i,n={};for(i in t)W[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!z[i]||z[i]&&z[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n}(this.vars,e),this.vars)if(c=this.vars[o],W[o])c&&(c instanceof Array||c.push&&d(c))&&-1!==c.join("").indexOf("{self}")&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(z[o]&&(h=new z[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=u={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:h._priority,m:0},a=h._overwriteProps.length;--a>-1;)i[h._overwriteProps[a]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else i[o]=I.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&Q(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7&&t>=0)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||1e-10===h&&"isPause"!==this.data)&&h!==t&&(i=!0,h>1e-10&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||h===t?t:1e-10);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&h>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(1e-10!==h||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||h===t?t:1e-10)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,c=this._easeType,f=this._easePower;(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===f?u*=u:2===f?u*=u*u:3===f?u*=u*u*u:4===f&&(u*=u*u*u*u),this.ratio=1===c?1-u:2===c?u:t/l<.5?u/2:1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=h,E.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&1e-10===this._rawPrevTime&&1e-10!==o&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:A.selector(e)||e;var n,r,s,o,a,l,h,u,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((d(e)||D(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(h=t||a,u=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(A.onOverwrite||this.vars.onOverwrite)){for(s in h)a[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in h)(o=a[s])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(h)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),u&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&A._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],C.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-1e-10,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=$(n[i],this,!0);else this._siblings=$(this.target,this,!0)}return C.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&A._onPluginEvent(t?"_onEnable":"_onDisable",this)},A.to=function(t,e,i){return new A(t,e,i)},A.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new A(t,e,i)},A.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new A(t,e,n)},A.delayedCall=function(t,e,i,n,r){return new A(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},A.set=function(t,e){return new A(t,0,e)},A.getTweensOf=function(t,e){if(null==t)return[];var i,n,r,s;if(t="string"!=typeof t?t:A.selector(t)||t,(d(t)||D(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(A.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else if(t._gsTweenID)for(i=(n=$(t).concat()).length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n||[]},A.killTweensOf=A.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=A.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var tt=v("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=tt.prototype},!0);if(a=tt.prototype,tt.version="1.19.0",tt.API=2,a._firstPT=null,a._addTween=I,a.setRatio=X,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},A._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},tt.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===tt.API&&(z[(new t[e])._propName]=t[e]);return!0},g.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=v("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){tt.call(this,i,n),this._overwriteProps=r||[]},!0===t.global),a=o.prototype=new tt(i);for(e in a.constructor=o,o.API=t.API,s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,tt.activate([o]),o},s=t._gsQueue){for(o=0;o<s.length;o++)s[o]();for(a in _)_[a].func||t.console.log("GSAP encountered missing dependency: "+a)}return h=!1,A}(r),o=r.com.greensock,a=o.core.SimpleTimeline,l=o.core.Animation,h=r.Ease,u=r.Linear,c=u,f=r.Power1,p=r.Power2,d=r.Power3,_=r.Power4,m=r.TweenPlugin,g=o.events.EventDispatcher}).call(this,i(12)(t),i(13))},function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"d",function(){return s}),i.d(e,"b",function(){return o}),i.d(e,"g",function(){return a}),i.d(e,"i",function(){return l}),i.d(e,"j",function(){return h}),i.d(e,"c",function(){return u}),i.d(e,"e",function(){return c}),i.d(e,"h",function(){return f}),i.d(e,"f",function(){return p});var n=i(0);
/*!
 * VERSION: 1.16.0
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/n.l._gsDefine("easing.Back",["easing.Ease"],function(){var t,e,i,r,s=n.l.GreenSockGlobals||n.l,o=s.com.greensock,a=2*Math.PI,l=Math.PI/2,h=o._class,u=function(t,e){var i=h("easing."+t,function(){},!0),r=i.prototype=new n.b;return r.constructor=i,r.getRatio=e,i},c=n.b.register||function(){},f=function(t,e,i,n,r){var s=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return c(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(t,e){var i=h("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=i.prototype=new n.b;return r.constructor=i,r.getRatio=e,r.config=function(t){return new i(t)},i},_=f("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),g=m.prototype=new n.b;return g.constructor=m,g.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),g.config=m.config=function(t,e,i){return new m(t,e,i)},(g=(t=h("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new n.b).constructor=t,g.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},g.config=t.config=function(e,i){return new t(e,i)},(g=(e=h("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new n.b).constructor=e,g.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},g.config=e.config=function(t,i,n){return new e(t,i,n)},(g=(i=h("easing.RoughEase",function(t){for(var e,i,r,s,o,a,l=(t=t||{}).taper||"none",h=[],u=0,c=0|(t.points||20),f=c,d=!1!==t.randomize,_=!0===t.clamp,m=t.template instanceof n.b?t.template:null,g="number"==typeof t.strength?.4*t.strength:.4;--f>-1;)e=d?Math.random():1/c*f,i=m?m.getRatio(e):e,r="none"===l?g:"out"===l?(s=1-e)*s*g:"in"===l?e*e*g:e<.5?(s=2*e)*s*.5*g:(s=2*(1-e))*s*.5*g,d?i+=Math.random()*r-.5*r:f%2?i+=.5*r:i-=.5*r,_&&(i>1?i=1:i<0&&(i=0)),h[u++]={x:e,y:i};for(h.sort(function(t,e){return t.x-e.x}),a=new p(1,1,null),f=c;--f>-1;)o=h[f],a=new p(o.x,o.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)},!0)).prototype=new n.b).constructor=i,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new i(t)},i.ease=new i,f("Bounce",u("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),u("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),u("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",u("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),u("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),u("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),f("Elastic",(r=function(t,e,i){var r=h("easing."+t,function(t,e){this._p1=t>=1?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),s=r.prototype=new n.b;return s.constructor=r,s.getRatio=e,s.config=function(t,e){return new r(t,e)},r})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),r("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",u("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),u("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),u("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",u("SineOut",function(t){return Math.sin(t*l)}),u("SineIn",function(t){return 1-Math.cos(t*l)}),u("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(t){return n.b.map[t]}},!0),c(s.SlowMo,"SlowMo","ease,"),c(i,"RoughEase","ease,"),c(t,"SteppedEase","ease,"),_},!0);const r=n.l.Back,s=n.l.Elastic,o=n.l.Bounce,a=n.l.RoughEase,l=n.l.SlowMo,h=n.l.SteppedEase,u=n.l.Circ,c=n.l.Expo,f=n.l.Sine,p=n.l.ExpoScaleEase},function(t,e,i){"use strict";i.d(e,"a",function(){return r});var n=i(0);
/*!
 * VERSION: 2.0.1
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */n.l._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(){var t=function(t){n.j.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var e,i,r=this.vars;for(i in r)e=r[i],s(e)&&-1!==e.join("").indexOf("{self}")&&(r[i]=this._swapSelfInParams(e));s(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},e=n.m._internals,i=t._internals={},r=e.isSelector,s=e.isArray,o=e.lazyTweens,a=e.lazyRender,l=n.l._gsDefine.globals,h=function(t){var e,i={};for(e in t)i[e]=t[e];return i},u=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},c=i.pauseCallback=function(){},f=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},p=t.prototype=new n.j;return t.version="2.0.1",p.constructor=t,p.kill()._gc=p._forcingPlayhead=p._hasPause=!1,p.to=function(t,e,i,r){var s=i.repeat&&l.TweenMax||n.m;return e?this.add(new s(t,e,i),r):this.set(t,i,r)},p.from=function(t,e,i,r){return this.add((i.repeat&&l.TweenMax||n.m).from(t,e,i),r)},p.fromTo=function(t,e,i,r,s){var o=r.repeat&&l.TweenMax||n.m;return e?this.add(o.fromTo(t,e,i,r),s):this.set(t,r,s)},p.staggerTo=function(e,i,s,o,a,l,c,p){var d,_,m=new t({onComplete:l,onCompleteParams:c,callbackScope:p,smoothChildTiming:this.smoothChildTiming}),g=s.cycle;for("string"==typeof e&&(e=n.m.selector(e)||e),r(e=e||[])&&(e=f(e)),(o=o||0)<0&&((e=f(e)).reverse(),o*=-1),_=0;_<e.length;_++)(d=h(s)).startAt&&(d.startAt=h(d.startAt),d.startAt.cycle&&u(d.startAt,e,_)),g&&(u(d,e,_),null!=d.duration&&(i=d.duration,delete d.duration)),m.to(e[_],i,d,_*o);return this.add(m,a)},p.staggerFrom=function(t,e,i,n,r,s,o,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,o,a)},p.staggerFromTo=function(t,e,i,n,r,s,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,o,a,l)},p.call=function(t,e,i,r){return this.add(n.m.delayedCall(0,t,e,i),r)},p.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new n.m(t,0,e),i)},t.exportRoot=function(e,i){null==(e=e||{}).smoothChildTiming&&(e.smoothChildTiming=!0);var r,s,o,a,l=new t(e),h=l._timeline;for(null==i&&(i=!0),h._remove(l,!0),l._startTime=0,l._rawPrevTime=l._time=l._totalTime=h._time,o=h._first;o;)a=o._next,i&&o instanceof n.m&&o.target===o.vars.onComplete||((s=o._startTime-o._delay)<0&&(r=1),l.add(o,s)),o=a;return h.add(l,0),r&&l.totalDuration(),l},p.add=function(e,i,r,o){var a,l,h,u,c,f;if("number"!=typeof i&&(i=this._parseTimeOrLabel(i,0,!0,e)),!(e instanceof n.a)){if(e instanceof Array||e&&e.push&&s(e)){for(r=r||"normal",o=o||0,a=i,l=e.length,h=0;h<l;h++)s(u=e[h])&&(u=new t({tweens:u})),this.add(u,a),"string"!=typeof u&&"function"!=typeof u&&("sequence"===r?a=u._startTime+u.totalDuration()/u._timeScale:"start"===r&&(u._startTime-=u.delay())),a+=o;return this._uncache(!0)}if("string"==typeof e)return this.addLabel(e,i);if("function"!=typeof e)throw"Cannot add "+e+" into the timeline; it is not a tween, timeline, function, or string.";e=n.m.delayedCall(0,e)}if(n.j.prototype.add.call(this,e,i),e._time&&e.render((this.rawTime()-e._startTime)*e._timeScale,!1,!1),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(f=(c=this).rawTime()>e._startTime;c._timeline;)f&&c._timeline.smoothChildTiming?c.totalTime(c._totalTime,!0):c._gc&&c._enabled(!0,!1),c=c._timeline;return this},p.remove=function(t){if(t instanceof n.a){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?n.a._rootFramesTimeline:n.a._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&s(t)){for(var i=t.length;--i>-1;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},p._remove=function(t,e){return n.j.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},p.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},p.insert=p.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},p.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},p.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},p.addPause=function(t,e,i,r){var s=n.m.delayedCall(0,c,i,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},p.removeLabel=function(t){return delete this._labels[t],this},p.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},p._parseTimeOrLabel=function(t,e,i,r){var o,a;if(r instanceof n.a&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&s(r)))for(a=r.length;--a>-1;)r[a]instanceof n.a&&r[a].timeline===this&&this.remove(r[a]);if(o="number"!=typeof t||e?this.duration()>99999999999?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-o:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=o);else{if(-1===(a=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=o+e:e:this._labels[t]+e;e=parseInt(t.charAt(a-1)+"1",10)*Number(t.substr(a+1)),t=a>1?this._parseTimeOrLabel(t.substr(0,a-1),0,i):o}return Number(t)+e},p.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},p.stop=function(){return this.paused(!0)},p.gotoAndPlay=function(t,e){return this.play(t,e)},p.gotoAndStop=function(t,e){return this.pause(t,e)},p.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,s,l,h,u,c,f=this._time,p=this._dirty?this.totalDuration():this._totalDuration,d=this._startTime,_=this._timeScale,m=this._paused;if(f!==this._time&&(t+=this._time-f),t>=p-1e-7&&t>=0)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,l="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||1e-10===this._rawPrevTime)&&this._rawPrevTime!==t&&this._first&&(h=!0,this._rawPrevTime>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==f||0===this._duration&&1e-10!==this._rawPrevTime&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(l="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=r=!0,l="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(h=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=f)for(n=this._first;n&&n._startTime<=t&&!u;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(u=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!u;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(u=n),n=n._prev;u&&(this._time=t=u._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==f&&this._first||i||h||u){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==f&&t>0&&(this._active=!0),0===f&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),(c=this._time)>=f)for(n=this._first;n&&(s=n._next,c===this._time&&(!this._paused||m));)(n._active||n._startTime<=c&&!n._paused&&!n._gc)&&(u===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=s;else for(n=this._last;n&&(s=n._prev,c===this._time&&(!this._paused||m));){if(n._active||n._startTime<=f&&!n._paused&&!n._gc){if(u===n){for(u=n._prev;u&&u.endTime()>this._time;)u.render(u._reversed?u.totalDuration()-(t-u._startTime)*u._timeScale:(t-u._startTime)*u._timeScale,e,i),u=u._prev;u=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=s}this._onUpdate&&(e||(o.length&&a(),this._callback("onUpdate"))),l&&(this._gc||d!==this._startTime&&_===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(o.length&&a(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}},p._hasPausedChild=function(){for(var e=this._first;e;){if(e._paused||e instanceof t&&e._hasPausedChild())return!0;e=e._next}return!1},p.getChildren=function(t,e,i,r){r=r||-9999999999;for(var s=[],o=this._first,a=0;o;)o._startTime<r||(o instanceof n.m?!1!==e&&(s[a++]=o):(!1!==i&&(s[a++]=o),!1!==t&&(a=(s=s.concat(o.getChildren(!0,e,i))).length))),o=o._next;return s},p.getTweensOf=function(t,e){var i,r,s=this._gc,o=[],a=0;for(s&&this._enabled(!0,!0),r=(i=n.m.getTweensOf(t)).length;--r>-1;)(i[r].timeline===this||e&&this._contains(i[r]))&&(o[a++]=i[r]);return s&&this._enabled(!1,!0),o},p.recent=function(){return this._recent},p._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},p.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},p._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},p.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},p.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return n.a.prototype.invalidate.call(this)},p._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return n.j.prototype._enabled.call(this,t,e)},p.totalTime=function(t,e,i){this._forcingPlayhead=!0;var r=n.a.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},p.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},p.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(r,r._startTime-r._delay),this._calculatingDuration=0):s=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale,this._time-=r._startTime,this._totalTime-=r._startTime,this._rawPrevTime-=r._startTime),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),(i=r._startTime+r._totalDuration/r._timeScale)>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},p.paused=function(t){if(!t)for(var e=this._first,i=this._time;e;)e._startTime===i&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return n.a.prototype.paused.apply(this,arguments)},p.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===n.a._rootFramesTimeline},p.rawTime=function(t){return t&&(this._paused||this._repeat&&this.time()>0&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},t},!0);const r=n.l.TimelineLite},function(t,e,i){"use strict";i.d(e,"a",function(){return r});var n=i(0);
/*!
 * VERSION: 1.20.5
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */n.l._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(){var t,e,i,r,s=function(){n.k.call(this,"css"),this._overwriteProps.length=0,this.setRatio=s.prototype.setRatio},o=n.l._gsDefine.globals,a={},l=s.prototype=new n.k("css");l.constructor=s,s.version="1.20.5",s.API=2,s.defaultTransformPerspective=0,s.defaultSkewType="compensated",s.defaultSmoothOrigin=!0,l="px",s.suffixMap={top:l,right:l,bottom:l,left:l,width:l,height:l,fontSize:l,padding:l,margin:l,perspective:l,lineHeight:""};var h,u,c,f,p,d,_,m,g=/(?:\-|\.|\b)(\d|\.|e\-)+/g,v=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,y=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,x=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,b=/(?:\d|\-|\+|=|#|\.)*/g,T=/opacity *= *([^)]*)/i,w=/opacity:([^;]*)/i,P=/alpha\(opacity *=.+?\)/i,S=/^(rgb|hsl)/,O=/([A-Z])/g,k=/-([a-z])/gi,C=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,R=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,A=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,D=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,E=/,(?=[^\)]*(?:\(|$))/gi,L=/[\s,\(]/i,N=Math.PI/180,F=180/Math.PI,X={},B={style:{}},I=n.l.document||{createElement:function(){return B}},Y=function(t,e){return I.createElementNS?I.createElementNS(e||"http://www.w3.org/1999/xhtml",t):I.createElement(t)},z=Y("div"),j=Y("img"),U=s._internals={_specialProps:a},W=(n.l.navigator||{}).userAgent||"",V=function(){var t=W.indexOf("Android"),e=Y("a");return c=-1!==W.indexOf("Safari")&&-1===W.indexOf("Chrome")&&(-1===t||parseFloat(W.substr(t+8,2))>3),p=c&&parseFloat(W.substr(W.indexOf("Version/")+8,2))<6,f=-1!==W.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(W)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(W))&&(d=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),H=function(t){return T.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},q=function(t){n.l.console&&console.log(t)},G="",Z="",$=function(t,e){var i,n,r=(e=e||z).style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(G="-"+(Z=3===n?"ms":i[n]).toLowerCase()+"-",Z+t):null},K=("undefined"!=typeof window?window:I.defaultView||{getComputedStyle:function(){}}).getComputedStyle,Q=s.getStyle=function(t,e,i,n,r){var s;return V||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(O,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):H(t)},J=U.convertToPixels=function(t,e,i,r,o){if("px"===r||!r&&"lineHeight"!==e)return i;if("auto"===r||!i)return 0;var a,l,h,u=M.test(e),c=t,f=z.style,p=i<0,d=1===i;if(p&&(i=-i),d&&(i*=100),"lineHeight"!==e||r)if("%"===r&&-1!==e.indexOf("border"))a=i/100*(u?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+Q(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[u?"borderLeftWidth":"borderTopWidth"]=i+r;else{if(c=t.parentNode||I.body,-1!==Q(c,"display").indexOf("flex")&&(f.position="absolute"),l=c._gsCache,h=n.m.ticker.frame,l&&u&&l.time===h)return l.width*i/100;f[u?"width":"height"]=i+r}c.appendChild(z),a=parseFloat(z[u?"offsetWidth":"offsetHeight"]),c.removeChild(z),u&&"%"===r&&!1!==s.cacheWidths&&((l=c._gsCache=c._gsCache||{}).time=h,l.width=a/i*100),0!==a||o||(a=J(t,e,i,r,!0))}else l=K(t).lineHeight,t.style.lineHeight=i,a=parseFloat(K(t).lineHeight),t.style.lineHeight=l;return d&&(a/=100),p?-a:a},tt=U.calculateOffset=function(t,e,i){if("absolute"!==Q(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=Q(t,"margin"+n,i);return t["offset"+n]-(J(t,e,parseFloat(r),r.replace(b,""))||0)},et=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)-1!==(r=e[i]).indexOf("-transform")&&Ct!==r||(s[r.replace(k,R)]=e.getPropertyValue(r));else for(i in e)-1!==i.indexOf("Transform")&&kt!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(k,R)]=e[i]);return V||(s.opacity=H(t)),n=zt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Mt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},it=function(t,e,i,n,r){var s,o,a,l={},h=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&-1===o.indexOf("Origin")&&("number"!=typeof s&&"string"!=typeof s||(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(x,"")?s:0:tt(t,o),void 0!==h[o]&&(a=new gt(h,o,h[o],a))));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},nt={width:["Left","Right"],height:["Top","Bottom"]},rt=["marginLeft","marginRight","marginTop","marginBottom"],st=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getCTM&&Bt(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=nt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(Q(t,"padding"+r[s],i,!0))||0,n-=parseFloat(Q(t,"border"+r[s]+"Width",i,!0))||0;return n},ot=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":n[0],s=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(ot(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=-1!==r.indexOf("%"),e.oyp=-1!==s.indexOf("%"),e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(x,"")),e.oy=parseFloat(s.replace(x,"")),e.v=t),e||t},at=function(t,e){return"function"==typeof t&&(t=t(m,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},lt=function(t,e){return"function"==typeof t&&(t=t(m,_)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ht=function(t,e,i,n){var r,s,o,a,l;return"function"==typeof t&&(t=t(m,_)),null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),o=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(-1===t.indexOf("rad")?1:F)-(l?0:e),s.length&&(n&&(n[i]=e+o),-1!==t.indexOf("short")&&(o%=r)!==o%(r/2)&&(o=o<0?o+r:o-r),-1!==t.indexOf("_cw")&&o<0?o=(o+9999999999*r)%r-(o/r|0)*r:-1!==t.indexOf("ccw")&&o>0&&(o=(o-9999999999*r)%r-(o/r|0)*r)),a=e+o),a<1e-6&&a>-1e-6&&(a=0),a},ut={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ct=function(t,e,i){return 255*(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},ft=s.parseColor=function(t,e){var i,n,r,s,o,a,l,h,u,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ut[t])i=ut[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(n=t.charAt(1))+n+(r=t.charAt(2))+r+(s=t.charAt(3))+s),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(g),e){if(-1!==t.indexOf("="))return t.match(v)}else o=Number(i[0])%360/360,a=Number(i[1])/100,n=2*(l=Number(i[2])/100)-(r=l<=.5?l*(a+1):l+a-l*a),i.length>3&&(i[3]=Number(i[3])),i[0]=ct(o+1/3,n,r),i[1]=ct(o,n,r),i[2]=ct(o-1/3,n,r);else i=t.match(g)||ut.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ut.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,l=((h=Math.max(n,r,s))+(u=Math.min(n,r,s)))/2,h===u?o=a=0:(c=h-u,a=l>.5?c/(2-h-u):c/(h+u),o=h===n?(r-s)/c+(r<s?6:0):h===r?(s-n)/c+2:(n-r)/c+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},pt=function(t,e){var i,n,r,s=t.match(dt)||[],o=0,a="";if(!s.length)return t;for(i=0;i<s.length;i++)n=s[i],o+=(r=t.substr(o,t.indexOf(n,o)-o)).length+n.length,3===(n=ft(n,e)).length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},dt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(l in ut)dt+="|"+l+"\\b";dt=new RegExp(dt+")","gi"),s.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];dt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=pt(t[0],e),t[1]=pt(t[1],e)),dt.lastIndex=0},n.m.defaultStringFilter||(n.m.defaultStringFilter=s.colorStringFilter);var _t=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(dt)||[""])[0]:"",o=t.split(s).join("").match(y)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",h=-1!==t.indexOf(" ")?" ":",",u=o.length,c=u>0?o[0].replace(g,""):"";return u?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(d=t.replace(E,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(dt)||[s])[0],p=(f=t.split(e).join("").match(y)||[]).length,u>p--)for(;++p<u;)f[p]=i?f[(p-1)/2|0]:o[p];return a+f.join(h)+h+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(s=t.replace(E,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(f=(e=t.match(y)||[]).length,u>f--)for(;++f<u;)e[f]=i?e[(f-1)/2|0]:o[f];return a+e.join(h)+l}:function(t){return t}},mt=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,h=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return r.parse(e,a,s,o)}},gt=(U._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,l=o.firstMPT;l;)e=a[l.v],l.r?e=l.r(e):e<1e-6&&e>-1e-6&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod.call(this._tween,a.rotation,this.t,this._tween):a.rotation),1===t||0===t)for(l=o.firstMPT,s=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),vt=(U._parseToProxy=function(t,e,i,n,r,s){var o,a,l,h,u,c=n,f={},p={},d=i._transform,_=X;for(i._transform=null,X=e,n=u=i.parse(t,e,n,r),X=_,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(p[a=n.p]=n.s+n.c,f[a]=n.s,s||(h=new gt(n,"s",a,h,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,p[a=n.p+"_"+l]=n.data[l],f[a]=n[l],s||(h=new gt(n,l,a,h,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:h,pt:u}},U.CSSPropTween=function(e,i,n,s,o,a,l,h,u,c,f){this.t=e,this.p=i,this.s=n,this.c=s,this.n=l||i,e instanceof vt||r.push(this.n),this.r=h?"function"==typeof h?h:Math.round:h,this.type=a||0,u&&(this.pr=u,t=!0),this.b=void 0===c?n:c,this.e=void 0===f?n+s:f,o&&(this._next=o,o._prev=this)}),yt=function(t,e,i,n,r,s){var o=new vt(t,e,i,n-i,r,-1,s);return o.b=i,o.e=o.xs0=n,o},xt=s.parseComplex=function(t,e,i,n,r,o,a,l,u,c){i=i||o||"","function"==typeof n&&(n=n(m,_)),a=new vt(t,e,0,0,a,c?2:1,null,!1,l,i,n),n+="",r&&dt.test(n+i)&&(n=[i,n],s.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,y,x,b,T,w,P,S,O,k,C,R=i.split(", ").join(",").split(" "),M=n.split(", ").join(",").split(" "),A=R.length,D=!1!==h;for(-1===n.indexOf(",")&&-1===i.indexOf(",")||(-1!==(n+i).indexOf("rgb")||-1!==(n+i).indexOf("hsl")?(R=R.join(" ").replace(E,", ").split(" "),M=M.join(" ").replace(E,", ").split(" ")):(R=R.join(" ").split(",").join(", ").split(" "),M=M.join(" ").split(",").join(", ").split(" ")),A=R.length),A!==M.length&&(A=(R=(o||"").split(" ")).length),a.plugin=u,a.setRatio=c,dt.lastIndex=0,f=0;f<A;f++)if(y=R[f],x=M[f]+"",(w=parseFloat(y))||0===w)a.appendXtra("",w,at(x,w),x.replace(v,""),!(!D||-1===x.indexOf("px"))&&Math.round,!0);else if(r&&dt.test(y))k=")"+((k=x.indexOf(")")+1)?x.substr(k):""),C=-1!==x.indexOf("hsl")&&V,S=x,y=ft(y,C),x=ft(x,C),(P=y.length+x.length>6)&&!V&&0===x[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(M[f]).join("transparent")):(V||(P=!1),C?a.appendXtra(S.substr(0,S.indexOf("hsl"))+(P?"hsla(":"hsl("),y[0],at(x[0],y[0]),",",!1,!0).appendXtra("",y[1],at(x[1],y[1]),"%,",!1).appendXtra("",y[2],at(x[2],y[2]),P?"%,":"%"+k,!1):a.appendXtra(S.substr(0,S.indexOf("rgb"))+(P?"rgba(":"rgb("),y[0],x[0]-y[0],",",Math.round,!0).appendXtra("",y[1],x[1]-y[1],",",Math.round).appendXtra("",y[2],x[2]-y[2],P?",":k,Math.round),P&&(y=y.length<4?1:y[3],a.appendXtra("",y,(x.length<4?1:x[3])-y,k,!1))),dt.lastIndex=0;else if(b=y.match(g)){if(!(T=x.match(v))||T.length!==b.length)return a;for(d=0,p=0;p<b.length;p++)O=b[p],S=y.indexOf(O,d),a.appendXtra(y.substr(d,S-d),Number(O),at(T[p],O),"",!(!D||"px"!==y.substr(S+O.length,2))&&Math.round,0===p),d=S+O.length;a["xs"+a.l]+=y.substr(d)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+x:x;if(-1!==n.indexOf("=")&&a.data){for(k=a.xs0+a.data.s,f=1;f<a.l;f++)k+=a["xs"+f]+a.data["xn"+f];a.e=k+a["xs"+f]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},bt=9;for((l=vt.prototype).l=l.pr=0;--bt>0;)l["xn"+bt]=0,l["xs"+bt]="";l.xs0="",l._next=l._prev=l.xfirst=l.data=l.plugin=l.setRatio=l.rxp=null,l.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new vt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var Tt=function(t,e){e=e||{},this.p=e.prefix&&$(t)||t,a[t]=a[this.p]=this,this.format=e.formatter||_t(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},wt=U._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r=t.split(","),s=e.defaultValue;for(i=i||[s],n=0;n<r.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||s,new Tt(r[n],e)},Pt=U._registerPluginProp=function(t){if(!a[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";wt(t,{parser:function(t,i,n,r,s,l,h){var u=o.com.greensock.plugins[e];return u?(u._cssRegister(),a[n].parse(t,i,n,r,s,l,h)):(q("Error: "+e+" js file not loaded."),s)}})}};(l=Tt.prototype).parseComplex=function(t,e,i,n,r,s){var o,a,l,h,u,c,f=this.keyword;if(this.multi&&(E.test(i)||E.test(e)?(a=e.replace(E,"|").split("|"),l=i.replace(E,"|").split("|")):f&&(a=[e],l=[i])),l){for(h=l.length>a.length?l.length:a.length,o=0;o<h;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(u=e.indexOf(f))!==(c=i.indexOf(f))&&(-1===c?a[o]=a[o].split(f).join(""):-1===u&&(a[o]+=" "+f));e=a.join(", "),i=l.join(", ")}return xt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},l.parse=function(t,e,n,r,s,o,a){return this.parseComplex(t.style,this.format(Q(t,this.p,i,!1,this.dflt)),this.format(e),s,o)},s.registerSpecialProp=function(t,e,i){wt(t,{parser:function(t,n,r,s,o,a,l){var h=new vt(t,r,0,0,o,2,r,!1,i);return h.plugin=a,h.setRatio=e(t,n,s._tween,r),h},priority:i})},s.useSVGTransformAttr=!0;var St,Ot="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),kt=$("transform"),Ct=G+"transform",Rt=$("transformOrigin"),Mt=null!==$("perspective"),At=U.Transform=function(){this.perspective=parseFloat(s.defaultTransformPerspective)||0,this.force3D=!(!1===s.defaultForce3D||!Mt)&&(s.defaultForce3D||"auto")},Dt=n.l.SVGElement,Et=function(t,e,i){var n,r=I.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Lt=I.documentElement||{},Nt=function(){var t,e,i,r=d||/Android/i.test(W)&&!n.l.chrome;return I.createElementNS&&!r&&(t=Et("svg",Lt),i=(e=Et("rect",t,{width:100,height:50,x:100})).getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[kt]="scaleX(0.5)",r=i===e.getBoundingClientRect().width&&!(f&&Mt),Lt.removeChild(t)),r}(),Ft=function(t,e,i,n,r,o){var a,l,h,u,c,f,p,d,_,m,g,v,y,x,b=t._gsTransform,T=Yt(t,!0);b&&(y=b.xOrigin,x=b.yOrigin),(!n||(a=n.split(" ")).length<2)&&(0===(p=t.getBBox()).x&&0===p.y&&p.width+p.height===0&&(p={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),a=[(-1!==(e=ot(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=u=parseFloat(a[0]),i.yOrigin=c=parseFloat(a[1]),n&&T!==It&&(f=T[0],p=T[1],d=T[2],_=T[3],m=T[4],g=T[5],(v=f*_-p*d)&&(l=u*(_/v)+c*(-d/v)+(d*g-_*m)/v,h=u*(-p/v)+c*(f/v)-(f*g-p*m)/v,u=i.xOrigin=a[0]=l,c=i.yOrigin=a[1]=h)),b&&(o&&(i.xOffset=b.xOffset,i.yOffset=b.yOffset,b=i),r||!1!==r&&!1!==s.defaultSmoothOrigin?(l=u-y,h=c-x,b.xOffset+=l*T[0]+h*T[2]-l,b.yOffset+=l*T[1]+h*T[3]-h):b.xOffset=b.yOffset=0),o||t.setAttribute("data-svg-origin",a.join(" "))},Xt=function(t){var e,i=Y("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,r=this.nextSibling,s=this.style.cssText;if(Lt.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=Xt}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return r?n.insertBefore(this,r):n.appendChild(this),Lt.removeChild(i),this.style.cssText=s,e},Bt=function(t){return!(!Dt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!function(t){try{return t.getBBox()}catch(e){return Xt.call(t,!0)}}(t))},It=[1,0,0,1,0,0],Yt=function(t,e){var i,n,r,s,o,a,l=t._gsTransform||new At,h=t.style;if(kt?n=Q(t,Ct,null,!0):t.currentStyle&&(n=(n=t.currentStyle.filter.match(A))&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,!kt||!(a=!K(t)||"none"===K(t).display)&&t.parentNode||(a&&(s=h.display,h.display="block"),t.parentNode||(o=1,Lt.appendChild(t)),i=!(n=Q(t,Ct,null,!0))||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?h.display=s:a&&Vt(h,"display"),o&&Lt.removeChild(t)),(l.svg||t.getCTM&&Bt(t))&&(i&&-1!==(h[kt]+"").indexOf("matrix")&&(n=h[kt],i=0),r=t.getAttribute("transform"),i&&r&&(n="matrix("+(r=t.transform.baseVal.consolidate().matrix).a+","+r.b+","+r.c+","+r.d+","+r.e+","+r.f+")",i=0)),i)return It;for(r=(n||"").match(g)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(o=s-(s|=0))?(1e5*o+(o<0?-.5:.5)|0)/1e5+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},zt=U.getTransform=function(t,e,i,r){if(t._gsTransform&&i&&!r)return t._gsTransform;var o,a,l,h,u,c,f=i&&t._gsTransform||new At,p=f.scaleX<0,d=Mt&&(parseFloat(Q(t,Rt,e,!1,"0 0 0").split(" ")[2])||f.zOrigin)||0,_=parseFloat(s.defaultTransformPerspective)||0;if(f.svg=!(!t.getCTM||!Bt(t)),f.svg&&(Ft(t,Q(t,Rt,e,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),St=s.useSVGTransformAttr||Nt),(o=Yt(t))!==It){if(16===o.length){var m,g,v,y,x,b=o[0],T=o[1],w=o[2],P=o[3],S=o[4],O=o[5],k=o[6],C=o[7],R=o[8],M=o[9],A=o[10],D=o[12],E=o[13],L=o[14],N=o[11],X=Math.atan2(k,A);f.zOrigin&&(D=R*(L=-f.zOrigin)-o[12],E=M*L-o[13],L=A*L+f.zOrigin-o[14]),f.rotationX=X*F,X&&(m=S*(y=Math.cos(-X))+R*(x=Math.sin(-X)),g=O*y+M*x,v=k*y+A*x,R=S*-x+R*y,M=O*-x+M*y,A=k*-x+A*y,N=C*-x+N*y,S=m,O=g,k=v),X=Math.atan2(-w,A),f.rotationY=X*F,X&&(g=T*(y=Math.cos(-X))-M*(x=Math.sin(-X)),v=w*y-A*x,M=T*x+M*y,A=w*x+A*y,N=P*x+N*y,b=m=b*y-R*x,T=g,w=v),X=Math.atan2(T,b),f.rotation=X*F,X&&(m=b*(y=Math.cos(X))+T*(x=Math.sin(X)),g=S*y+O*x,v=R*y+M*x,T=T*y-b*x,O=O*y-S*x,M=M*y-R*x,b=m,S=g,R=v),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),X=Math.atan2(S,O),f.scaleX=(1e5*Math.sqrt(b*b+T*T+w*w)+.5|0)/1e5,f.scaleY=(1e5*Math.sqrt(O*O+k*k)+.5|0)/1e5,f.scaleZ=(1e5*Math.sqrt(R*R+M*M+A*A)+.5|0)/1e5,b/=f.scaleX,S/=f.scaleY,T/=f.scaleX,O/=f.scaleY,Math.abs(X)>2e-5?(f.skewX=X*F,S=0,"simple"!==f.skewType&&(f.scaleY*=1/Math.cos(X))):f.skewX=0,f.perspective=N?1/(N<0?-N:N):0,f.x=D,f.y=E,f.z=L,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*b-f.yOrigin*S),f.y-=f.yOrigin-(f.yOrigin*T-f.xOrigin*O))}else if(!Mt||r||!o.length||f.x!==o[4]||f.y!==o[5]||!f.rotationX&&!f.rotationY){var B=o.length>=6,I=B?o[0]:1,Y=o[1]||0,z=o[2]||0,j=B?o[3]:1;f.x=o[4]||0,f.y=o[5]||0,l=Math.sqrt(I*I+Y*Y),h=Math.sqrt(j*j+z*z),u=I||Y?Math.atan2(Y,I)*F:f.rotation||0,c=z||j?Math.atan2(z,j)*F+u:f.skewX||0,f.scaleX=l,f.scaleY=h,f.rotation=u,f.skewX=c,Mt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*I+f.yOrigin*z),f.y-=f.yOrigin-(f.xOrigin*Y+f.yOrigin*j))}for(a in Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180)),f.zOrigin=d,f)f[a]<2e-5&&f[a]>-2e-5&&(f[a]=0)}return i&&(t._gsTransform=f,f.svg&&(St&&t.style[kt]?n.m.delayedCall(.001,function(){Vt(t.style,kt)}):!St&&t.getAttribute("transform")&&n.m.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},jt=function(t){var e,i,n=this.data,r=-n.rotation*N,s=r+n.skewX*N,o=(Math.cos(r)*n.scaleX*1e5|0)/1e5,a=(Math.sin(r)*n.scaleX*1e5|0)/1e5,l=(Math.sin(s)*-n.scaleY*1e5|0)/1e5,h=(Math.cos(s)*n.scaleY*1e5|0)/1e5,u=this.t.style,c=this.t.currentStyle;if(c){i=a,a=-l,l=-i,e=c.filter,u.filter="";var f,p,_=this.t.offsetWidth,m=this.t.offsetHeight,g="absolute"!==c.position,v="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+a+", M21="+l+", M22="+h,y=n.x+_*n.xPercent/100,x=n.y+m*n.yPercent/100;if(null!=n.ox&&(y+=(f=(n.oxp?_*n.ox*.01:n.ox)-_/2)-(f*o+(p=(n.oyp?m*n.oy*.01:n.oy)-m/2)*a),x+=p-(f*l+p*h)),v+=g?", Dx="+((f=_/2)-(f*o+(p=m/2)*a)+y)+", Dy="+(p-(f*l+p*h)+x)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?u.filter=e.replace(D,v):u.filter=v+" "+e,0!==t&&1!==t||1===o&&0===a&&0===l&&1===h&&(g&&-1===v.indexOf("Dx=0, Dy=0")||T.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&u.removeAttribute("filter")),!g){var w,P,S,O=d<8?1:-1;for(f=n.ieOffsetX||0,p=n.ieOffsetY||0,n.ieOffsetX=Math.round((_-((o<0?-o:o)*_+(a<0?-a:a)*m))/2+y),n.ieOffsetY=Math.round((m-((h<0?-h:h)*m+(l<0?-l:l)*_))/2+x),bt=0;bt<4;bt++)S=(i=-1!==(w=c[P=rt[bt]]).indexOf("px")?parseFloat(w):J(this.t,P,parseFloat(w),w.replace(b,""))||0)!==n[P]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?f-n.ieOffsetX:p-n.ieOffsetY,u[P]=(n[P]=Math.round(i-S*(0===bt||2===bt?1:O)))+"px"}}},Ut=U.set3DTransformRatio=U.setTransformRatio=function(t){var e,i,n,r,s,o,a,l,h,u,c,p,d,_,m,g,v,y,x,b,T,w=this.data,P=this.t.style,S=w.rotation,O=w.rotationX,k=w.rotationY,C=w.scaleX,R=w.scaleY,M=w.scaleZ,A=w.x,D=w.y,E=w.z,L=w.svg,F=w.perspective,X=w.force3D,B=w.skewY,I=w.skewX;if(B&&(I+=B,S+=B),!((1!==t&&0!==t||"auto"!==X||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&X||E||F||k||O||1!==M)||St&&L||!Mt)S||I||L?(S*=N,b=I*N,T=1e5,i=Math.cos(S)*C,s=Math.sin(S)*C,n=Math.sin(S-b)*-R,o=Math.cos(S-b)*R,b&&"simple"===w.skewType&&(e=Math.tan(b-B*N),n*=e=Math.sqrt(1+e*e),o*=e,B&&(e=Math.tan(B*N),i*=e=Math.sqrt(1+e*e),s*=e)),L&&(A+=w.xOrigin-(w.xOrigin*i+w.yOrigin*n)+w.xOffset,D+=w.yOrigin-(w.xOrigin*s+w.yOrigin*o)+w.yOffset,St&&(w.xPercent||w.yPercent)&&(m=this.t.getBBox(),A+=.01*w.xPercent*m.width,D+=.01*w.yPercent*m.height),A<(m=1e-6)&&A>-m&&(A=0),D<m&&D>-m&&(D=0)),x=(i*T|0)/T+","+(s*T|0)/T+","+(n*T|0)/T+","+(o*T|0)/T+","+A+","+D+")",L&&St?this.t.setAttribute("transform","matrix("+x):P[kt]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+x):P[kt]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+C+",0,0,"+R+","+A+","+D+")";else{if(f&&(C<(m=1e-4)&&C>-m&&(C=M=2e-5),R<m&&R>-m&&(R=M=2e-5),!F||w.z||w.rotationX||w.rotationY||(F=0)),S||I)S*=N,g=i=Math.cos(S),v=s=Math.sin(S),I&&(S-=I*N,g=Math.cos(S),v=Math.sin(S),"simple"===w.skewType&&(e=Math.tan((I-B)*N),g*=e=Math.sqrt(1+e*e),v*=e,w.skewY&&(e=Math.tan(B*N),i*=e=Math.sqrt(1+e*e),s*=e))),n=-v,o=g;else{if(!(k||O||1!==M||F||L))return void(P[kt]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) translate3d(":"translate3d(")+A+"px,"+D+"px,"+E+"px)"+(1!==C||1!==R?" scale("+C+","+R+")":""));i=o=1,n=s=0}u=1,r=a=l=h=c=p=0,d=F?-1/F:0,_=w.zOrigin,m=1e-6,",","0",(S=k*N)&&(g=Math.cos(S),l=-(v=Math.sin(S)),c=d*-v,r=i*v,a=s*v,u=g,d*=g,i*=g,s*=g),(S=O*N)&&(e=n*(g=Math.cos(S))+r*(v=Math.sin(S)),y=o*g+a*v,h=u*v,p=d*v,r=n*-v+r*g,a=o*-v+a*g,u*=g,d*=g,n=e,o=y),1!==M&&(r*=M,a*=M,u*=M,d*=M),1!==R&&(n*=R,o*=R,h*=R,p*=R),1!==C&&(i*=C,s*=C,l*=C,c*=C),(_||L)&&(_&&(A+=r*-_,D+=a*-_,E+=u*-_+_),L&&(A+=w.xOrigin-(w.xOrigin*i+w.yOrigin*n)+w.xOffset,D+=w.yOrigin-(w.xOrigin*s+w.yOrigin*o)+w.yOffset),A<m&&A>-m&&(A="0"),D<m&&D>-m&&(D="0"),E<m&&E>-m&&(E=0)),x=w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix3d(":"matrix3d(",x+=(i<m&&i>-m?"0":i)+","+(s<m&&s>-m?"0":s)+","+(l<m&&l>-m?"0":l),x+=","+(c<m&&c>-m?"0":c)+","+(n<m&&n>-m?"0":n)+","+(o<m&&o>-m?"0":o),O||k||1!==M?(x+=","+(h<m&&h>-m?"0":h)+","+(p<m&&p>-m?"0":p)+","+(r<m&&r>-m?"0":r),x+=","+(a<m&&a>-m?"0":a)+","+(u<m&&u>-m?"0":u)+","+(d<m&&d>-m?"0":d)+","):x+=",0,0,0,0,1,0,",x+=A+","+D+","+E+","+(F?1+-E/F:1)+")",P[kt]=x}};(l=At.prototype).x=l.y=l.z=l.skewX=l.skewY=l.rotation=l.rotationX=l.rotationY=l.zOrigin=l.xPercent=l.yPercent=l.xOffset=l.yOffset=0,l.scaleX=l.scaleY=l.scaleZ=1,wt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,n,r,o,a,l){if(r._lastParsedTransform===l)return o;r._lastParsedTransform=l;var h,u=l.scale&&"function"==typeof l.scale?l.scale:0;"function"==typeof l[n]&&(h=l[n],l[n]=e),u&&(l.scale=u(m,t));var c,f,p,d,g,v,y,x,b,T=t._gsTransform,w=t.style,P=Ot.length,S=l,O={},k=zt(t,i,!0,S.parseTransform),C=S.transform&&("function"==typeof S.transform?S.transform(m,_):S.transform);if(k.skewType=S.skewType||k.skewType||s.defaultSkewType,r._transform=k,C&&"string"==typeof C&&kt)(f=z.style)[kt]=C,f.display="block",f.position="absolute",-1!==C.indexOf("%")&&(f.width=Q(t,"width"),f.height=Q(t,"height")),I.body.appendChild(z),c=zt(z,null,!1),"simple"===k.skewType&&(c.scaleY*=Math.cos(c.skewX*N)),k.svg&&(v=k.xOrigin,y=k.yOrigin,c.x-=k.xOffset,c.y-=k.yOffset,(S.transformOrigin||S.svgOrigin)&&(C={},Ft(t,ot(S.transformOrigin),C,S.svgOrigin,S.smoothOrigin,!0),v=C.xOrigin,y=C.yOrigin,c.x-=C.xOffset-k.xOffset,c.y-=C.yOffset-k.yOffset),(v||y)&&(x=Yt(z,!0),c.x-=v-(v*x[0]+y*x[2]),c.y-=y-(v*x[1]+y*x[3]))),I.body.removeChild(z),c.perspective||(c.perspective=k.perspective),null!=S.xPercent&&(c.xPercent=lt(S.xPercent,k.xPercent)),null!=S.yPercent&&(c.yPercent=lt(S.yPercent,k.yPercent));else if("object"==typeof S){if(c={scaleX:lt(null!=S.scaleX?S.scaleX:S.scale,k.scaleX),scaleY:lt(null!=S.scaleY?S.scaleY:S.scale,k.scaleY),scaleZ:lt(S.scaleZ,k.scaleZ),x:lt(S.x,k.x),y:lt(S.y,k.y),z:lt(S.z,k.z),xPercent:lt(S.xPercent,k.xPercent),yPercent:lt(S.yPercent,k.yPercent),perspective:lt(S.transformPerspective,k.perspective)},null!=(g=S.directionalRotation))if("object"==typeof g)for(f in g)S[f]=g[f];else S.rotation=g;"string"==typeof S.x&&-1!==S.x.indexOf("%")&&(c.x=0,c.xPercent=lt(S.x,k.xPercent)),"string"==typeof S.y&&-1!==S.y.indexOf("%")&&(c.y=0,c.yPercent=lt(S.y,k.yPercent)),c.rotation=ht("rotation"in S?S.rotation:"shortRotation"in S?S.shortRotation+"_short":"rotationZ"in S?S.rotationZ:k.rotation,k.rotation,"rotation",O),Mt&&(c.rotationX=ht("rotationX"in S?S.rotationX:"shortRotationX"in S?S.shortRotationX+"_short":k.rotationX||0,k.rotationX,"rotationX",O),c.rotationY=ht("rotationY"in S?S.rotationY:"shortRotationY"in S?S.shortRotationY+"_short":k.rotationY||0,k.rotationY,"rotationY",O)),c.skewX=ht(S.skewX,k.skewX),c.skewY=ht(S.skewY,k.skewY)}for(Mt&&null!=S.force3D&&(k.force3D=S.force3D,d=!0),(p=k.force3D||k.z||k.rotationX||k.rotationY||c.z||c.rotationX||c.rotationY||c.perspective)||null==S.scale||(c.scaleZ=1);--P>-1;)((C=c[b=Ot[P]]-k[b])>1e-6||C<-1e-6||null!=S[b]||null!=X[b])&&(d=!0,o=new vt(k,b,k[b],C,o),b in O&&(o.e=O[b]),o.xs0=0,o.plugin=a,r._overwriteProps.push(o.n));return C=S.transformOrigin,k.svg&&(C||S.svgOrigin)&&(v=k.xOffset,y=k.yOffset,Ft(t,ot(C),c,S.svgOrigin,S.smoothOrigin),o=yt(k,"xOrigin",(T?k:c).xOrigin,c.xOrigin,o,"transformOrigin"),o=yt(k,"yOrigin",(T?k:c).yOrigin,c.yOrigin,o,"transformOrigin"),v===k.xOffset&&y===k.yOffset||(o=yt(k,"xOffset",T?v:k.xOffset,k.xOffset,o,"transformOrigin"),o=yt(k,"yOffset",T?y:k.yOffset,k.yOffset,o,"transformOrigin")),C="0px 0px"),(C||Mt&&p&&k.zOrigin)&&(kt?(d=!0,b=Rt,C=(C||Q(t,b,i,!1,"50% 50%"))+"",(o=new vt(w,b,0,0,o,-1,"transformOrigin")).b=w[b],o.plugin=a,Mt?(f=k.zOrigin,C=C.split(" "),k.zOrigin=(C.length>2&&(0===f||"0px"!==C[2])?parseFloat(C[2]):f)||0,o.xs0=o.e=C[0]+" "+(C[1]||"50%")+" 0px",(o=new vt(k,"zOrigin",0,0,o,-1,o.n)).b=f,o.xs0=o.e=k.zOrigin):o.xs0=o.e=C):ot(C+"",k)),d&&(r._transformType=k.svg&&St||!p&&3!==this._transformType?2:3),h&&(l[n]=h),u&&(l.scale=u),o},prefix:!0}),wt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),wt("borderRadius",{defaultValue:"0px",parser:function(t,n,r,s,o,a){n=this.format(n);var l,h,u,c,f,p,d,_,m,g,v,y,x,b,T,w,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],S=t.style;for(m=parseFloat(t.offsetWidth),g=parseFloat(t.offsetHeight),l=n.split(" "),h=0;h<P.length;h++)this.p.indexOf("border")&&(P[h]=$(P[h])),-1!==(f=c=Q(t,P[h],i,!1,"0px")).indexOf(" ")&&(f=(c=f.split(" "))[0],c=c[1]),p=u=l[h],d=parseFloat(f),y=f.substr((d+"").length),(x="="===p.charAt(1))?(_=parseInt(p.charAt(0)+"1",10),p=p.substr(2),_*=parseFloat(p),v=p.substr((_+"").length-(_<0?1:0))||""):(_=parseFloat(p),v=p.substr((_+"").length)),""===v&&(v=e[r]||y),v!==y&&(b=J(t,"borderLeft",d,y),T=J(t,"borderTop",d,y),"%"===v?(f=b/m*100+"%",c=T/g*100+"%"):"em"===v?(f=b/(w=J(t,"borderLeft",1,"em"))+"em",c=T/w+"em"):(f=b+"px",c=T+"px"),x&&(p=parseFloat(f)+_+v,u=parseFloat(c)+_+v)),o=xt(S,P[h],f+" "+c,p+" "+u,!1,"0px",o);return o},prefix:!0,formatter:_t("0px 0px 0px 0px",!1,!0)}),wt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,n,r,s,o){return xt(t.style,n,this.format(Q(t,n,i,!1,"0px 0px")),this.format(e),!1,"0px",s)},prefix:!0,formatter:_t("0px 0px",!1,!0)}),wt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,n,r,s,o){var a,l,h,u,c,f,p="background-position",_=i||K(t,null),m=this.format((_?d?_.getPropertyValue(p+"-x")+" "+_.getPropertyValue(p+"-y"):_.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(-1!==m.indexOf("%")!=(-1!==g.indexOf("%"))&&g.split(",").length<2&&(f=Q(t,"backgroundImage").replace(C,""))&&"none"!==f){for(a=m.split(" "),l=g.split(" "),j.setAttribute("src",f),h=2;--h>-1;)(u=-1!==(m=a[h]).indexOf("%"))!==(-1!==l[h].indexOf("%"))&&(c=0===h?t.offsetWidth-j.width:t.offsetHeight-j.height,a[h]=u?parseFloat(m)/100*c+"px":parseFloat(m)/c*100+"%");m=a.join(" ")}return this.parseComplex(t.style,m,g,s,o)},formatter:ot}),wt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:ot(-1===t.indexOf(" ")?t+" "+t:t)}}),wt("perspective",{defaultValue:"0px",prefix:!0}),wt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),wt("transformStyle",{prefix:!0}),wt("backfaceVisibility",{prefix:!0}),wt("userSelect",{prefix:!0}),wt("margin",{parser:mt("marginTop,marginRight,marginBottom,marginLeft")}),wt("padding",{parser:mt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),wt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,n,r,s,o){var a,l,h;return d<9?(l=t.currentStyle,h=d<8?" ":",",a="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(a=this.format(Q(t,this.p,i,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,s,o)}}),wt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),wt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),wt("border",{defaultValue:"0px solid #000",parser:function(t,e,n,r,s,o){var a=Q(t,"borderTopWidth",i,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(b,"");return"px"!==h&&(a=parseFloat(a)/J(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(a+" "+Q(t,"borderTopStyle",i,!1,"solid")+" "+Q(t,"borderTopColor",i,!1,"#000")),l.join(" "),s,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(dt)||["#000"])[0]}}),wt("borderWidth",{parser:mt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),wt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new vt(o,a,0,0,r,-1,i,!1,0,o[a],e)}});var Wt=function(t){var e,i=this.t,n=i.filter||Q(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(-1===n.indexOf("atrix(")&&-1===n.indexOf("radient(")&&-1===n.indexOf("oader(")?(i.removeAttribute("filter"),e=!Q(this.data,"filter")):(i.filter=n.replace(P,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),-1===n.indexOf("pacity")?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(T,"opacity="+r))};wt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,n,r,s,o){var a=parseFloat(Q(t,"opacity",i,!1,"1")),l=t.style,h="autoAlpha"===n;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),h&&1===a&&"hidden"===Q(t,"visibility",i)&&0!==e&&(a=0),V?s=new vt(l,"opacity",a,e-a,s):((s=new vt(l,"opacity",100*a,100*(e-a),s)).xn1=h?1:0,l.zoom=1,s.type=2,s.b="alpha(opacity="+s.s+")",s.e="alpha(opacity="+(s.s+s.c)+")",s.data=t,s.plugin=o,s.setRatio=Wt),h&&((s=new vt(l,"visibility",0,0,s,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",r._overwriteProps.push(s.n),r._overwriteProps.push(n)),s}});var Vt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(O,"-$1").toLowerCase())):t.removeAttribute(e))},Ht=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Vt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};wt("className",{parser:function(e,n,r,s,o,a,l){var h,u,c,f,p,d=e.getAttribute("class")||"",_=e.style.cssText;if((o=s._classNamePT=new vt(e,r,0,0,o,2)).setRatio=Ht,o.pr=-11,t=!0,o.b=d,u=et(e,i),c=e._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return e._gsClassPT=o,o.e="="!==n.charAt(1)?n:d.replace(new RegExp("(?:\\s|^)"+n.substr(2)+"(?![\\w-])"),"")+("+"===n.charAt(0)?" "+n.substr(2):""),e.setAttribute("class",o.e),h=it(e,u,et(e),l,f),e.setAttribute("class",d),o.data=h.firstMPT,e.style.cssText=_,o=o.xfirst=s.parse(e,h.difs,o,a)}});var qt=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,l=a.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(n=(e=this.e.split(" ").join("").split(",")).length;--n>-1;)i=e[n],a[i]&&(a[i].parse===l?r=!0:i="transformOrigin"===i?Rt:a[i].p),Vt(o,i);r&&(Vt(o,kt),(s=this.t._gsTransform)&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(wt("clearProps",{parser:function(e,i,n,r,s){return(s=new vt(e,n,0,0,s,2)).setRatio=qt,s.e=i,s.pr=-10,s.data=r._tween,t=!0,s}}),l="bezier,throwProps,physicsProps,physics2D".split(","),bt=l.length;bt--;)Pt(l[bt]);(l=s.prototype)._firstPT=l._lastParsedTransform=l._transform=null,l._onInitTween=function(n,o,l,f){if(!n.nodeType)return!1;this._target=_=n,this._tween=l,this._vars=o,m=f,h=o.autoRound,t=!1,e=o.suffixMap||s.suffixMap,i=K(n,""),r=this._overwriteProps;var d,g,v,y,x,b,T,P,S,O=n.style;if(u&&""===O.zIndex&&("auto"!==(d=Q(n,"zIndex",i))&&""!==d||this._addLazySet(O,"zIndex",0)),"string"==typeof o&&(y=O.cssText,d=et(n,i),O.cssText=y+";"+o,d=it(n,d,et(n)).difs,!V&&w.test(o)&&(d.opacity=parseFloat(RegExp.$1)),o=d,O.cssText=y),o.className?this._firstPT=g=a.className.parse(n,o.className,"className",this,null,null,o):this._firstPT=g=this.parse(n,o,null),this._transformType){for(S=3===this._transformType,kt?c&&(u=!0,""===O.zIndex&&("auto"!==(T=Q(n,"zIndex",i))&&""!==T||this._addLazySet(O,"zIndex",0)),p&&this._addLazySet(O,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(S?"visible":"hidden"))):O.zoom=1,v=g;v&&v._next;)v=v._next;P=new vt(n,"transform",0,0,null,2),this._linkCSSP(P,null,v),P.setRatio=kt?Ut:jt,P.data=this._transform||zt(n,i,!0),P.tween=l,P.pr=-1,r.pop()}if(t){for(;g;){for(b=g._next,v=y;v&&v.pr>g.pr;)v=v._next;(g._prev=v?v._prev:x)?g._prev._next=g:y=g,(g._next=v)?v._prev=g:x=g,g=b}this._firstPT=y}return!0},l.parse=function(t,n,r,s){var o,l,u,c,f,p,d,g,v,y,x=t.style;for(o in n){if("function"==typeof(p=n[o])&&(p=p(m,_)),l=a[o])r=l.parse(t,p,o,this,r,s,n);else{if("--"===o.substr(0,2)){this._tween._propLookup[o]=this._addTween.call(this._tween,t.style,"setProperty",K(t).getPropertyValue(o)+"",p+"",o,!1,o);continue}f=Q(t,o,i)+"",v="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||-1!==o.indexOf("Color")||v&&S.test(p)?(v||(p=((p=ft(p)).length>3?"rgba(":"rgb(")+p.join(",")+")"),r=xt(x,o,f,p,!0,"transparent",r,0,s)):v&&L.test(p)?r=xt(x,o,f,p,!0,null,r,0,s):(d=(u=parseFloat(f))||0===u?f.substr((u+"").length):"",""!==f&&"auto"!==f||("width"===o||"height"===o?(u=st(t,o,i),d="px"):"left"===o||"top"===o?(u=tt(t,o,i),d="px"):(u="opacity"!==o?0:1,d="")),(y=v&&"="===p.charAt(1))?(c=parseInt(p.charAt(0)+"1",10),p=p.substr(2),c*=parseFloat(p),g=p.replace(b,"")):(c=parseFloat(p),g=v?p.replace(b,""):""),""===g&&(g=o in e?e[o]:d),p=c||0===c?(y?c+u:c)+g:n[o],d!==g&&(""===g&&"lineHeight"!==o||(c||0===c)&&u&&(u=J(t,o,u,d),"%"===g?(u/=J(t,o,100,"%")/100,!0!==n.strictUnits&&(f=u+"%")):"em"===g||"rem"===g||"vw"===g||"vh"===g?u/=J(t,o,1,g):"px"!==g&&(c=J(t,o,c,g),g="px"),y&&(c||0===c)&&(p=c+u+g))),y&&(c+=u),!u&&0!==u||!c&&0!==c?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(r=new vt(x,o,c||u||0,0,r,-1,o,!1,0,f,p)).xs0="none"!==p||"display"!==o&&-1===o.indexOf("Style")?p:f:q("invalid "+o+" tween value: "+n[o]):(r=new vt(x,o,u,c-u,r,0,o,!1!==h&&("px"===g||"zIndex"===o),0,f,p)).xs0=g)}s&&r&&!r.plugin&&(r.plugin=s)}return r},l.setRatio=function(t){var e,i,n,r=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(e=r.c*t+r.s,r.r?e=r.r(e):e<1e-6&&e>-1e-6&&(e=0),r.type)if(1===r.type)if(2===(n=r.l))r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(e=r.r(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},l._enableTransforms=function(t){this._transform=this._transform||zt(this._target,i,!0),this._transformType=this._transform.svg&&St||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};l._addLazySet=function(t,e,i){var n=this._firstPT=new vt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},l._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},l._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},l._kill=function(t){var e,i,r,s=t;if(t.autoAlpha||t.alpha){for(i in s={},t)s[i]=t[i];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(t.className&&(e=this._classNamePT)&&((r=e.xfirst)&&r._prev?this._linkCSSP(r._prev,e._next,r._prev._prev):r===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,r._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return n.k.prototype._kill.call(this,s)};var Zt=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)Zt(t[r],e,i);else for(r=(n=t.childNodes).length;--r>-1;)o=(s=n[r]).type,s.style&&(e.push(et(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||Zt(s,e,i)};return s.cascadeTo=function(t,e,i){var r,s,o,a,l=n.m.to(t,e,i),h=[l],u=[],c=[],f=[],p=n.m._internals.reservedProps;for(t=l._targets||l.target,Zt(t,u,f),l.render(e,!0,!0),Zt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if((s=it(f[r],u[r],c[r])).firstMPT){for(o in s=s.difs,i)p[o]&&(s[o]=i[o]);for(o in a={},s)a[o]=u[r][o];h.push(n.m.fromTo(f[r],e,a,s))}return h},n.k.activate([s]),s},!0);const r=n.l.CSSPlugin},function(t,e,i){"use strict";i.r(e),i.d(e,"TimelineMax",function(){return s}),i.d(e,"default",function(){return s});var n=i(0),r=i(2);i.d(e,"TimelineLite",function(){return r.a}),
/*!
 * VERSION: 2.0.1
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
n.l._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(){var t=function(t){r.a.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},e=n.m._internals,i=e.lazyTweens,s=e.lazyRender,o=n.l._gsDefine.globals,a=new n.b(null,null,1,0),l=t.prototype=new r.a;return l.constructor=t,l.kill()._gc=!1,t.version="2.0.1",l.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),r.a.prototype.invalidate.call(this)},l.addCallback=function(t,e,i,r){return this.add(n.m.delayedCall(0,t,i,r),e)},l.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},l.removePause=function(t){return this.removeCallback(r.a._internals.pauseCallback,t)},l.tweenTo=function(t,e){e=e||{};var i,r,s,l={ease:a,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},h=e.repeat&&o.TweenMax||n.m;for(r in e)l[r]=e[r];return l.time=this._parseTimeOrLabel(t),i=Math.abs(Number(l.time)-this._time)/this._timeScale||.001,s=new h(this,i,l),l.onStart=function(){s.target.paused(!0),s.vars.time===s.target.time()||i!==s.duration()||s.isFromTo||s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale).render(s.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||s,e.onStartParams||[])},s},l.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var n=this.tweenTo(e,i);return n.isFromTo=1,n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},l.render=function(t,e,n){this._gc&&this._enabled(!0,!1);var r,o,a,l,h,u,c,f,p=this._time,d=this._dirty?this.totalDuration():this._totalDuration,_=this._duration,m=this._totalTime,g=this._startTime,v=this._timeScale,y=this._rawPrevTime,x=this._paused,b=this._cycle;if(p!==this._time&&(t+=this._time-p),t>=d-1e-7&&t>=0)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(o=!0,l="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||y<0||1e-10===y)&&y!==t&&this._first&&(h=!0,y>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:(this._time=_,t=_+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==p||0===_&&1e-10!==y&&(y>0||t<0&&y>=0)&&!this._locked)&&(l="onReverseComplete",o=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=o=!0,l="onReverseComplete"):y>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=_||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&o)for(r=this._first;r&&0===r._startTime;)r._duration||(o=!1),r=r._next;t=0,this._initted||(h=!0)}else if(0===_&&y<0&&(h=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(u=_+this._repeatDelay,this._cycle=this._totalTime/u>>0,0!==this._cycle&&this._cycle===this._totalTime/u&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*u,this._yoyo&&0!=(1&this._cycle)&&(this._time=_-this._time),this._time>_?(this._time=_,t=_+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if((t=this._time)>=p||this._repeat&&b!==this._cycle)for(r=this._first;r&&r._startTime<=t&&!c;)r._duration||"isPause"!==r.data||r.ratio||0===r._startTime&&0===this._rawPrevTime||(c=r),r=r._next;else for(r=this._last;r&&r._startTime>=t&&!c;)r._duration||"isPause"===r.data&&r._rawPrevTime>0&&(c=r),r=r._prev;c&&c._startTime<_&&(this._time=t=c._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var T=this._yoyo&&0!=(1&b),w=T===(this._yoyo&&0!=(1&this._cycle)),P=this._totalTime,S=this._cycle,O=this._rawPrevTime,k=this._time;if(this._totalTime=b*_,this._cycle<b?T=!T:this._totalTime+=_,this._time=p,this._rawPrevTime=0===_?y-1e-4:y,this._cycle=b,this._locked=!0,p=T?0:_,this.render(p,e,0===_),e||this._gc||this.vars.onRepeat&&(this._cycle=S,this._locked=!1,this._callback("onRepeat")),p!==this._time)return;if(w&&(this._cycle=b,this._locked=!0,p=T?_+1e-4:-1e-4,this.render(p,!0,!1)),this._locked=!1,this._paused&&!x)return;this._time=k,this._totalTime=P,this._cycle=S,this._rawPrevTime=O}if(this._time!==p&&this._first||n||h||c){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==m&&t>0&&(this._active=!0),0===m&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),(f=this._time)>=p)for(r=this._first;r&&(a=r._next,f===this._time&&(!this._paused||x));)(r._active||r._startTime<=this._time&&!r._paused&&!r._gc)&&(c===r&&this.pause(),r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,n):r.render((t-r._startTime)*r._timeScale,e,n)),r=a;else for(r=this._last;r&&(a=r._prev,f===this._time&&(!this._paused||x));){if(r._active||r._startTime<=p&&!r._paused&&!r._gc){if(c===r){for(c=r._prev;c&&c.endTime()>this._time;)c.render(c._reversed?c.totalDuration()-(t-c._startTime)*c._timeScale:(t-c._startTime)*c._timeScale,e,n),c=c._prev;c=null,this.pause()}r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,n):r.render((t-r._startTime)*r._timeScale,e,n)}r=a}this._onUpdate&&(e||(i.length&&s(),this._callback("onUpdate"))),l&&(this._locked||this._gc||g!==this._startTime&&v===this._timeScale||(0===this._time||d>=this.totalDuration())&&(o&&(i.length&&s(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},l.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],o=this.getChildren(t,e,i),a=0,l=o.length;for(n=0;n<l;n++)(r=o[n]).isActive()&&(s[a++]=r);return s},l.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},l.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},l.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},l.invalidate=function(){return this._locked=!1,r.a.prototype.invalidate.call(this)},l.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},l.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},l.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(r.a.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},l.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},l.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},l.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},l.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},l.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},t},!0);const s=n.l.TimelineMax},function(t,e,i){"use strict";i.d(e,"a",function(){return n});
/*!
 * VERSION: 0.6.1
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
const n=i(0).l._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,n){var r,s;if("function"!=typeof t.setAttribute)return!1;for(r in e)"function"==typeof(s=e[r])&&(s=s(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",s+"",r,!1,r),this._overwriteProps.push(r);return!0}})},function(t,e,i){"use strict";i.d(e,"a",function(){return m});var n=i(0),r=180/Math.PI,s=[],o=[],a=[],l={},h=n.l._gsDefine.globals,u=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},c=function(t,e,i,n){var r={a:t},s={},o={},a={c:n},l=(t+e)/2,h=(e+i)/2,u=(i+n)/2,c=(l+h)/2,f=(h+u)/2,p=(f-c)/8;return r.b=l+(t-l)/4,s.b=c+p,r.c=s.a=(r.b+s.b)/2,s.c=o.a=(c+f)/2,o.b=f-p,a.b=u+(n-u)/4,o.c=a.a=(o.b+a.b)/2,[r,s,o,a]},f=function(t,e,i,n,r){var l,h,u,f,p,d,_,m,g,v,y,x,b,T=t.length-1,w=0,P=t[0].a;for(l=0;l<T;l++)h=(p=t[w]).a,u=p.d,f=t[w+1].d,r?(y=s[l],b=((x=o[l])+y)*e*.25/(n?.5:a[l]||.5),m=u-((d=u-(u-h)*(n?.5*e:0!==y?b/y:0))+(((_=u+(f-u)*(n?.5*e:0!==x?b/x:0))-d)*(3*y/(y+x)+.5)/4||0))):m=u-((d=u-(u-h)*e*.5)+(_=u+(f-u)*e*.5))/2,d+=m,_+=m,p.c=g=d,p.b=0!==l?P:P=p.a+.6*(p.c-p.a),p.da=u-h,p.ca=g-h,p.ba=P-h,i?(v=c(h,P,g,u),t.splice(w,1,v[0],v[1],v[2],v[3]),w+=4):w++,P=_;(p=t[w]).b=P,p.c=P+.4*(p.d-P),p.da=p.d-p.a,p.ca=p.c-p.a,p.ba=P-p.a,i&&(v=c(p.a,P,p.c,p.d),t.splice(w,1,v[0],v[1],v[2],v[3]))},p=function(t,e,i,n){var r,a,l,h,c,f,p=[];if(n)for(a=(t=[n].concat(t)).length;--a>-1;)"string"==typeof(f=t[a][e])&&"="===f.charAt(1)&&(t[a][e]=n[e]+Number(f.charAt(0)+f.substr(2)));if((r=t.length-2)<0)return p[0]=new u(t[0][e],0,0,t[0][e]),p;for(a=0;a<r;a++)l=t[a][e],h=t[a+1][e],p[a]=new u(l,0,0,h),i&&(c=t[a+2][e],s[a]=(s[a]||0)+(h-l)*(h-l),o[a]=(o[a]||0)+(c-h)*(c-h));return p[a]=new u(t[a][e],0,0,t[a+1][e]),p},d=function(t,e,i,n,r,h){var u,c,d,_,m,g,v,y,x={},b=[],T=h||t[0];for(c in r="string"==typeof r?","+r+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])b.push(c);if(t.length>1){for(y=t[t.length-1],v=!0,u=b.length;--u>-1;)if(c=b[u],Math.abs(T[c]-y[c])>.05){v=!1;break}v&&(t=t.concat(),h&&t.unshift(h),t.push(t[1]),h=t[t.length-3])}for(s.length=o.length=a.length=0,u=b.length;--u>-1;)c=b[u],l[c]=-1!==r.indexOf(","+c+","),x[c]=p(t,c,l[c],h);for(u=s.length;--u>-1;)s[u]=Math.sqrt(s[u]),o[u]=Math.sqrt(o[u]);if(!n){for(u=b.length;--u>-1;)if(l[c])for(g=(d=x[b[u]]).length-1,_=0;_<g;_++)m=d[_+1].da/o[_]+d[_].da/s[_]||0,a[_]=(a[_]||0)+m*m;for(u=a.length;--u>-1;)a[u]=Math.sqrt(a[u])}for(u=b.length,_=i?4:1;--u>-1;)d=x[c=b[u]],f(d,e,i,n,l[c]),v&&(d.splice(0,_),d.splice(d.length-_,_));return x},_=function(t,e,i){for(var n,r,s,o,a,l,h,u,c,f,p,d=1/i,_=t.length;--_>-1;)for(s=(f=t[_]).a,o=f.d-s,a=f.c-s,l=f.b-s,n=r=0,u=1;u<=i;u++)n=r-(r=((h=d*u)*h*o+3*(c=1-h)*(h*a+c*l))*h),e[p=_*i+u-1]=(e[p]||0)+n*n},m=n.l._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,o,a,l=e.values||[],h={},c=l[0],f=e.autoRotate||i.vars.orientToBezier;for(n in this._autoRotate=f?f instanceof Array?f:[["x","y","rotation",!0===f?0:Number(f)||0]]:null,c)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],h[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||h[n]!==l[0][n]&&(a=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?d(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):function(t,e,i){var n,r,s,o,a,l,h,c,f,p,d,_={},m="cubic"===(e=e||"soft")?3:2,g="soft"===e,v=[];if(g&&i&&(t=[i].concat(t)),null==t||t.length<m+1)throw"invalid Bezier data";for(f in t[0])v.push(f);for(l=v.length;--l>-1;){for(_[f=v[l]]=a=[],p=0,c=t.length,h=0;h<c;h++)n=null==i?t[h][f]:"string"==typeof(d=t[h][f])&&"="===d.charAt(1)?i[f]+Number(d.charAt(0)+d.substr(2)):Number(d),g&&h>1&&h<c-1&&(a[p++]=(n+a[p-2])/2),a[p++]=n;for(c=p-m+1,p=0,h=0;h<c;h+=m)n=a[h],r=a[h+1],s=a[h+2],o=2===m?0:a[h+3],a[p++]=d=3===m?new u(n,r,s,o):new u(n,(2*r+n)/3,(2*r+s)/3,s);a.length=p}return _}(l,e.type,h),this._segCount=this._beziers[n].length,this._timeRes){var p=function(t,e){var i,n,r,s,o=[],a=[],l=0,h=0,u=(e=e>>0||6)-1,c=[],f=[];for(i in t)_(t[i],o,e);for(r=o.length,n=0;n<r;n++)l+=Math.sqrt(o[n]),f[s=n%e]=l,s===u&&(h+=l,c[s=n/e>>0]=f,a[s]=h,l=0,f=[]);return{length:h,lengths:a,segments:c}}(this._beziers,this._timeRes);this._length=p.length,this._lengths=p.lengths,this._segments=p.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(f=this._autoRotate)for(this._initialRotations=[],f[0]instanceof Array||(this._autoRotate=f=[f]),s=f.length;--s>-1;){for(o=0;o<3;o++)n=f[s][o],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=f[s][2],this._initialRotations[s]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,n,s,o,a,l,h,u,c,f=this._segCount,p=this._func,d=this._target,_=t!==this._startRatio;if(this._timeRes){if(u=this._lengths,c=this._curSeg,t*=this._length,n=this._li,t>this._l2&&n<f-1){for(h=f-1;n<h&&(this._l2=u[++n])<=t;);this._l1=u[n-1],this._li=n,this._curSeg=c=this._segments[n],this._s2=c[this._s1=this._si=0]}else if(t<this._l1&&n>0){for(;n>0&&(this._l1=u[--n])>=t;);0===n&&t<this._l1?this._l1=0:n++,this._l2=u[n],this._li=n,this._curSeg=c=this._segments[n],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(e=n,t-=this._l1,n=this._si,t>this._s2&&n<c.length-1){for(h=c.length-1;n<h&&(this._s2=c[++n])<=t;);this._s1=c[n-1],this._si=n}else if(t<this._s1&&n>0){for(;n>0&&(this._s1=c[--n])>=t;);0===n&&t<this._s1?this._s1=0:n++,this._s2=c[n],this._si=n}a=(n+(t-this._s1)/(this._s2-this._s1))*this._prec||0}else a=(t-(e=t<0?0:t>=1?f-1:f*t>>0)*(1/f))*f;for(i=1-a,n=this._props.length;--n>-1;)s=this._props[n],l=(a*a*(o=this._beziers[s][e]).da+3*i*(a*o.ca+i*o.ba))*a+o.a,this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l;if(this._autoRotate){var m,g,v,y,x,b,T,w=this._autoRotate;for(n=w.length;--n>-1;)s=w[n][2],b=w[n][3]||0,T=!0===w[n][4]?1:r,o=this._beziers[w[n][0]],m=this._beziers[w[n][1]],o&&m&&(o=o[e],m=m[e],g=o.a+(o.b-o.a)*a,g+=((y=o.b+(o.c-o.b)*a)-g)*a,y+=(o.c+(o.d-o.c)*a-y)*a,v=m.a+(m.b-m.a)*a,v+=((x=m.b+(m.c-m.b)*a)-v)*a,x+=(m.c+(m.d-m.c)*a-x)*a,l=_?Math.atan2(x-v,y-g)*T+b:this._initialRotations[n],this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l)}}}),g=m.prototype;
/*!
 * VERSION: 1.3.8
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/m.bezierThrough=d,m.cubicToQuadratic=c,m._autoCSS=!0,m.quadraticToCubic=function(t,e,i){return new u(t,(2*e+t)/3,(2*e+i)/3,i)},m._cssRegister=function(){var t=h.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,o,a,l){e instanceof Array&&(e={values:e}),l=new m;var h,u,c,f=e.values,p=f.length-1,d=[],_={};if(p<0)return a;for(h=0;h<=p;h++)c=i(t,f[h],o,a,l,p!==h),d[h]=c.end;for(u in e)_[u]=e[u];return _.values=d,(a=new r(t,"bezier",0,0,c.pt,2)).data=c,a.plugin=l,a.setRatio=n,0===_.autoRotate&&(_.autoRotate=!0),!_.autoRotate||_.autoRotate instanceof Array||(h=!0===_.autoRotate?0:Number(_.autoRotate),_.autoRotate=null!=c.end.left?[["left","top","rotation",h,!1]]:null!=c.end.x&&[["x","y","rotation",h,!1]]),_.autoRotate&&(o._transform||o._enableTransforms(!1),c.autoRotate=o._target._gsTransform,c.proxy.rotation=c.autoRotate.rotation||0,o._overwriteProps.push("rotation")),l._onInitTween(c.proxy,_,o._tween),a}})}},g._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)(e=t[i[n]])&&"function"==typeof e&&(this._mod[i[n]]=e)},g._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)}},function(t,e,i){"use strict";i.d(e,"a",function(){return n});
/*!
 * VERSION: 1.6.0
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
const n=i(0).l._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),r=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(i){return(Math.round(i/t)*t*e|0)/e}},s=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},o=n.prototype;o._onInitAllProps=function(){var t,e,i,n,o=this._tween,a=o.vars.roundProps,l={},h=o._propLookup.roundProps;if("object"!=typeof a||a.push)for("string"==typeof a&&(a=a.split(",")),i=a.length;--i>-1;)l[a[i]]=Math.round;else for(n in a)l[n]=r(a[n]);for(n in l)for(t=o._firstPT;t;)e=t._next,t.pg?t.t._mod(l):t.n===n&&(2===t.f&&t.t?s(t.t._firstPT,l[n]):(this._add(t.t,n,t.s,t.c,l[n]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:o._firstPT===t&&(o._firstPT=e),t._next=t._prev=null,o._propLookup[n]=h)),t=e;return!1},o._add=function(t,e,i,n,r){this._addTween(t,e,i,i+n,e,r||Math.round),this._overwriteProps.push(e)}},function(t,e,i){"use strict";i.d(e,"a",function(){return n});
/*!
 * VERSION: 0.3.1
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
const n=i(0).l._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,s,o,a,l,h,u=!0===e.useRadians?2*Math.PI:360;for(r in e)"useRadians"!==r&&("function"==typeof(a=e[r])&&(a=a(n,t)),s=(h=(a+"").split("_"))[0],o=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),l=(a=this.finals[r]="string"==typeof s&&"="===s.charAt(1)?o+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0)-o,h.length&&(-1!==(s=h.join("_")).indexOf("short")&&(l%=u)!==l%(u/2)&&(l=l<0?l+u:l-u),-1!==s.indexOf("_cw")&&l<0?l=(l+9999999999*u)%u-(l/u|0)*u:-1!==s.indexOf("ccw")&&l>0&&(l=(l-9999999999*u)%u-(l/u|0)*u)),(l>1e-6||l<-1e-6)&&(this._addTween(t,r,o,o+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}});n._autoCSS=!0},function(t,e,i){"use strict";i.r(e);var n=i(0);
/*!
 * VERSION: 2.0.1
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/n.l._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(){var t=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},e=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},i=function(t,e,r){n.m.call(this,t,e,r),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=i.prototype.render},r=n.m._internals,s=r.isSelector,o=r.isArray,a=i.prototype=n.m.to({},.1,{}),l=[];i.version="2.0.1",a.constructor=i,a.kill()._gc=!1,i.killTweensOf=i.killDelayedCallsTo=n.m.killTweensOf,i.getTweensOf=n.m.getTweensOf,i.lagSmoothing=n.m.lagSmoothing,i.ticker=n.m.ticker,i.render=n.m.render,a.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),n.m.prototype.invalidate.call(this)},a.updateTo=function(t,e){var i,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;for(i in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[i]=t[i];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&n.m._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var o=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(o,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var a,l=1/(1-r),h=this._firstPT;h;)a=h.s+h.c,h.c*=l,h.s=a-h.c,h=h._next;return this},a.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var s,o,a,l,h,u,c,f,p,d=this._dirty?this.totalDuration():this._totalDuration,_=this._time,m=this._totalTime,g=this._cycle,v=this._duration,y=this._rawPrevTime;if(t>=d-1e-7&&t>=0?(this._totalTime=d,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=v,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(s=!0,o="onComplete",i=i||this._timeline.autoRemoveChildren),0===v&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(y<0||t<=0&&t>=-1e-7||1e-10===y&&"isPause"!==this.data)&&y!==t&&(i=!0,y>1e-10&&(o="onReverseComplete")),this._rawPrevTime=f=!e||t||y===t?t:1e-10)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==m||0===v&&y>0)&&(o="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===v&&(this._initted||!this.vars.lazy||i)&&(y>=0&&(i=!0),this._rawPrevTime=f=!e||t||y===t?t:1e-10)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=v+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=v-this._time,(p=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==p||this._initted?this._yoyoEase=p=!0===p?this._ease:p instanceof n.b?p:n.b.map[p]:(p=this.vars.ease,this._yoyoEase=p=p?p instanceof n.b?p:"function"==typeof p?new n.b(p,this.vars.easeParams):n.b.map[p]||n.m.defaultEase:n.m.defaultEase)),this.ratio=p?1-p.getRatio((v-this._time)/v):0)),this._time>v?this._time=v:this._time<0&&(this._time=0)),this._easeType&&!p?(h=this._time/v,u=this._easeType,c=this._easePower,(1===u||3===u&&h>=.5)&&(h=1-h),3===u&&(h*=2),1===c?h*=h:2===c?h*=h*h:3===c?h*=h*h*h:4===c&&(h*=h*h*h*h),1===u?this.ratio=1-h:2===u?this.ratio=h:this._time/v<.5?this.ratio=h/2:this.ratio=1-h/2):p||(this.ratio=this._ease.getRatio(this._time/v))),_!==this._time||i||g!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=_,this._totalTime=m,this._rawPrevTime=y,this._cycle=g,r.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||s||p?s&&this._ease._calcEnd&&!p&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/v)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==_&&t>=0&&(this._active=!0),0===m&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,!0,i):o||(o="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==v||e||this._callback("onStart"))),a=this._firstPT;a;)a.f?a.t[a.p](a.c*this.ratio+a.s):a.t[a.p]=a.c*this.ratio+a.s,a=a._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,i),e||(this._totalTime!==m||o)&&this._callback("onUpdate")),this._cycle!==g&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),o&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[o]&&this._callback(o),0===v&&1e-10===this._rawPrevTime&&1e-10!==f&&(this._rawPrevTime=0)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},i.to=function(t,e,n){return new i(t,e,n)},i.from=function(t,e,n){return n.runBackwards=!0,n.immediateRender=0!=n.immediateRender,new i(t,e,n)},i.fromTo=function(t,e,n,r){return r.startAt=n,r.immediateRender=0!=r.immediateRender&&0!=n.immediateRender,new i(t,e,r)},i.staggerTo=i.allTo=function(r,a,h,u,c,f,p){u=u||0;var d,_,m,g,v=0,y=[],x=function(){h.onComplete&&h.onComplete.apply(h.onCompleteScope||this,arguments),c.apply(p||h.callbackScope||this,f||l)},b=h.cycle,T=h.startAt&&h.startAt.cycle;for(o(r)||("string"==typeof r&&(r=n.m.selector(r)||r),s(r)&&(r=t(r))),r=r||[],u<0&&((r=t(r)).reverse(),u*=-1),d=r.length-1,m=0;m<=d;m++){for(g in _={},h)_[g]=h[g];if(b&&(e(_,r,m),null!=_.duration&&(a=_.duration,delete _.duration)),T){for(g in T=_.startAt={},h.startAt)T[g]=h.startAt[g];e(_.startAt,r,m)}_.delay=v+(_.delay||0),m===d&&c&&(_.onComplete=x),y[m]=new i(r[m],a,_),v+=u}return y},i.staggerFrom=i.allFrom=function(t,e,n,r,s,o,a){return n.runBackwards=!0,n.immediateRender=0!=n.immediateRender,i.staggerTo(t,e,n,r,s,o,a)},i.staggerFromTo=i.allFromTo=function(t,e,n,r,s,o,a,l){return r.startAt=n,r.immediateRender=0!=r.immediateRender&&0!=n.immediateRender,i.staggerTo(t,e,r,s,o,a,l)},i.delayedCall=function(t,e,n,r,s){return new i(e,0,{delay:t,onComplete:e,onCompleteParams:n,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:n,immediateRender:!1,useFrames:s,overwrite:0})},i.set=function(t,e){return new i(t,0,e)},i.isTweening=function(t){return n.m.getTweensOf(t,!0).length>0};var h=function(t,e){for(var i=[],r=0,s=t._first;s;)s instanceof n.m?i[r++]=s:(e&&(i[r++]=s),r=(i=i.concat(h(s,e))).length),s=s._next;return i},u=i.getAllTweens=function(t){return h(n.a._rootTimeline,t).concat(h(n.a._rootFramesTimeline,t))};i.killAll=function(t,e,i,r){null==e&&(e=!0),null==i&&(i=!0);var s,o,a,l=u(0!=r),h=l.length,c=e&&i&&r;for(a=0;a<h;a++)o=l[a],(c||o instanceof n.j||(s=o.target===o.vars.onComplete)&&i||e&&!s)&&(t?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},i.killChildTweensOf=function(e,a){if(null!=e){var l,h,u,c,f,p=r.tweenLookup;if("string"==typeof e&&(e=n.m.selector(e)||e),s(e)&&(e=t(e)),o(e))for(c=e.length;--c>-1;)i.killChildTweensOf(e[c],a);else{for(u in l=[],p)for(h=p[u].target.parentNode;h;)h===e&&(l=l.concat(p[u].tweens)),h=h.parentNode;for(f=l.length,c=0;c<f;c++)a&&l[c].totalTime(l[c].totalDuration()),l[c]._enabled(!1,!1)}}};var c=function(t,e,i,r){e=!1!==e,i=!1!==i;for(var s,o,a=u(r=!1!==r),l=e&&i&&r,h=a.length;--h>-1;)o=a[h],(l||o instanceof n.j||(s=o.target===o.vars.onComplete)&&i||e&&!s)&&o.paused(t)};return i.pauseAll=function(t,e,i){c(!0,t,e,i)},i.resumeAll=function(t,e,i){c(!1,t,e,i)},i.globalTimeScale=function(t){var e=n.a._rootTimeline,i=n.m.ticker.time;return arguments.length?(t=t||1e-10,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=n.a._rootFramesTimeline,i=n.m.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=n.a._rootTimeline._timeScale=t,t):e._timeScale},a.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},a.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},a.duration=function(t){return arguments.length?n.a.prototype.duration.call(this,t):this._duration},a.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},a.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},a.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},a.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},i},!0);const r=n.l.TweenMax;var s=i(3),o=i(5),a=i(7),l=i(8),h=i(2),u=i(4),c=i(6),f=i(1);i.d(e,"TweenMax",function(){return p}),i.d(e,"default",function(){return p}),i.d(e,"TweenLite",function(){return n.m}),i.d(e,"TimelineLite",function(){return h.a}),i.d(e,"TimelineMax",function(){return u.default}),i.d(e,"CSSPlugin",function(){return s.a}),i.d(e,"AttrPlugin",function(){return o.a}),i.d(e,"BezierPlugin",function(){return c.a}),i.d(e,"DirectionalRotationPlugin",function(){return l.a}),i.d(e,"RoundPropsPlugin",function(){return a.a}),i.d(e,"TweenPlugin",function(){return n.k}),i.d(e,"Ease",function(){return n.b}),i.d(e,"Power0",function(){return n.e}),i.d(e,"Power1",function(){return n.f}),i.d(e,"Power2",function(){return n.g}),i.d(e,"Power3",function(){return n.h}),i.d(e,"Power4",function(){return n.i}),i.d(e,"Linear",function(){return n.d}),i.d(e,"Back",function(){return f.a}),i.d(e,"Elastic",function(){return f.d}),i.d(e,"Bounce",function(){return f.b}),i.d(e,"RoughEase",function(){return f.g}),i.d(e,"SlowMo",function(){return f.i}),i.d(e,"SteppedEase",function(){return f.j}),i.d(e,"Circ",function(){return f.c}),i.d(e,"Expo",function(){return f.e}),i.d(e,"Sine",function(){return f.h}),i.d(e,"ExpoScaleEase",function(){return f.f});
/*!
 * VERSION: 2.0.1
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
const p=r;p._autoActivated=[h.a,u.default,s.a,o.a,c.a,a.a,l.a,f.a,f.d,f.b,f.g,f.i,f.j,f.c,f.e,f.h,f.f]},function(t,e,i){i(11),t.exports=i(17)},function(t,e,i){"use strict";var n=o(i(9)),r=o(i(4)),s=(o(i(14)),o(i(15)));function o(t){return t&&t.__esModule?t:{default:t}}new(i(16))({init:"solid",transitions:[{name:"melt",from:"solid",to:"liquid"},{name:"freeze",from:"liquid",to:"solid"},{name:"vaporize",from:"liquid",to:"gas"},{name:"condense",from:"gas",to:"liquid"}],methods:{onMelt:function(){console.log("I melted")},onFreeze:function(){console.log("I froze")},onVaporize:function(){console.log("I vaporized")},onCondense:function(){console.log("I condensed")}}});var a=document.querySelector("#gameBox"),l=document.querySelector("#orientation"),h=document.querySelector(".elements .gift"),u=document.querySelector("#gameBox .catcher"),c=document.querySelector("#score"),f=document.querySelector("#startBtn"),p=document.querySelector("#pauseBtn"),d=document.querySelector("#stopBtn"),_=document.querySelector("#resetBtn"),m=[1e3,800,600,400,200],g=0,v=new r.default({delay:.5,onStart:function(){console.log("timeLineOnStart"),f.disabled=!0,p.disabled=!1,d.disabled=!0,_.disabled=!1},onComplete:function(){console.log("timeLineOnComplete"),P(),R(),T(),f.disabled=!1,p.disabled=!0,d.disabled=!0,_.disabled=!0}}),y=function(t){var e=h.cloneNode();e.dataset.point=t,a.append(e);var i=a.clientWidth-40,r=A(40,i),o=(a.clientWidth,A(2,4)),l=A(0,55);return v.fromTo(e,o,{x:r,y:0},{y:"+="+i,ease:Power0.easeNone,onComplete:function(){e.remove()},onUpdate:function(){!function(t){s.default.hitTest(u,t)&&(g+=parseInt(t.dataset.point,10),c.textContent=g.toString(),n.default.killTweensOf(t),t.remove())}(e)}},l),e},x=function(t){var e=t.alpha,i=t.beta,n=t.gamma,r={alpha:Math.round(e),beta:Math.round(i),gamma:Math.round(n)};r.gamma>5?k(20):r.gamma<5&&k(-20),l.innerHTML=JSON.stringify(r),console.log(r)},b=function(){window.DeviceOrientationEvent?window.addEventListener("deviceorientation",x,!1):(console.log("not support orientation"),l.innerHTML="not support orientation")},T=function(){window.DeviceOrientationEvent&&window.removeEventListener("deviceorientation",x,!1)},w=function(){v.clear(),g=0,c.textContent=g.toString(),S(),D(function(t,e){var i=[],n=0;do{(n=t[M(0,t.length-1)]||0)>t[0]&&(t.shift(),console.log("shift: "+t)),n<=e&&(e-=n,i.push(n))}while(e>0);return i}(m,2e4)).forEach(function(t,e){y(t)}),v.play(0)},P=function(t){a.querySelectorAll(".gift").forEach(function(t,e){a.removeChild(t)}),"function"==typeof t&&t()},S=function(){n.default.set(u,{x:a.clientWidth/2-u.clientWidth/2,y:a.clientHeight-u.clientHeight-40})},O=function(t){t.keyCode&&39===t.which&&k(80),t.keyCode&&37===t.which&&k(-80)},k=function(t){if(0===t)return!1;var e=a.clientWidth-u.clientWidth,i=0;t>0&&(i=u._gsTransform.x+t>e?e:u._gsTransform.x+t),t<0&&(i=u._gsTransform.x+t<0?0:u._gsTransform.x+t),n.default.to(u,.3,{x:i})},C=function(){console.log("addkeyDownEvent"),document.addEventListener("keydown",O)},R=function(){console.log("removekeyDownEvent"),document.removeEventListener("keydown",O)},M=function(t,e){return Math.round(Math.random()*(e-t)+t)},A=function(t,e){return Math.random()*(e-t)+t},D=function(t){for(var e=t.length-1;e>0;e--){var i=Math.floor(Math.random()*(e+1)),n=[t[i],t[e]];t[e]=n[0],t[i]=n[1]}return t},E=function(){v._time>=v.endTime()||0===v._time?(console.log("click to start"),P(w)):v.play(),f.disabled=!0,p.disabled=!1,d.disabled=!1,_.disabled=!1,C(),b()},L=function(){v.paused(!0),f.disabled=!1,p.disabled=!0,_.disabled=!1,R(),T()},N=function(){v.stop(!0),P(),g=0,f.disabled=!1,p.disabled=!0,d.disabled=!0,_.disabled=!0,R(),T()},F=function(){console.log("click to reset"),P(w),f.disabled=!0,p.disabled=!0,d.disabled=!0,p.disabled=!1,R(),C(),T(),b()};f.addEventListener("click",E),f.addEventListener("touchend",E),p.addEventListener("click",L),p.addEventListener("touchend",L),d.addEventListener("click",N),d.addEventListener("touchend",N),_.addEventListener("click",F),_.addEventListener("touchend",F),f.disabled=!1},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";i.r(e);var n=i(0);i.d(e,"TweenLite",function(){return n.m}),i.d(e,"TweenPlugin",function(){return n.k}),i.d(e,"Ease",function(){return n.b}),i.d(e,"Power0",function(){return n.e}),i.d(e,"Power1",function(){return n.f}),i.d(e,"Power2",function(){return n.g}),i.d(e,"Power3",function(){return n.h}),i.d(e,"Power4",function(){return n.i}),i.d(e,"Linear",function(){return n.d}),i.d(e,"_gsScope",function(){return n.l});var r=i(2);i.d(e,"TimelineLite",function(){return r.a});var s=i(4);i.d(e,"TimelineMax",function(){return s.default});var o=i(9);i.d(e,"default",function(){return o.default}),i.d(e,"TweenMax",function(){return o.default});var a=i(3);i.d(e,"CSSPlugin",function(){return a.a});var l=i(5);i.d(e,"AttrPlugin",function(){return l.a});var h=i(7);i.d(e,"RoundPropsPlugin",function(){return h.a});var u=i(8);i.d(e,"DirectionalRotationPlugin",function(){return u.a});var c=i(6);i.d(e,"BezierPlugin",function(){return c.a});var f=i(1);i.d(e,"Back",function(){return f.a}),i.d(e,"Elastic",function(){return f.d}),i.d(e,"Bounce",function(){return f.b}),i.d(e,"RoughEase",function(){return f.g}),i.d(e,"SlowMo",function(){return f.i}),i.d(e,"SteppedEase",function(){return f.j}),i.d(e,"Circ",function(){return f.c}),i.d(e,"Expo",function(){return f.e}),i.d(e,"Sine",function(){return f.h}),i.d(e,"ExpoScaleEase",function(){return f.f})},function(t,e,i){"use strict";i.r(e),i.d(e,"Draggable",function(){return s}),i.d(e,"default",function(){return s});var n=i(0),r=i(3);
/*!
 * VERSION: 0.16.4
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * Requires TweenLite and CSSPlugin version 1.17.0 or later (TweenMax contains both TweenLite and CSSPlugin). ThrowPropsPlugin is required for momentum-based continuation of movement after the mouse/touch is released (ThrowPropsPlugin is a membership benefit of Club GreenSock - http://greensock.com/club/).
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
n.l._gsDefine("utils.Draggable",["events.EventDispatcher","TweenLite","plugins.CSSPlugin"],function(){var t,e,i,s,o,a,l,h={css:{},data:"_draggable"},u={css:{},data:"_draggable"},c={css:{},data:"_draggable"},f={css:{}},p=n.l._gsDefine.globals,d={},_={style:{}},m=n.l.document||{createElement:function(){return _}},g=m.documentElement||{},v=function(t){return m.createElementNS?m.createElementNS("http://www.w3.org/1999/xhtml",t):m.createElement(t)},y=v("div"),x=[],b=function(){return!1},T=180/Math.PI,w=999999999999999,P=Date.now||function(){return(new Date).getTime()},S=!(m.addEventListener||!m.all),O=m.createElement("div"),k=[],C={},R=0,M=/^(?:a|input|textarea|button|select)$/i,A=0,D=n.l.navigator&&-1!==n.l.navigator.userAgent.toLowerCase().indexOf("android"),E=0,L={},N={},F=function(t,e){var i,n={};if(e)for(i in t)n[i]=t[i]*e;else for(i in t)n[i]=t[i];return n},X=function(){for(var t=k.length;--t>-1;)k[t]()},B=function(t){for(var e=k.length;--e>-1;)k[e]===t&&k.splice(e,1);n.m.to(I,0,{overwrite:"all",delay:15,onComplete:I,data:"_draggable"})},I=function(){k.length||n.m.ticker.removeEventListener("tick",X)},Y=function(){return null!=window.pageYOffset?window.pageYOffset:null!=m.scrollTop?m.scrollTop:g.scrollTop||m.body.scrollTop||0},z=function(){return null!=window.pageXOffset?window.pageXOffset:null!=m.scrollLeft?m.scrollLeft:g.scrollLeft||m.body.scrollLeft||0},j=function(t,e){Ot(t,"scroll",e),W(t.parentNode)||j(t.parentNode,e)},U=function(t,e){kt(t,"scroll",e),W(t.parentNode)||U(t.parentNode,e)},W=function(t){return!(t&&t!==g&&t!==m&&t!==m.body&&t!==window&&t.nodeType&&t.parentNode)},V=function(t,e){var i="x"===e?"Width":"Height",n="scroll"+i,r="client"+i,s=m.body;return Math.max(0,W(t)?Math.max(g[n],s[n])-(window["inner"+i]||g[r]||s[r]):t[n]-t[r])},H=function(t){var e=W(t),i=V(t,"x"),n=V(t,"y");e?t=N:H(t.parentNode),t._gsMaxScrollX=i,t._gsMaxScrollY=n,t._gsScrollX=t.scrollLeft||0,t._gsScrollY=t.scrollTop||0},q=function(t,e){return t=t||window.event,d.pageX=t.clientX+m.body.scrollLeft+g.scrollLeft,d.pageY=t.clientY+m.body.scrollTop+g.scrollTop,e&&(t.returnValue=!1),d},G=function(t){return t?("string"==typeof t&&(t=n.m.selector(t)),t.length&&t!==window&&t[0]&&t[0].style&&!t.nodeType&&(t=t[0]),t===window||t.nodeType&&t.style?t:null):t},Z=function(t,e){var i,n,r,s=t.style;if(void 0===s[e]){for(r=["O","Moz","ms","Ms","Webkit"],n=5,i=e.charAt(0).toUpperCase()+e.substr(1);--n>-1&&void 0===s[r[n]+i];);if(n<0)return"";e=(3===n?"ms":r[n])+i}return e},$=function(t,e,i){var n=t.style;n&&(void 0===n[e]&&(e=Z(t,e)),null==i?n.removeProperty?n.removeProperty(e.replace(/([A-Z])/g,"-$1").toLowerCase()):n.removeAttribute(e):void 0!==n[e]&&(n[e]=i))},K=m.defaultView?m.defaultView.getComputedStyle:b,Q=/(?:Left|Right|Width)/i,J=/(?:\d|\-|\+|=|#|\.)*/g,tt=function(t,e,i,n,r){if("px"===n||!n)return i;if("auto"===n||!i)return 0;var s,o=Q.test(e),a=t,l=y.style,h=i<0;return h&&(i=-i),"%"===n&&-1!==e.indexOf("border")?s=i/100*(o?t.clientWidth:t.clientHeight):(l.cssText="border:0 solid red;position:"+et(t,"position",!0)+";line-height:0;","%"!==n&&a.appendChild?l[o?"borderLeftWidth":"borderTopWidth"]=i+n:(a=t.parentNode||m.body,l[o?"width":"height"]=i+n),a.appendChild(y),s=parseFloat(y[o?"offsetWidth":"offsetHeight"]),a.removeChild(y),0!==s||r||(s=tt(t,e,i,n,!0))),h?-s:s},et=function(t,e,i){var n,r=(t._gsTransform||{})[e];return r||0===r?r:(t.style[e]?r=t.style[e]:(n=K(t))?r=(r=n.getPropertyValue(e.replace(/([A-Z])/g,"-$1").toLowerCase()))||n.length?r:n[e]:t.currentStyle&&(r=t.currentStyle[e]),"auto"!==r||"top"!==e&&"left"!==e||(r=function(t,e){if("absolute"!==et(t,"position",!0))return 0;var i="left"===e?"Left":"Top",n=et(t,"margin"+i,!0);return t["offset"+i]-(tt(t,e,parseFloat(n),(n+"").replace(J,""))||0)}(t,e)),i?r:parseFloat(r)||0)},it=function(t,e,i){var n=t.vars,r=n[i],s=t._listeners[e];"function"==typeof r&&r.apply(n[i+"Scope"]||n.callbackScope||t,n[i+"Params"]||[t.pointerEvent]),s&&t.dispatchEvent(e)},nt=function(t,e){var i,n,r,s=G(t);return s?Tt(s,e):void 0!==t.left?(r=gt(e),{left:t.left-r.x,top:t.top-r.y,width:t.width,height:t.height}):{left:n=t.min||t.minX||t.minRotation||0,top:i=t.min||t.minY||0,width:(t.max||t.maxX||t.maxRotation||0)-n,height:(t.max||t.maxY||0)-i}},rt=function(){if(!m.createElementNS)return i=0,void(s=!1);var t,e,n,r,h=v("div"),u=m.createElementNS("http://www.w3.org/2000/svg","svg"),c=v("div"),f=h.style,p=m.body||g,d="flex"===et(p,"display",!0);m.body&&at&&(f.position="absolute",p.appendChild(c),c.appendChild(h),r=h.offsetParent,c.style[at]="rotate(1deg)",l=h.offsetParent===r,c.style.position="absolute",f.height="10px",r=h.offsetTop,c.style.border="5px solid red",a=r!==h.offsetTop,p.removeChild(c)),f=u.style,u.setAttributeNS(null,"width","400px"),u.setAttributeNS(null,"height","400px"),u.setAttributeNS(null,"viewBox","0 0 400 400"),f.display="block",f.boxSizing="border-box",f.border="0px solid red",f.transform="none",h.style.cssText="width:100px;height:100px;overflow:scroll;-ms-overflow-style:none;",p.appendChild(h),h.appendChild(u),e=(n=u.createSVGPoint().matrixTransform(u.getScreenCTM())).y,h.scrollTop=100,n.x=n.y=0,n=n.matrixTransform(u.getScreenCTM()),o=e-n.y<100.1?0:e-n.y-150,h.removeChild(u),p.removeChild(h),p.appendChild(u),d&&(p.style.display="block"),e=(t=u.getScreenCTM()).e,f.border="50px solid red",t=u.getScreenCTM(),0===e&&0===t.e&&0===t.f&&1===t.a?(i=1,s=!0):(i=e!==t.e?1:0,s=1!==t.a),d&&(p.style.display="flex"),p.removeChild(u)},st=""!==Z(y,"perspective"),ot=Z(y,"transformOrigin").replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),at=Z(y,"transform"),lt=at.replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),ht={},ut={},ct=n.l.SVGElement,ft=function(t){return!!(ct&&"function"==typeof t.getBBox&&t.getCTM&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},pt=(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent))&&parseFloat(RegExp.$1)<11,dt=[],_t=[],mt=function(t){if(!t.getBoundingClientRect||!t.parentNode||!at)return{offsetTop:0,offsetLeft:0,scaleX:1,scaleY:1,offsetParent:g};if(!1!==Lt.cacheSVGData&&t._dCache&&t._dCache.lastUpdate===n.m.ticker.frame)return t._dCache;var e,r,a,l,h,u,c,f,p,d,_,v=t,y=vt(t);if(y.lastUpdate=n.m.ticker.frame,t.getBBox&&!y.isSVGRoot){for(v=t.parentNode,e=t.getBBox();v&&"svg"!==(v.nodeName+"").toLowerCase();)v=v.parentNode;return l=mt(v),y.offsetTop=e.y*l.scaleY,y.offsetLeft=e.x*l.scaleX,y.scaleX=l.scaleX,y.scaleY=l.scaleY,y.offsetParent=v||g,y}for((a=y.offsetParent)===m.body&&(a=g),_t.length=dt.length=0;v&&("matrix(1, 0, 0, 1, 0, 0)"!==(h=et(v,at,!0))&&"none"!==h&&"translate3d(0px, 0px, 0px)"!==h&&(_t.push(v),dt.push(v.style[at]),v.style[at]="none"),v!==a);)v=v.parentNode;for(r=a.getBoundingClientRect(),h=t.getScreenCTM(),c=t.createSVGPoint().matrixTransform(h),y.scaleX=Math.sqrt(h.a*h.a+h.b*h.b),y.scaleY=Math.sqrt(h.d*h.d+h.c*h.c),void 0===i&&rt(),y.borderBox&&!s&&t.getAttribute("width")&&(l=K(t)||{},f=parseFloat(l.borderLeftWidth)+parseFloat(l.borderRightWidth)||0,p=parseFloat(l.borderTopWidth)+parseFloat(l.borderBottomWidth)||0,d=parseFloat(l.width)||0,_=parseFloat(l.height)||0,y.scaleX*=(d-f)/d,y.scaleY*=(_-p)/_),o?(e=t.getBoundingClientRect(),y.offsetLeft=e.left-r.left,y.offsetTop=e.top-r.top):(y.offsetLeft=c.x-r.left,y.offsetTop=c.y-r.top),y.offsetParent=a,u=_t.length;--u>-1;)_t[u].style[at]=dt[u];return y},gt=function(t,e){if(e=e||{},!t||t===g||!t.parentNode||t===window)return{x:0,y:0};var i=K(t),r=ot&&i?i.getPropertyValue(ot):"50% 50%",s=r.split(" "),o=-1!==r.indexOf("left")?"0%":-1!==r.indexOf("right")?"100%":s[0],a=-1!==r.indexOf("top")?"0%":-1!==r.indexOf("bottom")?"100%":s[1];return"center"!==a&&null!=a||(a="50%"),("center"===o||isNaN(parseFloat(o)))&&(o="50%"),t.getBBox&&ft(t)?(t._gsTransform||(n.m.set(t,{x:"+=0",overwrite:!1}),void 0===t._gsTransform.xOrigin&&console.log("Draggable requires at least GSAP 1.17.0")),r=t.getBBox(),e.x=t._gsTransform.xOrigin-r.x,e.y=t._gsTransform.yOrigin-r.y):(t.getBBox&&-1!==(o+a).indexOf("%")&&(t={offsetWidth:(t=t.getBBox()).width,offsetHeight:t.height}),e.x=-1!==o.indexOf("%")?t.offsetWidth*parseFloat(o)/100:parseFloat(o),e.y=-1!==a.indexOf("%")?t.offsetHeight*parseFloat(a)/100:parseFloat(a)),e},vt=function(t){if(!1!==Lt.cacheSVGData&&t._dCache&&t._dCache.lastUpdate===n.m.ticker.frame)return t._dCache;var e,i=t._dCache=t._dCache||{},r=K(t),s=t.getBBox&&ft(t),o="svg"===(t.nodeName+"").toLowerCase();if(i.isSVG=s,i.isSVGRoot=o,i.borderBox="border-box"===r.boxSizing,i.computedStyle=r,o)(e=t.parentNode||g).insertBefore(y,t),i.offsetParent=y.offsetParent||g,e.removeChild(y);else if(s){for(e=t.parentNode;e&&"svg"!==(e.nodeName+"").toLowerCase();)e=e.parentNode;i.offsetParent=e}else i.offsetParent=t.offsetParent;return i},yt=function(t,e,n,r,s){if(t===window||!t||!t.style||!t.parentNode)return[1,0,0,1,0,0];var o,h,u,c,f,p,d,_,v,y,x,b,T,w,P=t._dCache||vt(t),S=t.parentNode,O=S._dCache||vt(S),k=P.computedStyle,C=P.isSVG?O.offsetParent:S.offsetParent;return o=P.isSVG&&-1!==(t.style[at]+"").indexOf("matrix")?t.style[at]:k?k.getPropertyValue(lt):t.currentStyle?t.currentStyle[at]:"1,0,0,1,0,0",t.getBBox&&-1!==(t.getAttribute("transform")+"").indexOf("matrix")&&(o=t.getAttribute("transform")),(o=(o+"").match(/(?:\-|\.|\b)(\d|\.|e\-)+/g)||[1,0,0,1,0,0]).length>6&&(o=[o[0],o[1],o[4],o[5],o[12],o[13]]),r?o[4]=o[5]=0:P.isSVG&&(f=t._gsTransform)&&(f.xOrigin||f.yOrigin)&&(o[0]=parseFloat(o[0]),o[1]=parseFloat(o[1]),o[2]=parseFloat(o[2]),o[3]=parseFloat(o[3]),o[4]=parseFloat(o[4])-(f.xOrigin-(f.xOrigin*o[0]+f.yOrigin*o[2])),o[5]=parseFloat(o[5])-(f.yOrigin-(f.xOrigin*o[1]+f.yOrigin*o[3]))),e&&(void 0===i&&rt(),u=P.isSVG||P.isSVGRoot?mt(t):t,P.isSVG?(c=t.getBBox(),y=O.isSVGRoot?{x:0,y:0}:S.getBBox(),u={offsetLeft:c.x-y.x,offsetTop:c.y-y.y,offsetParent:P.offsetParent}):P.isSVGRoot?(x=parseInt(k.borderTopWidth,10)||0,b=parseInt(k.borderLeftWidth,10)||0,T=(o[0]-i)*b+o[2]*x,w=o[1]*b+(o[3]-i)*x,p=e.x,d=e.y,_=p-(p*o[0]+d*o[2]),v=d-(p*o[1]+d*o[3]),o[4]=parseFloat(o[4])+_,o[5]=parseFloat(o[5])+v,e.x-=_,e.y-=v,p=u.scaleX,d=u.scaleY,s||(e.x*=p,e.y*=d),o[0]*=p,o[1]*=d,o[2]*=p,o[3]*=d,pt||(e.x+=T,e.y+=w),C===m.body&&u.offsetParent===g&&(C=g)):!a&&t.offsetParent&&(e.x+=parseInt(et(t.offsetParent,"borderLeftWidth"),10)||0,e.y+=parseInt(et(t.offsetParent,"borderTopWidth"),10)||0),h=S===g||S===m.body,o[4]=Number(o[4])+e.x+(u.offsetLeft||0)-n.x-(h?0:S.scrollLeft||0),o[5]=Number(o[5])+e.y+(u.offsetTop||0)-n.y-(h?0:S.scrollTop||0),S&&"fixed"===et(t,"position",k)&&(o[4]+=z(),o[5]+=Y()),!S||S===g||C!==u.offsetParent||O.isSVG||l&&"100100"!==yt(S).join("")||(u=O.isSVGRoot?mt(S):S,o[4]-=u.offsetLeft||0,o[5]-=u.offsetTop||0,a||!O.offsetParent||P.isSVG||P.isSVGRoot||(o[4]-=parseInt(et(O.offsetParent,"borderLeftWidth"),10)||0,o[5]-=parseInt(et(O.offsetParent,"borderTopWidth"),10)||0))),o},xt=function(t,e){if(!t||t===window||!t.parentNode)return[1,0,0,1,0,0];for(var i,n,r,s,o,a,l,h,u=gt(t,ht),c=gt(t.parentNode,ut),f=yt(t,u,c,!1,!e);(t=t.parentNode)&&t.parentNode&&t!==g;)u=c,c=gt(t.parentNode,u===ht?ut:ht),l=yt(t,u,c),i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],f[0]=i*l[0]+n*l[2],f[1]=i*l[1]+n*l[3],f[2]=r*l[0]+s*l[2],f[3]=r*l[1]+s*l[3],f[4]=o*l[0]+a*l[2]+l[4],f[5]=o*l[1]+a*l[3]+l[5];return e&&(i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],h=i*s-n*r,f[0]=s/h,f[1]=-n/h,f[2]=-r/h,f[3]=i/h,f[4]=(r*a-s*o)/h,f[5]=-(i*a-n*o)/h),f},bt=function(t,e,i){var n=t.x*e[0]+t.y*e[2]+e[4],r=t.x*e[1]+t.y*e[3]+e[5];return t.x=n*i[0]+r*i[2]+i[4],t.y=n*i[1]+r*i[3]+i[5],t},Tt=function(t,e,i){if(!(t=G(t)))return null;e=G(e);var n,r,s,o,a,l,h,u,c,f,p,d,_,v,y,x,b,T,w,P,O,k,C=t.getBBox&&ft(t);if(t===window)o=Y(),s=(r=z())+(g.clientWidth||t.innerWidth||m.body.clientWidth||0),a=o+((t.innerHeight||0)-20<g.clientHeight?g.clientHeight:t.innerHeight||m.body.clientHeight||0);else{if(void 0===e||e===window)return t.getBoundingClientRect();r=-(n=gt(t)).x,o=-n.y,C?(_=(d=t.getBBox()).width,v=d.height):"svg"!==(t.nodeName+"").toLowerCase()&&t.offsetWidth?(_=t.offsetWidth,v=t.offsetHeight):(O=K(t),_=parseFloat(O.width),v=parseFloat(O.height)),s=r+_,a=o+v,"svg"!==t.nodeName.toLowerCase()||S||(k=(y=mt(t)).computedStyle||{},T=(t.getAttribute("viewBox")||"0 0").split(" "),w=parseFloat(T[0]),P=parseFloat(T[1]),x=parseFloat(k.borderLeftWidth)||0,b=parseFloat(k.borderTopWidth)||0,s-=_-(_-x)/y.scaleX-w,a-=v-(v-b)/y.scaleY-P,r-=x/y.scaleX-w,o-=b/y.scaleY-P,O&&(s+=(parseFloat(k.borderRightWidth)+x)/y.scaleX,a+=(b+parseFloat(k.borderBottomWidth))/y.scaleY))}return t===e?{left:r,top:o,width:s-r,height:a-o}:(l=xt(t),h=xt(e,!0),u=bt({x:r,y:o},l,h),c=bt({x:s,y:o},l,h),f=bt({x:s,y:a},l,h),p=bt({x:r,y:a},l,h),r=Math.min(u.x,c.x,f.x,p.x),o=Math.min(u.y,c.y,f.y,p.y),L.x=L.y=0,i&&gt(e,L),{left:r+L.x,top:o+L.y,width:Math.max(u.x,c.x,f.x,p.x)-r,height:Math.max(u.y,c.y,f.y,p.y)-o})},wt=function(t){return!!(t&&t.length&&t[0]&&(t[0].nodeType&&t[0].style&&!t.nodeType||t[0].length&&t[0][0]))},Pt="ontouchstart"in g&&"orientation"in window,St=function(t){for(var e=t.split(","),i=(void 0!==y.onpointerdown?"pointerdown,pointermove,pointerup,pointercancel":void 0!==y.onmspointerdown?"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel":t).split(","),n={},r=4;--r>-1;)n[e[r]]=i[r],n[i[r]]=e[r];return n}("touchstart,touchmove,touchend,touchcancel"),Ot=function(t,e,i,n){if(t.addEventListener){var r=St[e];n=n||{passive:!1},t.addEventListener(r||e,i,n),r&&e!==r&&t.addEventListener(e,i,n)}else t.attachEvent&&t.attachEvent("on"+e,i)},kt=function(t,e,i){if(t.removeEventListener){var n=St[e];t.removeEventListener(n||e,i),n&&e!==n&&t.removeEventListener(e,i)}else t.detachEvent&&t.detachEvent("on"+e,i)},Ct=function(e){t=e.touches&&A<e.touches.length,kt(e.target,"touchend",Ct)},Rt=function(e){t=e.touches&&A<e.touches.length,Ot(e.target,"touchend",Ct)},Mt=function(t,e,i,n,r,s){var o,a,l,h={};if(e)if(1!==r&&e instanceof Array){if(h.end=o=[],l=e.length,"object"==typeof e[0])for(a=0;a<l;a++)o[a]=F(e[a],r);else for(a=0;a<l;a++)o[a]=e[a]*r;i+=1.1,n-=1.1}else h.end="function"==typeof e?function(i){var n,s,o=e.call(t,i);if(1!==r)if("object"==typeof o){for(s in n={},o)n[s]=o[s]*r;o=n}else o*=r;return o}:e;return(i||0===i)&&(h.max=i),(n||0===n)&&(h.min=n),s&&(h.velocity=0),h},At=function(t){var e;return!(!t||!t.getAttribute||"BODY"===t.nodeName)&&(!("true"!==(e=t.getAttribute("data-clickable"))&&("false"===e||!t.onclick&&!M.test(t.nodeName+"")&&"true"!==t.getAttribute("contentEditable")))||At(t.parentNode))},Dt=function(t,e){for(var i,n=t.length;--n>-1;)(i=t[n]).ondragstart=i.onselectstart=e?null:b,$(i,"userSelect",e?"text":"none")},Et=function(){var t,e=m.createElement("div"),i=m.createElement("div"),n=i.style,r=m.body||y;return n.display="inline-block",n.position="relative",e.style.cssText=i.innerHTML="width:90px; height:40px; padding:10px; overflow:auto; visibility: hidden",e.appendChild(i),r.appendChild(e),t=i.offsetHeight+18>e.scrollHeight,r.removeChild(e),t}(),Lt=function(i,s){n.c.call(this,i),i=G(i),e||(e=p.com.greensock.plugins.ThrowPropsPlugin),this.vars=s=F(s||{}),this.target=i,this.x=this.y=this.rotation=0,this.dragResistance=parseFloat(s.dragResistance)||0,this.edgeResistance=isNaN(s.edgeResistance)?1:parseFloat(s.edgeResistance)||0,this.lockAxis=s.lockAxis,this.autoScroll=s.autoScroll||0,this.lockedAxis=null,this.allowEventDefault=!!s.allowEventDefault;var o,a,l,d,_,v,y,b,M,I,Y,z,V,Z,K,Q,J,tt,rt,ot,lt,ht,ut,ct,pt,dt,_t,mt,vt,yt,bt,Tt,wt=(s.type||(S?"top,left":"x,y")).toLowerCase(),Ct=-1!==wt.indexOf("x")||-1!==wt.indexOf("y"),Nt=-1!==wt.indexOf("rotation"),Ft=Nt?"rotation":Ct?"x":"left",Bt=Ct?"y":"top",It=-1!==wt.indexOf("x")||-1!==wt.indexOf("left")||"scroll"===wt,Yt=-1!==wt.indexOf("y")||-1!==wt.indexOf("top")||"scroll"===wt,zt=s.minimumMovement||2,jt=this,Ut=function(t){if("string"==typeof t&&(t=n.m.selector(t)),!t||t.nodeType)return[t];var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i}(s.trigger||s.handle||i),Wt={},Vt=0,Ht=!1,qt=s.autoScrollMarginTop||40,Gt=s.autoScrollMarginRight||40,Zt=s.autoScrollMarginBottom||40,$t=s.autoScrollMarginLeft||40,Kt=s.clickableTest||At,Qt=0,Jt=function(t){if(!(jt.isPressed&&t.which<2))return t.preventDefault(),t.stopPropagation(),!1;jt.endDrag()},te=function(t){if(jt.autoScroll&&jt.isDragging&&(Ht||tt)){var e,n,r,s,o,l,h,u,c=i,f=15*jt.autoScroll;for(Ht=!1,N.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=g.scrollTop?g.scrollTop:m.body.scrollTop,N.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=g.scrollLeft?g.scrollLeft:m.body.scrollLeft,s=jt.pointerX-N.scrollLeft,o=jt.pointerY-N.scrollTop;c&&!n;)e=(n=W(c.parentNode))?N:c.parentNode,r=n?{bottom:Math.max(g.clientHeight,window.innerHeight||0),right:Math.max(g.clientWidth,window.innerWidth||0),left:0,top:0}:e.getBoundingClientRect(),l=h=0,Yt&&((u=e._gsMaxScrollY-e.scrollTop)<0?h=u:o>r.bottom-Zt&&u?(Ht=!0,h=Math.min(u,f*(1-Math.max(0,r.bottom-o)/Zt)|0)):o<r.top+qt&&e.scrollTop&&(Ht=!0,h=-Math.min(e.scrollTop,f*(1-Math.max(0,o-r.top)/qt)|0)),h&&(e.scrollTop+=h)),It&&((u=e._gsMaxScrollX-e.scrollLeft)<0?l=u:s>r.right-Gt&&u?(Ht=!0,l=Math.min(u,f*(1-Math.max(0,r.right-s)/Gt)|0)):s<r.left+$t&&e.scrollLeft&&(Ht=!0,l=-Math.min(e.scrollLeft,f*(1-Math.max(0,s-r.left)/$t)|0)),l&&(e.scrollLeft+=l)),n&&(l||h)&&(window.scrollTo(e.scrollLeft,e.scrollTop),de(jt.pointerX+l,jt.pointerY+h)),c=e}if(tt){var p=jt.x,d=jt.y;p<1e-6&&p>-1e-6&&(p=0),d<1e-6&&d>-1e-6&&(d=0),Nt?(jt.deltaX=p-_t.data.rotation,_t.data.rotation=jt.rotation=p,_t.setRatio(1)):a?(Yt&&(jt.deltaY=d-a.top(),a.top(d)),It&&(jt.deltaX=p-a.left(),a.left(p))):Ct?(Yt&&(jt.deltaY=d-_t.data.y,_t.data.y=d),It&&(jt.deltaX=p-_t.data.x,_t.data.x=p),_t.setRatio(1)):(Yt&&(jt.deltaY=d-parseFloat(i.style.top||0),i.style.top=d+"px"),It&&(jt.deltaY=p-parseFloat(i.style.left||0),i.style.left=p+"px")),!b||t||yt||(yt=!0,it(jt,"drag","onDrag"),yt=!1)}tt=!1},ee=function(t,e){var r,s=jt.x,o=jt.y;i._gsTransform||!Ct&&!Nt||n.m.set(i,{x:"+=0",overwrite:!1,data:"_draggable"}),Ct?(jt.y=i._gsTransform.y,jt.x=i._gsTransform.x):Nt?jt.x=jt.rotation=i._gsTransform.rotation:a?(jt.y=a.top(),jt.x=a.left()):(jt.y=parseInt(i.style.top,10)||0,jt.x=parseInt(i.style.left,10)||0),(ot||lt||ht)&&!e&&(jt.isDragging||jt.isThrowing)&&(ht&&(L.x=jt.x,L.y=jt.y,(r=ht(L)).x!==jt.x&&(jt.x=r.x,tt=!0),r.y!==jt.y&&(jt.y=r.y,tt=!0)),ot&&(r=ot(jt.x))!==jt.x&&(jt.x=r,Nt&&(jt.rotation=r),tt=!0),lt&&((r=lt(jt.y))!==jt.y&&(jt.y=r),tt=!0)),tt&&te(!0),t||(jt.deltaX=jt.x-s,jt.deltaY=jt.y-o,it(jt,"throwupdate","onThrowUpdate"))},ie=function(){var t,e,n,r;y=!1,a?(a.calibrate(),jt.minX=I=-a.maxScrollLeft(),jt.minY=z=-a.maxScrollTop(),jt.maxX=M=jt.maxY=Y=0,y=!0):s.bounds&&(t=nt(s.bounds,i.parentNode),Nt?(jt.minX=I=t.left,jt.maxX=M=t.left+t.width,jt.minY=z=jt.maxY=Y=0):void 0!==s.bounds.maxX||void 0!==s.bounds.maxY?(t=s.bounds,jt.minX=I=t.minX,jt.minY=z=t.minY,jt.maxX=M=t.maxX,jt.maxY=Y=t.maxY):(e=nt(i,i.parentNode),jt.minX=I=et(i,Ft)+t.left-e.left,jt.minY=z=et(i,Bt)+t.top-e.top,jt.maxX=M=I+(t.width-e.width),jt.maxY=Y=z+(t.height-e.height)),I>M&&(jt.minX=M,jt.maxX=M=I,I=jt.minX),z>Y&&(jt.minY=Y,jt.maxY=Y=z,z=jt.minY),Nt&&(jt.minRotation=I,jt.maxRotation=M),y=!0),s.liveSnap&&(r=(n=!0===s.liveSnap?s.snap||{}:s.liveSnap)instanceof Array||"function"==typeof n,Nt?(ot=ue(r?n:n.rotation,I,M,1),lt=null):n.points?ht=ce(r?n:n.points,I,M,z,Y,n.radius,a?-1:1):(It&&(ot=ue(r?n:n.x||n.left||n.scrollLeft,I,M,a?-1:1)),Yt&&(lt=ue(r?n:n.y||n.top||n.scrollTop,z,Y,a?-1:1))))},ne=function(){jt.isThrowing=!1,it(jt,"throwcomplete","onThrowComplete")},re=function(){jt.isThrowing=!1},se=function(t,n){var r,o,l,h;t&&e?(!0===t&&(o=(r=s.snap||s.liveSnap||{})instanceof Array||"function"==typeof r,t={resistance:(s.throwResistance||s.resistance||1e3)/(Nt?10:1)},Nt?t.rotation=Mt(jt,o?r:r.rotation,M,I,1,n):(It&&(t[Ft]=Mt(jt,o?r:r.points||r.x||r.left||r.scrollLeft,M,I,a?-1:1,n||"x"===jt.lockedAxis)),Yt&&(t[Bt]=Mt(jt,o?r:r.points||r.y||r.top||r.scrollTop,Y,z,a?-1:1,n||"y"===jt.lockedAxis)),(r.points||r instanceof Array&&"object"==typeof r[0])&&(t.linkedProps=Ft+","+Bt,t.radius=r.radius))),jt.isThrowing=!0,h=isNaN(s.overshootTolerance)?1===s.edgeResistance?0:1-jt.edgeResistance+.2:s.overshootTolerance,jt.tween=l=e.to(a||i,{throwProps:t,data:"_draggable",ease:s.ease||p.Power3.easeOut,onComplete:ne,onOverwrite:re,onUpdate:s.fastMode?it:ee,onUpdateParams:s.fastMode?[jt,"onthrowupdate","onThrowUpdate"]:r&&r.radius?[!1,!0]:x},isNaN(s.maxDuration)?2:s.maxDuration,isNaN(s.minDuration)?0===h||"object"==typeof t&&t.resistance>1e3?0:.5:s.minDuration,h),s.fastMode||(a&&(a._suspendTransforms=!0),l.render(l.duration(),!0,!0),ee(!0,!0),jt.endX=jt.x,jt.endY=jt.y,Nt&&(jt.endRotation=jt.x),l.play(0),ee(!0,!0),a&&(a._suspendTransforms=!1))):y&&jt.applyBounds()},oe=function(t){var e,n,r,s,o,a,h,u,c,f=pt||[1,0,0,1,0,0];pt=xt(i.parentNode,!0),t&&jt.isPressed&&f.join(",")!==pt.join(",")&&(e=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],c=l*(-n/(h=e*s-n*r))+d*(e/h)+-(e*a-n*o)/h,d=(u=l*(s/h)+d*(-r/h)+(r*a-s*o)/h)*pt[1]+c*pt[3]+pt[5],l=u*pt[0]+c*pt[2]+pt[4]),pt[1]||pt[2]||1!=pt[0]||1!=pt[3]||0!=pt[4]||0!=pt[5]||(pt=null)},ae=function(){var t=1-jt.edgeResistance;oe(!1),pt&&(l=jt.pointerX*pt[0]+jt.pointerY*pt[2]+pt[4],d=jt.pointerX*pt[1]+jt.pointerY*pt[3]+pt[5]),tt&&(de(jt.pointerX,jt.pointerY),te(!0)),a?(ie(),v=a.top(),_=a.left()):(le()?(ee(!0,!0),ie()):jt.applyBounds(),Nt?(J=jt.rotationOrigin=function(t,e,i,n,r){t=G(t);var s=xt(t,!1),o=e.x,a=e.y;return i&&(gt(t,e),o-=e.x,a-=e.y),(n=!0===n?e:n||{}).x=o*s[0]+a*s[2]+s[4],n.y=o*s[1]+a*s[3]+s[5],n}(i,{x:0,y:0}),ee(!0,!0),_=jt.x,v=jt.y=Math.atan2(J.y-jt.pointerY,jt.pointerX-J.x)*T):(i.parentNode&&i.parentNode.scrollTop||0,i.parentNode&&i.parentNode.scrollLeft||0,v=et(i,Bt),_=et(i,Ft))),y&&t&&(_>M?_=M+(_-M)/t:_<I&&(_=I-(I-_)/t),Nt||(v>Y?v=Y+(v-Y)/t:v<z&&(v=z-(z-v)/t))),jt.startX=_,jt.startY=v},le=function(){return jt.tween&&jt.tween.isActive()},he=function(){!O.parentNode||le()||jt.isDragging||O.parentNode.removeChild(O)},ue=function(t,e,i,n){return"function"==typeof t?function(r){var s=jt.isPressed?1-jt.edgeResistance:1;return t.call(jt,r>i?i+(r-i)*s:r<e?e+(r-e)*s:r)*n}:t instanceof Array?function(n){for(var r,s,o=t.length,a=0,l=w;--o>-1;)(s=(r=t[o])-n)<0&&(s=-s),s<l&&r>=e&&r<=i&&(a=o,l=s);return t[a]}:isNaN(t)?function(t){return t}:function(){return t*n}},ce=function(t,e,i,n,r,s,o){return s=s&&s<w?s*s:w,"function"==typeof t?function(a){var l,h,u,c=jt.isPressed?1-jt.edgeResistance:1,f=a.x,p=a.y;return a.x=f=f>i?i+(f-i)*c:f<e?e+(f-e)*c:f,a.y=p=p>r?r+(p-r)*c:p<n?n+(p-n)*c:p,(l=t.call(jt,a))!==a&&(a.x=l.x,a.y=l.y),1!==o&&(a.x*=o,a.y*=o),s<w&&(h=a.x-f)*h+(u=a.y-p)*u>s&&(a.x=f,a.y=p),a}:t instanceof Array?function(e){for(var i,n,r,o,a=t.length,l=0,h=w;--a>-1;)(o=(i=(r=t[a]).x-e.x)*i+(n=r.y-e.y)*n)<h&&(l=a,h=o);return h<=s?t[l]:e}:function(t){return t}},fe=function(t,e){var r;if(o&&!jt.isPressed&&t&&("mousedown"!==t.type&&"pointerdown"!==t.type||e||!(P()-Qt<30)||!St[jt.pointerEvent.type])){if(dt=le(),jt.pointerEvent=t,St[t.type]?(ct=-1!==t.type.indexOf("touch")?t.currentTarget||t.target:m,Ot(ct,"touchend",_e),Ot(ct,"touchmove",pe),Ot(ct,"touchcancel",_e),Ot(m,"touchstart",Rt)):(ct=null,Ot(m,"mousemove",pe)),vt=null,Ot(m,"mouseup",_e),t&&t.target&&Ot(t.target,"mouseup",_e),ut=Kt.call(jt,t.target)&&!s.dragClickables&&!e)return Ot(t.target,"change",_e),it(jt,"press","onPress"),void Dt(Ut,!0);if(mt=!(!ct||It===Yt||!1===jt.vars.allowNativeTouchScrolling||jt.vars.allowContextMenu&&t&&(t.ctrlKey||t.which>2))&&(It?"y":"x"),S?t=q(t,!0):mt||jt.allowEventDefault||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()),t.changedTouches?(t=K=t.changedTouches[0],Q=t.identifier):t.pointerId?Q=t.pointerId:K=Q=null,A++,function(t){k.push(t),1===k.length&&n.m.ticker.addEventListener("tick",X,this,!1,1)}(te),d=jt.pointerY=t.pageY,l=jt.pointerX=t.pageX,(mt||jt.autoScroll)&&H(i.parentNode),!i.parentNode||!jt.autoScroll||a||Nt||!i.parentNode._gsMaxScrollX||O.parentNode||i.getBBox||(O.style.width=i.parentNode.scrollWidth+"px",i.parentNode.appendChild(O)),ae(),jt.tween&&jt.tween.kill(),jt.isThrowing=!1,n.m.killTweensOf(a||i,!0,Wt),a&&n.m.killTweensOf(i,!0,{scrollTo:1}),jt.tween=jt.lockedAxis=null,(s.zIndexBoost||!Nt&&!a&&!1!==s.zIndexBoost)&&(i.style.zIndex=Lt.zIndex++),jt.isPressed=!0,b=!(!s.onDrag&&!jt._listeners.drag),!Nt)for(r=Ut.length;--r>-1;)$(Ut[r],"cursor",s.cursor||"move");it(jt,"press","onPress")}},pe=function(e){var i,n,r,s,a,h,u=e;if(o&&!t&&jt.isPressed&&e){if(jt.pointerEvent=e,i=e.changedTouches){if((e=i[0])!==K&&e.identifier!==Q){for(s=i.length;--s>-1&&(e=i[s]).identifier!==Q;);if(s<0)return}}else if(e.pointerId&&Q&&e.pointerId!==Q)return;if(S)e=q(e,!0);else{if(ct&&mt&&!vt&&(n=e.pageX,r=e.pageY,pt&&(s=n*pt[0]+r*pt[2]+pt[4],r=n*pt[1]+r*pt[3]+pt[5],n=s),((a=Math.abs(n-l))!==(h=Math.abs(r-d))&&(a>zt||h>zt)||D&&mt===vt)&&(vt=a>h&&It?"x":"y",!1!==jt.vars.lockAxisOnTouchScroll&&(jt.lockedAxis="x"===vt?"y":"x","function"==typeof jt.vars.onLockAxis&&jt.vars.onLockAxis.call(jt,u)),D&&mt===vt)))return void _e(u);jt.allowEventDefault||mt&&(!vt||mt===vt)||!1===u.cancelable||(u.preventDefault(),u.preventManipulation&&u.preventManipulation())}jt.autoScroll&&(Ht=!0),de(e.pageX,e.pageY)}},de=function(t,e){var i,n,r,s,o,a,h=1-jt.dragResistance,u=1-jt.edgeResistance;jt.pointerX=t,jt.pointerY=e,Nt?(s=Math.atan2(J.y-e,t-J.x)*T,(o=jt.y-s)>180?(v-=360,jt.y=s):o<-180&&(v+=360,jt.y=s),jt.x!==_||Math.abs(v-s)>zt?(jt.y=s,r=_+(v-s)*h):r=_):(pt&&(a=t*pt[0]+e*pt[2]+pt[4],e=t*pt[1]+e*pt[3]+pt[5],t=a),i=t-l,(n=e-d)<zt&&n>-zt&&(n=0),i<zt&&i>-zt&&(i=0),(jt.lockAxis||jt.lockedAxis)&&(i||n)&&((a=jt.lockedAxis)||(jt.lockedAxis=a=It&&Math.abs(i)>Math.abs(n)?"y":Yt?"x":null,a&&"function"==typeof jt.vars.onLockAxis&&jt.vars.onLockAxis.call(jt,jt.pointerEvent)),"y"===a?n=0:"x"===a&&(i=0)),r=_+i*h,s=v+n*h),(ot||lt||ht)&&(jt.x!==r||jt.y!==s&&!Nt)?(ht&&(L.x=r,L.y=s,r=(a=ht(L)).x,s=a.y),ot&&(r=ot(r)),lt&&(s=lt(s))):y&&(r>M?r=M+(r-M)*u:r<I&&(r=I+(r-I)*u),Nt||(s>Y?s=Y+(s-Y)*u:s<z&&(s=z+(s-z)*u))),Nt||pt||(r=Math.round(r),s=Math.round(s)),(jt.x!==r||jt.y!==s&&!Nt)&&(Nt?(jt.endRotation=jt.x=jt.endX=r,tt=!0):(Yt&&(jt.y=jt.endY=s,tt=!0),It&&(jt.x=jt.endX=r,tt=!0)),!jt.isDragging&&jt.isPressed&&(jt.isDragging=!0,it(jt,"dragstart","onDragStart")))},_e=function(t,e){if(o&&jt.isPressed&&(!t||null==Q||e||!(t.pointerId&&t.pointerId!==Q||t.changedTouches&&!function(t,e){for(var i=t.length;--i>-1;)if(t[i].identifier===e)return!0;return!1}(t.changedTouches,Q)))){jt.isPressed=!1;var r,a,l,h,u,c=t,f=jt.isDragging,p=jt.vars.allowContextMenu&&t&&(t.ctrlKey||t.which>2),d=n.m.delayedCall(.001,he);if(ct?(kt(ct,"touchend",_e),kt(ct,"touchmove",pe),kt(ct,"touchcancel",_e),kt(m,"touchstart",Rt)):kt(m,"mousemove",pe),kt(m,"mouseup",_e),t&&t.target&&kt(t.target,"mouseup",_e),tt=!1,ut&&!p)return t&&(kt(t.target,"change",_e),jt.pointerEvent=c),Dt(Ut,!1),it(jt,"release","onRelease"),it(jt,"click","onClick"),void(ut=!1);if(B(te),!Nt)for(a=Ut.length;--a>-1;)$(Ut[a],"cursor",s.cursor||"move");if(f&&(Vt=E=P(),jt.isDragging=!1),A--,t){if(S&&(t=q(t,!1)),(r=t.changedTouches)&&(t=r[0])!==K&&t.identifier!==Q){for(a=r.length;--a>-1&&(t=r[a]).identifier!==Q;);if(a<0)return}jt.pointerEvent=c,jt.pointerX=t.pageX,jt.pointerY=t.pageY}return p&&c?(c.preventDefault(),c.preventManipulation&&c.preventManipulation(),it(jt,"release","onRelease")):c&&!f?(dt&&(s.snap||s.bounds)&&se(s.throwProps),it(jt,"release","onRelease"),D&&"touchmove"===c.type||-1!==c.type.indexOf("cancel")||(it(jt,"click","onClick"),P()-Qt<300&&it(jt,"doubleclick","onDoubleClick"),h=c.target||c.srcElement||i,Qt=P(),u=function(){Qt!==bt&&jt.enabled()&&!jt.isPressed&&(h.click?h.click():m.createEvent&&((l=m.createEvent("MouseEvents")).initMouseEvent("click",!0,!0,window,1,jt.pointerEvent.screenX,jt.pointerEvent.screenY,jt.pointerX,jt.pointerY,!1,!1,!1,!1,0,null),h.dispatchEvent(l)))},D||c.defaultPrevented||n.m.delayedCall(1e-5,u))):(se(s.throwProps),S||jt.allowEventDefault||!c||!s.dragClickables&&Kt.call(jt,c.target)||!f||mt&&(!vt||mt!==vt)||!1===c.cancelable||(c.preventDefault(),c.preventManipulation&&c.preventManipulation()),it(jt,"release","onRelease")),le()&&d.duration(jt.tween.duration()),f&&it(jt,"dragend","onDragEnd"),!0}},me=function(t){if(t&&jt.isDragging&&!a){var e=t.target||t.srcElement||i.parentNode,n=e.scrollLeft-e._gsScrollX,r=e.scrollTop-e._gsScrollY;(n||r)&&(pt?(l-=n*pt[0]+r*pt[2],d-=r*pt[3]+n*pt[1]):(l-=n,d-=r),e._gsScrollX+=n,e._gsScrollY+=r,de(jt.pointerX,jt.pointerY))}},ge=function(t){var e=P(),i=e-Qt<40,n=e-Vt<40,r=i&&bt===Qt,s=!!t.preventDefault,o=jt.pointerEvent&&jt.pointerEvent.defaultPrevented,a=i&&Tt===Qt,l=t.isTrusted||null==t.isTrusted&&i&&r;if(s&&(r||n&&!1!==jt.vars.suppressClickOnDrag)&&t.stopImmediatePropagation(),i&&(!jt.pointerEvent||!jt.pointerEvent.defaultPrevented)&&(!r||l!==a))return l&&r&&(Tt=Qt),void(bt=Qt);(jt.isPressed||n||i)&&(s?l&&t.detail&&i&&!o||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()):t.returnValue=!1)},ve=function(t){return pt?{x:t.x*pt[0]+t.y*pt[2]+pt[4],y:t.x*pt[1]+t.y*pt[3]+pt[5]}:{x:t.x,y:t.y}};(rt=Lt.get(this.target))&&rt.kill(),this.startDrag=function(t,e){var n,r,s,o;fe(t||jt.pointerEvent,!0),e&&!jt.hitTest(t||jt.pointerEvent)&&(n=Xt(t||jt.pointerEvent),r=Xt(i),s=ve({x:n.left+n.width/2,y:n.top+n.height/2}),o=ve({x:r.left+r.width/2,y:r.top+r.height/2}),l-=s.x-o.x,d-=s.y-o.y),jt.isDragging||(jt.isDragging=!0,it(jt,"dragstart","onDragStart"))},this.drag=pe,this.endDrag=function(t){_e(t||jt.pointerEvent,!0)},this.timeSinceDrag=function(){return jt.isDragging?0:(P()-Vt)/1e3},this.timeSinceClick=function(){return(P()-Qt)/1e3},this.hitTest=function(t,e){return Lt.hitTest(jt.target,t,e)},this.getDirection=function(t,i){var n,r,s,o,a,l,h="velocity"===t&&e?t:"object"!=typeof t||Nt?"start":"element";return"element"===h&&(a=Xt(jt.target),l=Xt(t)),n="start"===h?jt.x-_:"velocity"===h?e.getVelocity(this.target,Ft):a.left+a.width/2-(l.left+l.width/2),Nt?n<0?"counter-clockwise":"clockwise":(i=i||2,r="start"===h?jt.y-v:"velocity"===h?e.getVelocity(this.target,Bt):a.top+a.height/2-(l.top+l.height/2),o=(s=Math.abs(n/r))<1/i?"":n<0?"left":"right",s<i&&(""!==o&&(o+="-"),o+=r<0?"up":"down"),o)},this.applyBounds=function(t){var e,n,r,o,a,l;if(t&&s.bounds!==t)return s.bounds=t,jt.update(!0);if(ee(!0),ie(),y){if(e=jt.x,n=jt.y,e>M?e=M:e<I&&(e=I),n>Y?n=Y:n<z&&(n=z),(jt.x!==e||jt.y!==n)&&(r=!0,jt.x=jt.endX=e,Nt?jt.endRotation=e:jt.y=jt.endY=n,tt=!0,te(!0),jt.autoScroll&&!jt.isDragging))for(H(i.parentNode),o=i,N.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=g.scrollTop?g.scrollTop:m.body.scrollTop,N.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=g.scrollLeft?g.scrollLeft:m.body.scrollLeft;o&&!l;)a=(l=W(o.parentNode))?N:o.parentNode,Yt&&a.scrollTop>a._gsMaxScrollY&&(a.scrollTop=a._gsMaxScrollY),It&&a.scrollLeft>a._gsMaxScrollX&&(a.scrollLeft=a._gsMaxScrollX),o=a;jt.isThrowing&&(r||jt.endX>M||jt.endX<I||jt.endY>Y||jt.endY<z)&&se(s.throwProps,r)}return jt},this.update=function(t,e,n){var r=jt.x,s=jt.y;return oe(!e),t?jt.applyBounds():(tt&&n&&te(!0),ee(!0)),e&&(de(jt.pointerX,jt.pointerY),tt&&te(!0)),jt.isPressed&&!e&&(It&&Math.abs(r-jt.x)>.01||Yt&&Math.abs(s-jt.y)>.01&&!Nt)&&ae(),jt.autoScroll&&(H(i.parentNode),Ht=jt.isDragging,te(!0)),jt.autoScroll&&(U(i,me),j(i,me)),jt},this.enable=function(t){var l,h,u;if("soft"!==t){for(h=Ut.length;--h>-1;)u=Ut[h],Ot(u,"mousedown",fe),Ot(u,"touchstart",fe),Ot(u,"click",ge,!0),Nt||$(u,"cursor",s.cursor||"move"),$(u,"touchCallout","none"),$(u,"touchAction",It===Yt?"none":It?"pan-y":"pan-x"),ft(u)&&$(u.ownerSVGElement||u,"touchAction",It===Yt?"none":It?"pan-y":"pan-x"),this.vars.allowContextMenu||Ot(u,"contextmenu",Jt);Dt(Ut,!1)}return j(i,me),o=!0,e&&"soft"!==t&&e.track(a||i,Ct?"x,y":Nt?"rotation":"top,left"),a&&a.enable(),i._gsDragID=l="d"+R++,C[l]=this,a&&(a.element._gsDragID=l),n.m.set(i,{x:"+=0",overwrite:!1,data:"_draggable"}),_t={t:i,data:S?Z:i._gsTransform,tween:{},setRatio:S?function(){n.m.set(i,V)}:r.a._internals.setTransformRatio||r.a._internals.set3DTransformRatio},ae(),jt.update(!0),jt},this.disable=function(t){var n,r,s=jt.isDragging;if(!Nt)for(n=Ut.length;--n>-1;)$(Ut[n],"cursor",null);if("soft"!==t){for(n=Ut.length;--n>-1;)r=Ut[n],$(r,"touchCallout",null),$(r,"touchAction",null),kt(r,"mousedown",fe),kt(r,"touchstart",fe),kt(r,"click",ge),kt(r,"contextmenu",Jt);Dt(Ut,!0),ct&&(kt(ct,"touchcancel",_e),kt(ct,"touchend",_e),kt(ct,"touchmove",pe)),kt(m,"mouseup",_e),kt(m,"mousemove",pe)}return U(i,me),o=!1,e&&"soft"!==t&&e.untrack(a||i,Ct?"x,y":Nt?"rotation":"top,left"),a&&a.disable(),B(te),jt.isDragging=jt.isPressed=ut=!1,s&&it(jt,"dragend","onDragEnd"),jt},this.enabled=function(t,e){return arguments.length?t?jt.enable(e):jt.disable(e):o},this.kill=function(){return jt.isThrowing=!1,n.m.killTweensOf(a||i,!0,Wt),jt.disable(),n.m.set(Ut,{clearProps:"userSelect"}),delete C[i._gsDragID],jt},-1!==wt.indexOf("scroll")&&(a=this.scrollProxy=new function(t,e){t=G(t),e=e||{};var i,r,s,o,a,l,h=m.createElement("div"),u=h.style,c=t.firstChild,f=0,p=0,d=t.scrollTop,_=t.scrollLeft,g=t.scrollWidth,v=t.scrollHeight,y=0,x=0,b=0;st&&!1!==e.force3D?(a="translate3d(",l="px,0px)"):at&&(a="translate(",l="px)"),this.scrollTop=function(t,e){if(!arguments.length)return-this.top();this.top(-t,e)},this.scrollLeft=function(t,e){if(!arguments.length)return-this.left();this.left(-t,e)},this.left=function(i,r){if(!arguments.length)return-(t.scrollLeft+p);var s=t.scrollLeft-_,o=p;if((s>2||s<-2)&&!r)return _=t.scrollLeft,n.m.killTweensOf(this,!0,{left:1,scrollLeft:1}),this.left(-_),void(e.onKill&&e.onKill());(i=-i)<0?(p=i-.5|0,i=0):i>x?(p=i-x|0,i=x):p=0,(p||o)&&(a?this._suspendTransforms||(u[at]=a+-p+"px,"+-f+l):u.left=-p+"px",p+y>=0&&(u.paddingRight=p+y+"px")),t.scrollLeft=0|i,_=t.scrollLeft},this.top=function(i,r){if(!arguments.length)return-(t.scrollTop+f);var s=t.scrollTop-d,o=f;if((s>2||s<-2)&&!r)return d=t.scrollTop,n.m.killTweensOf(this,!0,{top:1,scrollTop:1}),this.top(-d),void(e.onKill&&e.onKill());(i=-i)<0?(f=i-.5|0,i=0):i>b?(f=i-b|0,i=b):f=0,(f||o)&&(a?this._suspendTransforms||(u[at]=a+-p+"px,"+-f+l):u.top=-f+"px"),t.scrollTop=0|i,d=t.scrollTop},this.maxScrollTop=function(){return b},this.maxScrollLeft=function(){return x},this.disable=function(){for(c=h.firstChild;c;)o=c.nextSibling,t.appendChild(c),c=o;t===h.parentNode&&t.removeChild(h)},this.enable=function(){if((c=t.firstChild)!==h){for(;c;)o=c.nextSibling,h.appendChild(c),c=o;t.appendChild(h),this.calibrate()}},this.calibrate=function(e){var n,o,a=t.clientWidth===i;d=t.scrollTop,_=t.scrollLeft,a&&t.clientHeight===r&&h.offsetHeight===s&&g===t.scrollWidth&&v===t.scrollHeight&&!e||((f||p)&&(n=this.left(),o=this.top(),this.left(-t.scrollLeft),this.top(-t.scrollTop)),a&&!e||(u.display="block",u.width="auto",u.paddingRight="0px",(y=Math.max(0,t.scrollWidth-t.clientWidth))&&(y+=et(t,"paddingLeft")+(Et?et(t,"paddingRight"):0))),u.display="inline-block",u.position="relative",u.overflow="visible",u.verticalAlign="top",u.width="100%",u.paddingRight=y+"px",Et&&(u.paddingBottom=et(t,"paddingBottom",!0)),S&&(u.zoom="1"),i=t.clientWidth,r=t.clientHeight,g=t.scrollWidth,v=t.scrollHeight,x=t.scrollWidth-i,b=t.scrollHeight-r,s=h.offsetHeight,u.display="block",(n||o)&&(this.left(n),this.top(o)))},this.content=h,this.element=t,this._suspendTransforms=!1,this.enable()}(i,function(t,e){var i;for(i in e)void 0===t[i]&&(t[i]=e[i]);return t}({onKill:function(){jt.isPressed&&_e(null)}},s)),i.style.overflowY=Yt&&!Pt?"auto":"hidden",i.style.overflowX=It&&!Pt?"auto":"hidden",i=a.content),!1!==s.force3D&&n.m.set(i,{force3D:!0}),Nt?Wt.rotation=1:(It&&(Wt[Ft]=1),Yt&&(Wt[Bt]=1)),Nt?(Z=(V=f).css,V.overwrite=!1):Ct&&(Z=(V=It&&Yt?h:It?u:c).css,V.overwrite=!1),this.enable()},Nt=Lt.prototype=new n.c;Nt.constructor=Lt,Nt.pointerX=Nt.pointerY=Nt.startX=Nt.startY=Nt.deltaX=Nt.deltaY=0,Nt.isDragging=Nt.isPressed=!1,Lt.version="0.16.4",Lt.zIndex=1e3,Ot(m,"touchcancel",function(){}),Ot(m,"contextmenu",function(t){var e;for(e in C)C[e].isPressed&&C[e].endDrag()}),Lt.create=function(t,e){"string"==typeof t&&(t=n.m.selector(t));for(var i=t&&0!==t.length?wt(t)?function(t){var e,i,n,r=[],s=t.length;for(e=0;e<s;e++)if(i=t[e],wt(i))for(n=i.length,n=0;n<i.length;n++)r.push(i[n]);else i&&0!==i.length&&r.push(i);return r}(t):[t]:[],r=i.length;--r>-1;)i[r]=new Lt(i[r],e);return i},Lt.get=function(t){return C[(G(t)||{})._gsDragID]},Lt.timeSinceDrag=function(){return(P()-E)/1e3};var Ft={},Xt=function(t,e){if(t===window)return Ft.left=Ft.top=0,Ft.width=Ft.right=g.clientWidth||t.innerWidth||m.body.clientWidth||0,Ft.height=Ft.bottom=(t.innerHeight||0)-20<g.clientHeight?g.clientHeight:t.innerHeight||m.body.clientHeight||0,Ft;var i=t.pageX!==e?{left:t.pageX-z(),top:t.pageY-Y(),right:t.pageX-z()+1,bottom:t.pageY-Y()+1}:t.nodeType||t.left===e||t.top===e?S?function(t){var e,i,n=0,r=0;for(e=(t=G(t)).offsetWidth,i=t.offsetHeight;t;)n+=t.offsetTop,r+=t.offsetLeft,t=t.offsetParent;return{top:n,left:r,width:e,height:i}}(t):G(t).getBoundingClientRect():t;return i.right===e&&i.width!==e?(i.right=i.left+i.width,i.bottom=i.top+i.height):i.width===e&&(i={width:i.right-i.left,height:i.bottom-i.top,right:i.right,left:i.left,bottom:i.bottom,top:i.top}),i};return Lt.hitTest=function(t,e,i){if(t===e)return!1;var n,r,s,o=Xt(t),a=Xt(e),l=a.left>o.right||a.right<o.left||a.top>o.bottom||a.bottom<o.top;return l||!i?!l:(s=-1!==(i+"").indexOf("%"),i=parseFloat(i)||0,(n={left:Math.max(o.left,a.left),top:Math.max(o.top,a.top)}).width=Math.min(o.right,a.right)-n.left,n.height=Math.min(o.bottom,a.bottom)-n.top,!(n.width<0||n.height<0)&&(s?(i*=.01,(r=n.width*n.height)>=o.width*o.height*i||r>=a.width*a.height*i):n.width>i&&n.height>i))},O.style.cssText="visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;",Lt},!0);const s=n.l.Draggable},function(t,e,i){!function(e,i){t.exports=i()}(0,function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.i=function(t){return t},i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=5)}([function(t,e,i){"use strict";t.exports=function(t,e){var i,n,r;for(i=1;i<arguments.length;i++)for(r in n=arguments[i])n.hasOwnProperty(r)&&(t[r]=n[r]);return t}},function(t,e,i){"use strict";var n=i(0);t.exports={build:function(t,e){var i,r,s,o=e.plugins;for(i=0,r=o.length;i<r;i++)(s=o[i]).methods&&n(t,s.methods),s.properties&&Object.defineProperties(t,s.properties)},hook:function(t,e,i){var n,r,s,o,a=t.config.plugins,l=[t.context];for(i&&(l=l.concat(i)),n=0,r=a.length;n<r;n++)o=a[n],(s=a[n][e])&&s.apply(o,l)}}},function(t,e,i){"use strict";function n(t){if(0===t.length)return t;var e,i,n=t.split(/[_-]/);if(1===n.length&&n[0][0].toLowerCase()===n[0][0])return t;for(i=n[0].toLowerCase(),e=1;e<n.length;e++)i=i+n[e].charAt(0).toUpperCase()+n[e].substring(1).toLowerCase();return i}n.prepended=function(t,e){return t+(e=n(e))[0].toUpperCase()+e.substring(1)},t.exports=n},function(t,e,i){"use strict";var n=i(0),r=i(2);function s(t,e){t=t||{},this.options=t,this.defaults=e.defaults,this.states=[],this.transitions=[],this.map={},this.lifecycle=this.configureLifecycle(),this.init=this.configureInitTransition(t.init),this.data=this.configureData(t.data),this.methods=this.configureMethods(t.methods),this.map[this.defaults.wildcard]={},this.configureTransitions(t.transitions||[]),this.plugins=this.configurePlugins(t.plugins,e.plugin)}n(s.prototype,{addState:function(t){this.map[t]||(this.states.push(t),this.addStateLifecycleNames(t),this.map[t]={})},addStateLifecycleNames:function(t){this.lifecycle.onEnter[t]=r.prepended("onEnter",t),this.lifecycle.onLeave[t]=r.prepended("onLeave",t),this.lifecycle.on[t]=r.prepended("on",t)},addTransition:function(t){this.transitions.indexOf(t)<0&&(this.transitions.push(t),this.addTransitionLifecycleNames(t))},addTransitionLifecycleNames:function(t){this.lifecycle.onBefore[t]=r.prepended("onBefore",t),this.lifecycle.onAfter[t]=r.prepended("onAfter",t),this.lifecycle.on[t]=r.prepended("on",t)},mapTransition:function(t){var e=t.name,i=t.from,n=t.to;return this.addState(i),"function"!=typeof n&&this.addState(n),this.addTransition(e),this.map[i][e]=t,t},configureLifecycle:function(){return{onBefore:{transition:"onBeforeTransition"},onAfter:{transition:"onAfterTransition"},onEnter:{state:"onEnterState"},onLeave:{state:"onLeaveState"},on:{transition:"onTransition"}}},configureInitTransition:function(t){return"string"==typeof t?this.mapTransition(n({},this.defaults.init,{to:t,active:!0})):"object"==typeof t?this.mapTransition(n({},this.defaults.init,t,{active:!0})):(this.addState(this.defaults.init.from),this.defaults.init)},configureData:function(t){return"function"==typeof t?t:"object"==typeof t?function(){return t}:function(){return{}}},configureMethods:function(t){return t||{}},configurePlugins:function(t,e){var i,n,r;for(i=0,n=(t=t||[]).length;i<n;i++)"function"==typeof(r=t[i])&&(t[i]=r=r()),r.configure&&r.configure(this);return t},configureTransitions:function(t){var e,i,n,r,s,o=this.defaults.wildcard;for(i=0;i<t.length;i++)for(n=t[i],r=Array.isArray(n.from)?n.from:[n.from||o],s=n.to||o,e=0;e<r.length;e++)this.mapTransition({name:n.name,from:r[e],to:s})},transitionFor:function(t,e){var i=this.defaults.wildcard;return this.map[t][e]||this.map[i][e]},transitionsFor:function(t){var e=this.defaults.wildcard;return Object.keys(this.map[t]).concat(Object.keys(this.map[e]))},allStates:function(){return this.states},allTransitions:function(){return this.transitions}}),t.exports=s},function(t,e,i){var n=i(0),r=i(6),s=i(1),o=[null,[]];function a(t,e){this.context=t,this.config=e,this.state=e.init.from,this.observers=[t]}n(a.prototype,{init:function(t){if(n(this.context,this.config.data.apply(this.context,t)),s.hook(this,"init"),this.config.init.active)return this.fire(this.config.init.name,[])},is:function(t){return Array.isArray(t)?t.indexOf(this.state)>=0:this.state===t},isPending:function(){return this.pending},can:function(t){return!this.isPending()&&!!this.seek(t)},cannot:function(t){return!this.can(t)},allStates:function(){return this.config.allStates()},allTransitions:function(){return this.config.allTransitions()},transitions:function(){return this.config.transitionsFor(this.state)},seek:function(t,e){var i=this.config.defaults.wildcard,n=this.config.transitionFor(this.state,t),r=n&&n.to;return"function"==typeof r?r.apply(this.context,e):r===i?this.state:r},fire:function(t,e){return this.transit(t,this.state,this.seek(t,e),e)},transit:function(t,e,i,n){var r=this.config.lifecycle,s=this.config.options.observeUnchangedState||e!==i;return i?this.isPending()?this.context.onPendingTransition(t,e,i):(this.config.addState(i),this.beginTransit(),n.unshift({transition:t,from:e,to:i,fsm:this.context}),this.observeEvents([this.observersForEvent(r.onBefore.transition),this.observersForEvent(r.onBefore[t]),s?this.observersForEvent(r.onLeave.state):o,s?this.observersForEvent(r.onLeave[e]):o,this.observersForEvent(r.on.transition),s?["doTransit",[this]]:o,s?this.observersForEvent(r.onEnter.state):o,s?this.observersForEvent(r.onEnter[i]):o,s?this.observersForEvent(r.on[i]):o,this.observersForEvent(r.onAfter.transition),this.observersForEvent(r.onAfter[t]),this.observersForEvent(r.on[t])],n)):this.context.onInvalidTransition(t,e,i)},beginTransit:function(){this.pending=!0},endTransit:function(t){return this.pending=!1,t},failTransit:function(t){throw this.pending=!1,t},doTransit:function(t){this.state=t.to},observe:function(t){if(2===t.length){var e={};e[t[0]]=t[1],this.observers.push(e)}else this.observers.push(t[0])},observersForEvent:function(t){for(var e,i=0,n=this.observers.length,r=[];i<n;i++)(e=this.observers[i])[t]&&r.push(e);return[t,r,!0]},observeEvents:function(t,e,i,n){if(0===t.length)return this.endTransit(void 0===n||n);var r=t[0][0],o=t[0][1],a=t[0][2];if(e[0].event=r,r&&a&&r!==i&&s.hook(this,"lifecycle",e),0===o.length)return t.shift(),this.observeEvents(t,e,r,n);var l=o.shift(),h=l[r].apply(l,e);return h&&"function"==typeof h.then?h.then(this.observeEvents.bind(this,t,e,r)).catch(this.failTransit.bind(this)):!1===h?this.endTransit(!1):this.observeEvents(t,e,r,h)},onInvalidTransition:function(t,e,i){throw new r("transition is invalid in current state",t,e,i,this.state)},onPendingTransition:function(t,e,i){throw new r("transition is invalid while previous transition is still in progress",t,e,i,this.state)}}),t.exports=a},function(t,e,i){"use strict";var n=i(0),r=i(2),s=i(1),o=i(3),a=i(4),l={is:function(t){return this._fsm.is(t)},can:function(t){return this._fsm.can(t)},cannot:function(t){return this._fsm.cannot(t)},observe:function(){return this._fsm.observe(arguments)},transitions:function(){return this._fsm.transitions()},allTransitions:function(){return this._fsm.allTransitions()},allStates:function(){return this._fsm.allStates()},onInvalidTransition:function(t,e,i){return this._fsm.onInvalidTransition(t,e,i)},onPendingTransition:function(t,e,i){return this._fsm.onPendingTransition(t,e,i)}},h={state:{configurable:!1,enumerable:!0,get:function(){return this._fsm.state},set:function(t){throw Error("use transitions to change state")}}};function u(t){return c(this||{},t)}function c(t,e){return f(t,new o(e,u)),t._fsm(),t}function f(t,e){if("object"!=typeof t||Array.isArray(t))throw Error("StateMachine can only be applied to objects");s.build(t,e),Object.defineProperties(t,h),n(t,l),n(t,e.methods),e.allTransitions().forEach(function(e){t[r(e)]=function(){return this._fsm.fire(e,[].slice.call(arguments))}}),t._fsm=function(){this._fsm=new a(this,e),this._fsm.init(arguments)}}u.version="3.0.1",u.factory=function(){var t,e;"function"==typeof arguments[0]?(t=arguments[0],e=arguments[1]||{}):(t=function(){this._fsm.apply(this,arguments)},e=arguments[0]||{});var i=new o(e,u);return f(t.prototype,i),t.prototype._fsm.config=i,t},u.apply=c,u.defaults={wildcard:"*",init:{name:"init",from:"none"}},t.exports=u},function(t,e,i){"use strict";t.exports=function(t,e,i,n,r){this.message=t,this.transition=e,this.from=i,this.to=n,this.current=r}}])})},function(t,e,i){var n=i(18);"string"==typeof n&&(n=[[t.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};i(20)(n,r);n.locals&&(t.exports=n.locals)},function(t,e,i){(e=t.exports=i(19)(!1)).push([t.i,'body {\n  background: #666; }\n\n.elements {\n  min-width: 100px;\n  min-height: 100px;\n  background: #FFF;\n  position: fixed;\n  left: 1em;\n  top: 1em; }\n  .elements:before {\n    width: 10px;\n    height: 10px;\n    content: "Elements list";\n    color: lightblue; }\n\n.control {\n  min-width: 100px;\n  padding: 4px;\n  margin: auto;\n  text-align: center; }\n  .control button {\n    margin: 0 8px; }\n\n#gameBox {\n  min-width: 300px;\n  width: 100%;\n  height: 360px;\n  margin: auto;\n  background: #666;\n  overflow: hidden;\n  position: relative; }\n\n.gift {\n  width: 20px;\n  height: 20px;\n  background: #E6E;\n  border-radius: 15px;\n  border: 1px solid #D3D;\n  position: absolute; }\n\n#gameBox .catcher {\n  width: 16%;\n  height: 20px;\n  display: inline-block;\n  background: lightblue; }\n\n#orientation {\n  min-width: 300px;\n  width: 100%;\n  height: 40px;\n  background: #DDD;\n  color: #333;\n  margin: auto; }\n\n.hide {\n  display: none; }\n\nbutton {\n  border: 1px solid #DDD;\n  border-radius: 15px;\n  padding: 2px 12px; }\n  button:disabled {\n    color: #CCC;\n    background: #666; }\n',""]),e.locals={elements:"elements",control:"control",gameBox:"gameBox",gift:"gift",catcher:"catcher",orientation:"orientation",hide:"hide"}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var i=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var r=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(n),s=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[i].concat(s).concat([r]).join("\n")}return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i}).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},r=0;r<this.length;r++){var s=this[r][0];"number"==typeof s&&(n[s]=!0)}for(r=0;r<t.length;r++){var o=t[r];"number"==typeof o[0]&&n[o[0]]||(i&&!o[2]?o[2]=i:i&&(o[2]="("+o[2]+") and ("+i+")"),e.push(o))}},e}},function(t,e,i){var n={},r=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),s=function(t){var e={};return function(t,i){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,i);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),o=null,a=0,l=[],h=i(21);function u(t,e){for(var i=0;i<t.length;i++){var r=t[i],s=n[r.id];if(s){s.refs++;for(var o=0;o<s.parts.length;o++)s.parts[o](r.parts[o]);for(;o<r.parts.length;o++)s.parts.push(m(r.parts[o],e))}else{var a=[];for(o=0;o<r.parts.length;o++)a.push(m(r.parts[o],e));n[r.id]={id:r.id,refs:1,parts:a}}}}function c(t,e){for(var i=[],n={},r=0;r<t.length;r++){var s=t[r],o=e.base?s[0]+e.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};n[o]?n[o].parts.push(a):i.push(n[o]={id:o,parts:[a]})}return i}function f(t,e){var i=s(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=l[l.length-1];if("top"===t.insertAt)n?n.nextSibling?i.insertBefore(e,n.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),l.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=s(t.insertAt.before,i);i.insertBefore(e,r)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function d(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return i.nc}();n&&(t.attrs.nonce=n)}return _(e,t.attrs),f(t,e),e}function _(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})}function m(t,e){var i,n,r,s;if(e.transform&&t.css){if(!(s=e.transform(t.css)))return function(){};t.css=s}if(e.singleton){var l=a++;i=o||(o=d(e)),n=v.bind(null,i,l,!1),r=v.bind(null,i,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",_(e,t.attrs),f(t,e),e}(e),n=function(t,e,i){var n=i.css,r=i.sourceMap,s=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||s)&&(n=h(n));r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,i,e),r=function(){p(i),i.href&&URL.revokeObjectURL(i.href)}):(i=d(e),n=function(t,e){var i=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),r=function(){p(i)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else r()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=r()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=c(t,e);return u(i,e),function(t){for(var r=[],s=0;s<i.length;s++){var o=i[s];(a=n[o.id]).refs--,r.push(a)}t&&u(c(t,e),e);for(s=0;s<r.length;s++){var a;if(0===(a=r[s]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete n[a.id]}}}};var g=function(){var t=[];return function(e,i){return t[e]=i,t.filter(Boolean).join("\n")}}();function v(t,e,i,n){var r=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=g(e,r);else{var s=document.createTextNode(r),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(s,o[e]):t.appendChild(s)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,n=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var r,s=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?t:(r=0===s.indexOf("//")?s:0===s.indexOf("/")?i+s:n+s.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,