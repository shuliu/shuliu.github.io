!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=112)}([function(t,e,i){"use strict";(function(t,n){i.d(e,"f",function(){return r}),i.d(e,"h",function(){return s}),i.d(e,"g",function(){return o}),i.d(e,"d",function(){return l}),i.d(e,"a",function(){return u}),i.d(e,"b",function(){return c}),i.d(e,"e",function(){return f}),i.d(e,"c",function(){return h});
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var r="undefined"!=typeof window?window:void 0!==t&&t.exports&&void 0!==n?n:{},o=function(t,e){var i={},n=t.document,r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(r.TweenLite)return r.TweenLite;var o,s,a,l,u,c=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},f=c("com.greensock"),h=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},p=function(){},d=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),g={},_=function(t,e,n,o){this.sc=g[t]?g[t].sc:[],g[t]=this,this.gsClass=null,this.func=n;var s=[];this.check=function(a){for(var l,u,f,h,p=e.length,d=p;--p>-1;)(l=g[e[p]]||new _(e[p],[])).gsClass?(s[p]=l.gsClass,d--):a&&l.sc.push(this);if(0===d&&n)for(f=(u=("com.greensock."+t).split(".")).pop(),h=c(u.join("."))[f]=this.gsClass=n.apply(n,s),o&&(r[f]=i[f]=h),p=0;p<this.sc.length;p++)this.sc[p].check()},this.check(!0)},m=t._gsDefine=function(t,e,i,n){return new _(t,e,i,n)},v=f._class=function(t,e,i){return e=e||function(){},m(t,[],function(){return e},i),e};m.globals=r;var y=[0,0,1,1],x=v("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?y.concat(e):y},!0),b=x.map={},w=x.register=function(t,e,i,n){for(var r,o,s,a,l=e.split(","),u=l.length,c=(i||"easeIn,easeOut,easeInOut").split(",");--u>-1;)for(o=l[u],r=n?v("easing."+o,null,!0):f.easing[o]||{},s=c.length;--s>-1;)a=c[s],b[o+"."+a]=b[a+o]=r[a]=t.getRatio?t:t[a]||new t};for((a=x.prototype)._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=(o=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--s>-1;)a=o[s]+",Power"+s,w(new x(null,null,1,s),a,"easeOut",!0),w(new x(null,null,2,s),a,"easeIn"+(0===s?",easeNone":"")),w(new x(null,null,3,s),a,"easeInOut");b.linear=f.easing.Linear.easeIn,b.swing=f.easing.Quad.easeInOut;var T=v("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(a=T.prototype).addEventListener=function(t,e,i,n,r){r=r||0;var o,s,a=this._listeners[t],c=0;for(this!==l||u||l.wake(),null==a&&(this._listeners[t]=a=[]),s=a.length;--s>-1;)(o=a[s]).c===e&&o.s===i?a.splice(s,1):0===c&&o.pr<r&&(c=s+1);a.splice(c,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for((e=r.length)>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)(n=r[e])&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var S=t.requestAnimationFrame,P=t.cancelAnimationFrame,O=Date.now||function(){return(new Date).getTime()},k=O();for(s=(o=["ms","moz","webkit","o"]).length;--s>-1&&!S;)S=t[o[s]+"RequestAnimationFrame"],P=t[o[s]+"CancelAnimationFrame"]||t[o[s]+"CancelRequestAnimationFrame"];v("Ticker",function(t,e){var i,r,o,s,a,c=this,f=O(),h=!(!1===e||!S)&&"auto",d=500,g=33,_=function(t){var e,n,l=O()-k;l>d&&(f+=l-g),k+=l,c.time=(k-f)/1e3,e=c.time-a,(!i||e>0||!0===t)&&(c.frame++,a+=e+(e>=s?.004:s-e),n=!0),!0!==t&&(o=r(_)),n&&c.dispatchEvent("tick")};T.call(c),c.time=c.frame=0,c.tick=function(){_(!0)},c.lagSmoothing=function(t,e){if(!arguments.length)return d<1e10;d=t||1e10,g=Math.min(e,d,0)},c.sleep=function(){null!=o&&(h&&P?P(o):clearTimeout(o),r=p,o=null,c===l&&(u=!1))},c.wake=function(t){null!==o?c.sleep():t?f+=-k+(k=O()):c.frame>10&&(k=O()-d+5),r=0===i?p:h&&S?S:function(t){return setTimeout(t,1e3*(a-c.time)+1|0)},c===l&&(u=!0),_(2)},c.fps=function(t){if(!arguments.length)return i;s=1/((i=t)||60),a=this.time+s,c.wake()},c.useRAF=function(t){if(!arguments.length)return h;c.sleep(),h=t,c.fps(i)},c.fps(t),setTimeout(function(){"auto"===h&&c.frame<5&&"hidden"!==(n||{}).visibilityState&&c.useRAF(!1)},1500)}),(a=f.Ticker.prototype=new f.events.EventDispatcher).constructor=f.Ticker;var C=v("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,H){u||l.wake();var i=this.vars.useFrames?G:H;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=C.ticker=new f.Ticker,(a=C.prototype)._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var A=function(){u&&O()-k>2e3&&("hidden"!==(n||{}).visibilityState||!l.lagSmoothing())&&l.wake();var t=setTimeout(A,2e3);t.unref&&t.unref()};A(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},a._enabled=function(t,e){return u||l.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(n?n.length:0){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=d(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(u||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(L.length&&$(),this.render(t,e,!1),L.length&&$())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||1e-10,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(u||t||l.wake(),i=(e=n.rawTime())-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var M=v("core.SimpleTimeline",function(t){C.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(a=M.prototype=new C).constructor=M,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,o;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(o=t._startTime;r&&r._startTime>o;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return u||l.wake(),this._totalTime};var E=v("TweenLite",function(e,i,n){if(C.call(this,i,n),this.render=E.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:E.selector(e)||e;var r,o,s,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?V[E.defaultOverwrite]:"number"==typeof l?l>>0:V[l],(a||e instanceof Array||e.push&&d(e))&&"number"!=typeof e[0])for(this._targets=s=h(e),this._propLookup=[],this._siblings=[],r=0;r<s.length;r++)(o=s[r])?"string"!=typeof o?o.length&&o!==t&&o[0]&&(o[0]===t||o[0].nodeType&&o[0].style&&!o.nodeType)?(s.splice(r--,1),this._targets=s=s.concat(h(o))):(this._siblings[r]=Z(o,this,!1),1===l&&this._siblings[r].length>1&&J(o,this,null,1,this._siblings[r])):"string"==typeof(o=s[r--]=E.selector(o))&&s.splice(r+1,1):s.splice(r--,1);else this._propLookup={},this._siblings=Z(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-1e-10,this.render(Math.min(0,-this._delay)))},!0),R=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)};(a=E.prototype=new C).constructor=E,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,E.version="2.0.2",E.defaultEase=a._ease=new x(null,null,1,1),E.defaultOverwrite="auto",E.ticker=l,E.autoSleep=120,E.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},E.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(E.selector=i,i(e)):(n||(n=t.document),n?n.querySelectorAll?n.querySelectorAll(e):n.getElementById("#"===e.charAt(0)?e.substr(1):e):e)};var L=[],D={},F=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,N=/[\+-]=-?[\.\d]/,I=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&e>-1e-6&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},B=function(t,e,i,n){var r,o,s,a,l,u,c,f=[],h=0,p="",d=0;for(f.start=t,f.end=e,t=f[0]=t+"",e=f[1]=e+"",i&&(i(f),t=f[0],e=f[1]),f.length=0,r=t.match(F)||[],o=e.match(F)||[],n&&(n._next=null,n.blob=1,f._firstPT=f._applyPT=n),l=o.length,a=0;a<l;a++)c=o[a],p+=(u=e.substr(h,e.indexOf(c,h)-h))||!a?u:",",h+=u.length,d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),c===r[a]||r.length<=a?p+=c:(p&&(f.push(p),p=""),s=parseFloat(r[a]),f.push(s),f._firstPT={_next:f._firstPT,t:f,p:f.length-1,s:s,c:("="===c.charAt(1)?parseInt(c.charAt(0)+"1",10)*parseFloat(c.substr(2)):parseFloat(c)-s)||0,f:0,m:d&&d<4?Math.round:0}),h+=c.length;return(p+=e.substr(h))&&f.push(p),f.setRatio=I,N.test(e)&&(f.end=null),f},j=function(t,e,i,n,r,o,s,a,l){"function"==typeof n&&(n=n(l||0,t));var u=typeof t[e],c="function"!==u?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),f="get"!==i?i:c?s?t[c](s):t[c]():t[e],h="string"==typeof n&&"="===n.charAt(1),p={t:t,p:e,s:f,f:"function"===u,pg:0,n:r||e,m:o?"function"==typeof o?o:Math.round:0,pr:0,c:h?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-f||0};if(("number"!=typeof f||"number"!=typeof n&&!h)&&(s||isNaN(f)||!h&&isNaN(n)||"boolean"==typeof f||"boolean"==typeof n?(p.fp=s,p={t:B(f,h?parseFloat(p.s)+p.c+(p.s+"").replace(/[0-9\-\.]/g,""):n,a||E.defaultStringFilter,p),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(p.s=parseFloat(f),h||(p.c=parseFloat(n)-p.s||0))),p.c)return(p._next=this._firstPT)&&(p._next._prev=p),this._firstPT=p,p},X=E._internals={isArray:d,isSelector:R,lazyTweens:L,blobDif:B},Y=E._plugins={},z=X.tweenLookup={},W=0,U=X.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},V={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},G=C._rootFramesTimeline=new M,H=C._rootTimeline=new M,q=30,$=X.lazyRender=function(){var t,e=L.length;for(D={};--e>-1;)(t=L[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);L.length=0};H._startTime=l.time,G._startTime=l.frame,H._active=G._active=!0,setTimeout($,1),C._updateRoot=E.render=function(){var t,e,i;if(L.length&&$(),H.render((l.time-H._startTime)*H._timeScale,!1,!1),G.render((l.frame-G._startTime)*G._timeScale,!1,!1),L.length&&$(),l.frame>=q){for(i in q=l.frame+(parseInt(E.autoSleep,10)||120),z){for(t=(e=z[i].tweens).length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete z[i]}if((!(i=H._first)||i._paused)&&E.autoSleep&&!G._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",C._updateRoot);var Z=function(t,e,i){var n,r,o=t._gsTweenID;if(z[o||(t._gsTweenID=o="t"+W++)]||(z[o]={target:t,tweens:[]}),e&&((n=z[o].tweens)[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return z[o].tweens},K=function(t,e,i,n){var r,o,s=t.vars.onOverwrite;return s&&(r=s(t,e,i,n)),(s=E.onOverwrite)&&(o=s(t,e,i,n)),!1!==r&&!1!==o},J=function(t,e,i,n,r){var o,s,a,l;if(1===n||n>=4){for(l=r.length,o=0;o<l;o++)if((a=r[o])!==e)a._gc||a._kill(null,t,e)&&(s=!0);else if(5===n)break;return s}var u,c=e._startTime+1e-10,f=[],h=0,p=0===e._duration;for(o=r.length;--o>-1;)(a=r[o])===e||a._gc||a._paused||(a._timeline!==e._timeline?(u=u||Q(e,0,p),0===Q(a,u,p)&&(f[h++]=a)):a._startTime<=c&&a._startTime+a.totalDuration()/a._timeScale>c&&((p||!a._initted)&&c-a._startTime<=2e-10||(f[h++]=a)));for(o=h;--o>-1;)if(l=(a=f[o])._firstPT,2===n&&a._kill(i,t,e)&&(s=!0),2!==n||!a._firstPT&&a._initted&&l){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(s=!0)}return s},Q=function(t,e,i){for(var n=t._timeline,r=n._timeScale,o=t._startTime;n._timeline;){if(o+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return(o/=r)>e?o-e:i&&o===e||!t._initted&&o-e<2e-10?1e-10:(o+=t.totalDuration()/t._timeScale/r)>e+1e-10?0:o-e-1e-10};a._init=function(){var t,e,i,n,r,o,s=this.vars,a=this._overwrittenProps,l=this._duration,u=!!s.immediateRender,c=s.ease;if(s.startAt){for(n in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={},s.startAt)r[n]=s.startAt[n];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=u&&!1!==s.lazy,r.startAt=r.delay=null,r.onUpdate=s.onUpdate,r.onUpdateParams=s.onUpdateParams,r.onUpdateScope=s.onUpdateScope||s.callbackScope||this,this._startAt=E.to(this.target||{},0,r),u)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(s.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(n in 0!==this._time&&(u=!1),i={},s)U[n]&&"autoCSS"!==n||(i[n]=s[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=u&&!1!==s.lazy,i.immediateRender=u,this._startAt=E.to(this.target,0,i),u){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=c=c?c instanceof x?c:"function"==typeof c?new x(c,s.easeParams):b[c]||E.defaultEase:E.defaultEase,s.easeParams instanceof Array&&c.config&&(this._ease=c.config.apply(c,s.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(o=this._targets.length,t=0;t<o;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&E._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),s.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=s.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,o){var s,a,l,u,c,f;if(null==e)return!1;for(s in D[e._gsTweenID]&&$(),this.vars.css||e.style&&e!==t&&e.nodeType&&Y.css&&!1!==this.vars.autoCSS&&function(t,e){var i,n={};for(i in t)U[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!Y[i]||Y[i]&&Y[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n}(this.vars,e),this.vars)if(f=this.vars[s],U[s])f&&(f instanceof Array||f.push&&d(f))&&-1!==f.join("").indexOf("{self}")&&(this.vars[s]=f=this._swapSelfInParams(f,this));else if(Y[s]&&(u=new Y[s])._onInitTween(e,this.vars[s],this,o)){for(this._firstPT=c={_next:this._firstPT,t:u,p:"setRatio",s:0,c:1,f:1,n:s,pg:1,pr:u._priority,m:0},a=u._overwriteProps.length;--a>-1;)i[u._overwriteProps[a]]=this._firstPT;(u._priority||u._onInitAllProps)&&(l=!0),(u._onDisable||u._onEnable)&&(this._notifyPluginsOfEnabled=!0),c._next&&(c._next._prev=c)}else i[s]=j.call(this,e,s,"get",f,s,0,null,this.vars.stringFilter,o);return r&&this._kill(r,e)?this._initProps(e,i,n,r,o):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,o)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(D[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,o,s,a=this._time,l=this._duration,u=this._rawPrevTime;if(t>=l-1e-7&&t>=0)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(u<0||t<=0&&t>=-1e-7||1e-10===u&&"isPause"!==this.data)&&u!==t&&(i=!0,u>1e-10&&(r="onReverseComplete")),this._rawPrevTime=s=!e||t||u===t?t:1e-10);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&u>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(u>=0&&(1e-10!==u||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=s=!e||t||u===t?t:1e-10)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var c=t/l,f=this._easeType,h=this._easePower;(1===f||3===f&&c>=.5)&&(c=1-c),3===f&&(c*=2),1===h?c*=c:2===h?c*=c*c:3===h?c*=c*c*c:4===h&&(c*=c*c*c*c),this.ratio=1===f?1-c:2===f?c:t/l<.5?c/2:1-c/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,L.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&1e-10===this._rawPrevTime&&1e-10!==s&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:E.selector(e)||e;var n,r,o,s,a,l,u,c,f,h=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,p=this._firstPT;if((d(e)||R(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(u=t||a,c=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(E.onOverwrite||this.vars.onOverwrite)){for(o in u)a[o]&&(f||(f=[]),f.push(o));if((f||!t)&&!K(this,i,e,f))return!1}for(o in u)(s=a[o])&&(h&&(s.f?s.t[s.p](s.s):s.t[s.p]=s.s,l=!0),s.pg&&s.t._kill(u)&&(l=!0),s.pg&&0!==s.t._overwriteProps.length||(s._prev?s._prev._next=s._next:s===this._firstPT&&(this._firstPT=s._next),s._next&&(s._next._prev=s._prev),s._next=s._prev=null),delete a[o]),c&&(r[o]=1);!this._firstPT&&this._initted&&p&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&E._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],C.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-1e-10,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(u||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Z(n[i],this,!0);else this._siblings=Z(this.target,this,!0)}return C.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&E._onPluginEvent(t?"_onEnable":"_onDisable",this)},E.to=function(t,e,i){return new E(t,e,i)},E.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new E(t,e,i)},E.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new E(t,e,n)},E.delayedCall=function(t,e,i,n,r){return new E(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},E.set=function(t,e){return new E(t,0,e)},E.getTweensOf=function(t,e){if(null==t)return[];var i,n,r,o;if(t="string"!=typeof t?t:E.selector(t)||t,(d(t)||R(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(E.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(o=n[i],r=i;--r>-1;)o===n[r]&&n.splice(i,1)}else if(t._gsTweenID)for(i=(n=Z(t).concat()).length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n||[]},E.killTweensOf=E.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=E.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var tt=v("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=tt.prototype},!0);if(a=tt.prototype,tt.version="1.19.0",tt.API=2,a._firstPT=null,a._addTween=j,a.setRatio=I,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},E._onPluginEvent=function(t,e){var i,n,r,o,s,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(s=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:o)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:o=a,a=s}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},tt.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===tt.API&&(Y[(new t[e])._propName]=t[e]);return!0},m.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,o={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},s=v("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){tt.call(this,i,n),this._overwriteProps=r||[]},!0===t.global),a=s.prototype=new tt(i);for(e in a.constructor=s,s.API=t.API,o)"function"==typeof t[e]&&(a[o[e]]=t[e]);return s.version=t.version,tt.activate([s]),s},o=t._gsQueue){for(s=0;s<o.length;s++)o[s]();for(a in g)g[a].func||t.console.log("GSAP encountered missing dependency: "+a)}return u=!1,E}(r),s=r.GreenSockGlobals,a=s.com.greensock,l=a.core.SimpleTimeline,u=a.core.Animation,c=s.Ease,f=(s.Linear,s.Power1,s.Power2,s.Power3,s.Power4,s.TweenPlugin),h=a.events.EventDispatcher}).call(this,i(279)(t),i(82))},function(t,e,i){var n=i(3),r=i(9),o=i(14),s=i(11),a=i(21),l=function(t,e,i){var u,c,f,h,p=t&l.F,d=t&l.G,g=t&l.S,_=t&l.P,m=t&l.B,v=d?n:g?n[e]||(n[e]={}):(n[e]||{}).prototype,y=d?r:r[e]||(r[e]={}),x=y.prototype||(y.prototype={});for(u in d&&(i=e),i)f=((c=!p&&v&&void 0!==v[u])?v:i)[u],h=m&&c?a(f,n):_&&"function"==typeof f?a(Function.call,f):f,v&&s(v,u,f,t&l.U),y[u]!=f&&o(y,u,h),_&&x[u]!=f&&(x[u]=f)};n.core=r,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,t.exports=l},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var i=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=i)},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,i){var n=i(4);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e,i){var n=i(58)("wks"),r=i(30),o=i(3).Symbol,s="function"==typeof o;(t.exports=function(t){return n[t]||(n[t]=s&&o[t]||(s?o:r)("Symbol."+t))}).store=n},function(t,e,i){var n=i(5),r=i(83),o=i(27),s=Object.defineProperty;e.f=i(8)?Object.defineProperty:function(t,e,i){if(n(t),e=o(e,!0),n(i),r)try{return s(t,e,i)}catch(t){}if("get"in i||"set"in i)throw TypeError("Accessors not supported!");return"value"in i&&(t[e]=i.value),t}},function(t,e,i){t.exports=!i(2)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){var i=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=i)},function(t,e,i){var n=i(25),r=Math.min;t.exports=function(t){return t>0?r(n(t),9007199254740991):0}},function(t,e,i){var n=i(3),r=i(14),o=i(13),s=i(30)("src"),a=Function.toString,l=(""+a).split("toString");i(9).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,i,a){var u="function"==typeof i;u&&(o(i,"name")||r(i,"name",e)),t[e]!==i&&(u&&(o(i,s)||r(i,s,t[e]?""+t[e]:l.join(String(e)))),t===n?t[e]=i:a?t[e]?t[e]=i:r(t,e,i):(delete t[e],r(t,e,i)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[s]||a.call(this)})},function(t,e,i){var n=i(1),r=i(2),o=i(24),s=/"/g,a=function(t,e,i,n){var r=String(o(t)),a="<"+e;return""!==i&&(a+=" "+i+'="'+String(n).replace(s,"&quot;")+'"'),a+">"+r+"</"+e+">"};t.exports=function(t,e){var i={};i[t]=e(a),n(n.P+n.F*r(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",i)}},function(t,e){var i={}.hasOwnProperty;t.exports=function(t,e){return i.call(t,e)}},function(t,e,i){var n=i(7),r=i(29);t.exports=i(8)?function(t,e,i){return n.f(t,e,r(1,i))}:function(t,e,i){return t[e]=i,t}},function(t,e,i){var n=i(44),r=i(24);t.exports=function(t){return n(r(t))}},function(t,e,i){var n=i(24);t.exports=function(t){return Object(n(t))}},function(t,e,i){"use strict";var n=i(2);t.exports=function(t,e){return!!t&&n(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,i){var n=i(45),r=i(29),o=i(15),s=i(27),a=i(13),l=i(83),u=Object.getOwnPropertyDescriptor;e.f=i(8)?u:function(t,e){if(t=o(t),e=s(e,!0),l)try{return u(t,e)}catch(t){}if(a(t,e))return r(!n.f.call(t,e),t[e])}},function(t,e,i){var n=i(1),r=i(9),o=i(2);t.exports=function(t,e){var i=(r.Object||{})[t]||Object[t],s={};s[t]=e(i),n(n.S+n.F*o(function(){i(1)}),"Object",s)}},function(t,e,i){var n=i(21),r=i(44),o=i(16),s=i(10),a=i(206);t.exports=function(t,e){var i=1==t,l=2==t,u=3==t,c=4==t,f=6==t,h=5==t||f,p=e||a;return function(e,a,d){for(var g,_,m=o(e),v=r(m),y=n(a,d,3),x=s(v.length),b=0,w=i?p(e,x):l?p(e,0):void 0;x>b;b++)if((h||b in v)&&(_=y(g=v[b],b,m),t))if(i)w[b]=_;else if(_)switch(t){case 3:return!0;case 5:return g;case 6:return b;case 2:w.push(g)}else if(c)return!1;return f?-1:u||c?c:w}}},function(t,e,i){var n=i(22);t.exports=function(t,e,i){if(n(t),void 0===e)return t;switch(i){case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,r){return t.call(e,i,n,r)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var i={}.toString;t.exports=function(t){return i.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e){var i=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:i)(t)}},function(t,e,i){"use strict";if(i(8)){var n=i(31),r=i(3),o=i(2),s=i(1),a=i(56),l=i(81),u=i(21),c=i(41),f=i(29),h=i(14),p=i(42),d=i(25),g=i(10),_=i(108),m=i(33),v=i(27),y=i(13),x=i(48),b=i(4),w=i(16),T=i(74),S=i(34),P=i(36),O=i(35).f,k=i(76),C=i(30),A=i(6),M=i(20),E=i(46),R=i(53),L=i(78),D=i(38),F=i(50),N=i(40),I=i(77),B=i(100),j=i(7),X=i(18),Y=j.f,z=X.f,W=r.RangeError,U=r.TypeError,V=r.Uint8Array,G=Array.prototype,H=l.ArrayBuffer,q=l.DataView,$=M(0),Z=M(2),K=M(3),J=M(4),Q=M(5),tt=M(6),et=E(!0),it=E(!1),nt=L.values,rt=L.keys,ot=L.entries,st=G.lastIndexOf,at=G.reduce,lt=G.reduceRight,ut=G.join,ct=G.sort,ft=G.slice,ht=G.toString,pt=G.toLocaleString,dt=A("iterator"),gt=A("toStringTag"),_t=C("typed_constructor"),mt=C("def_constructor"),vt=a.CONSTR,yt=a.TYPED,xt=a.VIEW,bt=M(1,function(t,e){return Ot(R(t,t[mt]),e)}),wt=o(function(){return 1===new V(new Uint16Array([1]).buffer)[0]}),Tt=!!V&&!!V.prototype.set&&o(function(){new V(1).set({})}),St=function(t,e){var i=d(t);if(i<0||i%e)throw W("Wrong offset!");return i},Pt=function(t){if(b(t)&&yt in t)return t;throw U(t+" is not a typed array!")},Ot=function(t,e){if(!(b(t)&&_t in t))throw U("It is not a typed array constructor!");return new t(e)},kt=function(t,e){return Ct(R(t,t[mt]),e)},Ct=function(t,e){for(var i=0,n=e.length,r=Ot(t,n);n>i;)r[i]=e[i++];return r},At=function(t,e,i){Y(t,e,{get:function(){return this._d[i]}})},Mt=function(t){var e,i,n,r,o,s,a=w(t),l=arguments.length,c=l>1?arguments[1]:void 0,f=void 0!==c,h=k(a);if(void 0!=h&&!T(h)){for(s=h.call(a),n=[],e=0;!(o=s.next()).done;e++)n.push(o.value);a=n}for(f&&l>2&&(c=u(c,arguments[2],2)),e=0,i=g(a.length),r=Ot(this,i);i>e;e++)r[e]=f?c(a[e],e):a[e];return r},Et=function(){for(var t=0,e=arguments.length,i=Ot(this,e);e>t;)i[t]=arguments[t++];return i},Rt=!!V&&o(function(){pt.call(new V(1))}),Lt=function(){return pt.apply(Rt?ft.call(Pt(this)):Pt(this),arguments)},Dt={copyWithin:function(t,e){return B.call(Pt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return J(Pt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return I.apply(Pt(this),arguments)},filter:function(t){return kt(this,Z(Pt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Pt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){$(Pt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return it(Pt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Pt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ut.apply(Pt(this),arguments)},lastIndexOf:function(t){return st.apply(Pt(this),arguments)},map:function(t){return bt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return at.apply(Pt(this),arguments)},reduceRight:function(t){return lt.apply(Pt(this),arguments)},reverse:function(){for(var t,e=Pt(this).length,i=Math.floor(e/2),n=0;n<i;)t=this[n],this[n++]=this[--e],this[e]=t;return this},some:function(t){return K(Pt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ct.call(Pt(this),t)},subarray:function(t,e){var i=Pt(this),n=i.length,r=m(t,n);return new(R(i,i[mt]))(i.buffer,i.byteOffset+r*i.BYTES_PER_ELEMENT,g((void 0===e?n:m(e,n))-r))}},Ft=function(t,e){return kt(this,ft.call(Pt(this),t,e))},Nt=function(t){Pt(this);var e=St(arguments[1],1),i=this.length,n=w(t),r=g(n.length),o=0;if(r+e>i)throw W("Wrong length!");for(;o<r;)this[e+o]=n[o++]},It={entries:function(){return ot.call(Pt(this))},keys:function(){return rt.call(Pt(this))},values:function(){return nt.call(Pt(this))}},Bt=function(t,e){return b(t)&&t[yt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},jt=function(t,e){return Bt(t,e=v(e,!0))?f(2,t[e]):z(t,e)},Xt=function(t,e,i){return!(Bt(t,e=v(e,!0))&&b(i)&&y(i,"value"))||y(i,"get")||y(i,"set")||i.configurable||y(i,"writable")&&!i.writable||y(i,"enumerable")&&!i.enumerable?Y(t,e,i):(t[e]=i.value,t)};vt||(X.f=jt,j.f=Xt),s(s.S+s.F*!vt,"Object",{getOwnPropertyDescriptor:jt,defineProperty:Xt}),o(function(){ht.call({})})&&(ht=pt=function(){return ut.call(this)});var Yt=p({},Dt);p(Yt,It),h(Yt,dt,It.values),p(Yt,{slice:Ft,set:Nt,constructor:function(){},toString:ht,toLocaleString:Lt}),At(Yt,"buffer","b"),At(Yt,"byteOffset","o"),At(Yt,"byteLength","l"),At(Yt,"length","e"),Y(Yt,gt,{get:function(){return this[yt]}}),t.exports=function(t,e,i,l){var u=t+((l=!!l)?"Clamped":"")+"Array",f="get"+t,p="set"+t,d=r[u],m=d||{},v=d&&P(d),y=!d||!a.ABV,w={},T=d&&d.prototype,k=function(t,i){Y(t,i,{get:function(){return function(t,i){var n=t._d;return n.v[f](i*e+n.o,wt)}(this,i)},set:function(t){return function(t,i,n){var r=t._d;l&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),r.v[p](i*e+r.o,n,wt)}(this,i,t)},enumerable:!0})};y?(d=i(function(t,i,n,r){c(t,d,u,"_d");var o,s,a,l,f=0,p=0;if(b(i)){if(!(i instanceof H||"ArrayBuffer"==(l=x(i))||"SharedArrayBuffer"==l))return yt in i?Ct(d,i):Mt.call(d,i);o=i,p=St(n,e);var m=i.byteLength;if(void 0===r){if(m%e)throw W("Wrong length!");if((s=m-p)<0)throw W("Wrong length!")}else if((s=g(r)*e)+p>m)throw W("Wrong length!");a=s/e}else a=_(i),o=new H(s=a*e);for(h(t,"_d",{b:o,o:p,l:s,e:a,v:new q(o)});f<a;)k(t,f++)}),T=d.prototype=S(Yt),h(T,"constructor",d)):o(function(){d(1)})&&o(function(){new d(-1)})&&F(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=i(function(t,i,n,r){var o;return c(t,d,u),b(i)?i instanceof H||"ArrayBuffer"==(o=x(i))||"SharedArrayBuffer"==o?void 0!==r?new m(i,St(n,e),r):void 0!==n?new m(i,St(n,e)):new m(i):yt in i?Ct(d,i):Mt.call(d,i):new m(_(i))}),$(v!==Function.prototype?O(m).concat(O(v)):O(m),function(t){t in d||h(d,t,m[t])}),d.prototype=T,n||(T.constructor=d));var C=T[dt],A=!!C&&("values"==C.name||void 0==C.name),M=It.values;h(d,_t,!0),h(T,yt,u),h(T,xt,!0),h(T,mt,d),(l?new d(1)[gt]==u:gt in T)||Y(T,gt,{get:function(){return u}}),w[u]=d,s(s.G+s.W+s.F*(d!=m),w),s(s.S,u,{BYTES_PER_ELEMENT:e}),s(s.S+s.F*o(function(){m.of.call(d,1)}),u,{from:Mt,of:Et}),"BYTES_PER_ELEMENT"in T||h(T,"BYTES_PER_ELEMENT",e),s(s.P,u,Dt),N(u),s(s.P+s.F*Tt,u,{set:Nt}),s(s.P+s.F*!A,u,It),n||T.toString==ht||(T.toString=ht),s(s.P+s.F*o(function(){new d(1).slice()}),u,{slice:Ft}),s(s.P+s.F*(o(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!o(function(){T.toLocaleString.call([1,2])})),u,{toLocaleString:Lt}),D[u]=A?C:M,n||A||h(T,dt,M)}}else t.exports=function(){}},function(t,e,i){var n=i(4);t.exports=function(t,e){if(!n(t))return t;var i,r;if(e&&"function"==typeof(i=t.toString)&&!n(r=i.call(t)))return r;if("function"==typeof(i=t.valueOf)&&!n(r=i.call(t)))return r;if(!e&&"function"==typeof(i=t.toString)&&!n(r=i.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},function(t,e,i){var n=i(30)("meta"),r=i(4),o=i(13),s=i(7).f,a=0,l=Object.isExtensible||function(){return!0},u=!i(2)(function(){return l(Object.preventExtensions({}))}),c=function(t){s(t,n,{value:{i:"O"+ ++a,w:{}}})},f=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!r(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,n)){if(!l(t))return"F";if(!e)return"E";c(t)}return t[n].i},getWeak:function(t,e){if(!o(t,n)){if(!l(t))return!0;if(!e)return!1;c(t)}return t[n].w},onFreeze:function(t){return u&&f.NEED&&l(t)&&!o(t,n)&&c(t),t}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var i=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++i+n).toString(36))}},function(t,e){t.exports=!1},function(t,e,i){var n=i(85),r=i(61);t.exports=Object.keys||function(t){return n(t,r)}},function(t,e,i){var n=i(25),r=Math.max,o=Math.min;t.exports=function(t,e){return(t=n(t))<0?r(t+e,0):o(t,e)}},function(t,e,i){var n=i(5),r=i(86),o=i(61),s=i(60)("IE_PROTO"),a=function(){},l=function(){var t,e=i(57)("iframe"),n=o.length;for(e.style.display="none",i(63).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;n--;)delete l.prototype[o[n]];return l()};t.exports=Object.create||function(t,e){var i;return null!==t?(a.prototype=n(t),i=new a,a.prototype=null,i[s]=t):i=l(),void 0===e?i:r(i,e)}},function(t,e,i){var n=i(85),r=i(61).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,r)}},function(t,e,i){var n=i(13),r=i(16),o=i(60)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=r(t),n(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,i){var n=i(7).f,r=i(13),o=i(6)("toStringTag");t.exports=function(t,e,i){t&&!r(t=i?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},function(t,e){t.exports={}},function(t,e,i){var n=i(6)("unscopables"),r=Array.prototype;void 0==r[n]&&i(14)(r,n,{}),t.exports=function(t){r[n][t]=!0}},function(t,e,i){"use strict";var n=i(3),r=i(7),o=i(8),s=i(6)("species");t.exports=function(t){var e=n[t];o&&e&&!e[s]&&r.f(e,s,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,i,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(i+": incorrect invocation!");return t}},function(t,e,i){var n=i(11);t.exports=function(t,e,i){for(var r in e)n(t,r,e[r],i);return t}},function(t,e,i){var n=i(4);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,i){var n=i(23);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,i){var n=i(15),r=i(10),o=i(33);t.exports=function(t){return function(e,i,s){var a,l=n(e),u=r(l.length),c=o(s,u);if(t&&i!=i){for(;u>c;)if((a=l[c++])!=a)return!0}else for(;u>c;c++)if((t||c in l)&&l[c]===i)return t||c||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,i){var n=i(23),r=i(6)("toStringTag"),o="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,i,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(i=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),r))?i:o?n(e):"Object"==(s=n(e))&&"function"==typeof e.callee?"Arguments":s}},function(t,e,i){var n=i(1),r=i(24),o=i(2),s=i(65),a="["+s+"]",l=RegExp("^"+a+a+"*"),u=RegExp(a+a+"*$"),c=function(t,e,i){var r={},a=o(function(){return!!s[t]()||"​"!="​"[t]()}),l=r[t]=a?e(f):s[t];i&&(r[i]=l),n(n.P+n.F*a,"String",r)},f=c.trim=function(t,e){return t=String(r(t)),1&e&&(t=t.replace(l,"")),2&e&&(t=t.replace(u,"")),t};t.exports=c},function(t,e,i){var n=i(6)("iterator"),r=!1;try{var o=[7][n]();o.return=function(){r=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!r)return!1;var i=!1;try{var o=[7],s=o[n]();s.next=function(){return{done:i=!0}},o[n]=function(){return s},t(o)}catch(t){}return i}},function(t,e,i){"use strict";var n=i(14),r=i(11),o=i(2),s=i(24),a=i(6);t.exports=function(t,e,i){var l=a(t),u=i(s,l,""[t]),c=u[0],f=u[1];o(function(){var e={};return e[l]=function(){return 7},7!=""[t](e)})&&(r(String.prototype,t,c),n(RegExp.prototype,l,2==e?function(t,e){return f.call(t,this,e)}:function(t){return f.call(t,this)}))}},function(t,e,i){var n=i(21),r=i(98),o=i(74),s=i(5),a=i(10),l=i(76),u={},c={};(e=t.exports=function(t,e,i,f,h){var p,d,g,_,m=h?function(){return t}:l(t),v=n(i,f,e?2:1),y=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(o(m)){for(p=a(t.length);p>y;y++)if((_=e?v(s(d=t[y])[0],d[1]):v(t[y]))===u||_===c)return _}else for(g=m.call(t);!(d=g.next()).done;)if((_=r(g,v,d.value,e))===u||_===c)return _}).BREAK=u,e.RETURN=c},function(t,e,i){var n=i(5),r=i(22),o=i(6)("species");t.exports=function(t,e){var i,s=n(t).constructor;return void 0===s||void 0==(i=n(s)[o])?e:r(i)}},function(t,e,i){var n=i(3).navigator;t.exports=n&&n.userAgent||""},function(t,e,i){"use strict";var n=i(3),r=i(1),o=i(11),s=i(42),a=i(28),l=i(52),u=i(41),c=i(4),f=i(2),h=i(50),p=i(37),d=i(66);t.exports=function(t,e,i,g,_,m){var v=n[t],y=v,x=_?"set":"add",b=y&&y.prototype,w={},T=function(t){var e=b[t];o(b,t,"delete"==t?function(t){return!(m&&!c(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!c(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!c(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,i){return e.call(this,0===t?0:t,i),this})};if("function"==typeof y&&(m||b.forEach&&!f(function(){(new y).entries().next()}))){var S=new y,P=S[x](m?{}:-0,1)!=S,O=f(function(){S.has(1)}),k=h(function(t){new y(t)}),C=!m&&f(function(){for(var t=new y,e=5;e--;)t[x](e,e);return!t.has(-0)});k||((y=e(function(e,i){u(e,y,t);var n=d(new v,e,y);return void 0!=i&&l(i,_,n[x],n),n})).prototype=b,b.constructor=y),(O||C)&&(T("delete"),T("has"),_&&T("get")),(C||P)&&T(x),m&&b.clear&&delete b.clear}else y=g.getConstructor(e,t,_,x),s(y.prototype,i),a.NEED=!0;return p(y,t),w[t]=y,r(r.G+r.W+r.F*(y!=v),w),m||g.setStrong(y,t,_),y}},function(t,e,i){for(var n,r=i(3),o=i(14),s=i(30),a=s("typed_array"),l=s("view"),u=!(!r.ArrayBuffer||!r.DataView),c=u,f=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(n=r[h[f++]])?(o(n.prototype,a,!0),o(n.prototype,l,!0)):c=!1;t.exports={ABV:u,CONSTR:c,TYPED:a,VIEW:l}},function(t,e,i){var n=i(4),r=i(3).document,o=n(r)&&n(r.createElement);t.exports=function(t){return o?r.createElement(t):{}}},function(t,e,i){var n=i(9),r=i(3),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:i(31)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e,i){e.f=i(6)},function(t,e,i){var n=i(58)("keys"),r=i(30);t.exports=function(t){return n[t]||(n[t]=r(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,i){var n=i(23);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,i){var n=i(3).document;t.exports=n&&n.documentElement},function(t,e,i){var n=i(4),r=i(5),o=function(t,e){if(r(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=i(21)(Function.call,i(18).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,i){return o(t,i),e?t.__proto__=i:n(t,i),t}}({},!1):void 0),check:o}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,i){var n=i(4),r=i(64).set;t.exports=function(t,e,i){var o,s=e.constructor;return s!==i&&"function"==typeof s&&(o=s.prototype)!==i.prototype&&n(o)&&r&&r(t,o),t}},function(t,e,i){"use strict";var n=i(25),r=i(24);t.exports=function(t){var e=String(r(this)),i="",o=n(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(i+=e);return i}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var i=Math.expm1;t.exports=!i||i(10)>22025.465794806718||i(10)<22025.465794806718||-2e-17!=i(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:i},function(t,e,i){"use strict";var n=i(31),r=i(1),o=i(11),s=i(14),a=i(38),l=i(97),u=i(37),c=i(36),f=i(6)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,i,d,g,_,m){l(i,e,d);var v,y,x,b=function(t){if(!h&&t in P)return P[t];switch(t){case"keys":case"values":return function(){return new i(this,t)}}return function(){return new i(this,t)}},w=e+" Iterator",T="values"==g,S=!1,P=t.prototype,O=P[f]||P["@@iterator"]||g&&P[g],k=O||b(g),C=g?T?b("entries"):k:void 0,A="Array"==e&&P.entries||O;if(A&&(x=c(A.call(new t)))!==Object.prototype&&x.next&&(u(x,w,!0),n||"function"==typeof x[f]||s(x,f,p)),T&&O&&"values"!==O.name&&(S=!0,k=function(){return O.call(this)}),n&&!m||!h&&!S&&P[f]||s(P,f,k),a[e]=k,a[w]=p,g)if(v={values:T?k:b("values"),keys:_?k:b("keys"),entries:C},m)for(y in v)y in P||o(P,y,v[y]);else r(r.P+r.F*(h||S),e,v);return v}},function(t,e,i){var n=i(72),r=i(24);t.exports=function(t,e,i){if(n(e))throw TypeError("String#"+i+" doesn't accept regex!");return String(r(t))}},function(t,e,i){var n=i(4),r=i(23),o=i(6)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==r(t))}},function(t,e,i){var n=i(6)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(i){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,i){var n=i(38),r=i(6)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||o[r]===t)}},function(t,e,i){"use strict";var n=i(7),r=i(29);t.exports=function(t,e,i){e in t?n.f(t,e,r(0,i)):t[e]=i}},function(t,e,i){var n=i(48),r=i(6)("iterator"),o=i(38);t.exports=i(9).getIteratorMethod=function(t){if(void 0!=t)return t[r]||t["@@iterator"]||o[n(t)]}},function(t,e,i){"use strict";var n=i(16),r=i(33),o=i(10);t.exports=function(t){for(var e=n(this),i=o(e.length),s=arguments.length,a=r(s>1?arguments[1]:void 0,i),l=s>2?arguments[2]:void 0,u=void 0===l?i:r(l,i);u>a;)e[a++]=t;return e}},function(t,e,i){"use strict";var n=i(39),r=i(101),o=i(38),s=i(15);t.exports=i(70)(Array,"Array",function(t,e){this._t=s(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,i=this._i++;return!t||i>=t.length?(this._t=void 0,r(1)):r(0,"keys"==e?i:"values"==e?t[i]:[i,t[i]])},"values"),o.Arguments=o.Array,n("keys"),n("values"),n("entries")},function(t,e,i){"use strict";var n=i(5);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,i){var n,r,o,s=i(21),a=i(90),l=i(63),u=i(57),c=i(3),f=c.process,h=c.setImmediate,p=c.clearImmediate,d=c.MessageChannel,g=c.Dispatch,_=0,m={},v=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},y=function(t){v.call(t.data)};h&&p||(h=function(t){for(var e=[],i=1;arguments.length>i;)e.push(arguments[i++]);return m[++_]=function(){a("function"==typeof t?t:Function(t),e)},n(_),_},p=function(t){delete m[t]},"process"==i(23)(f)?n=function(t){f.nextTick(s(v,t,1))}:g&&g.now?n=function(t){g.now(s(v,t,1))}:d?(o=(r=new d).port2,r.port1.onmessage=y,n=s(o.postMessage,o,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(n=function(t){c.postMessage(t+"","*")},c.addEventListener("message",y,!1)):n="onreadystatechange"in u("script")?function(t){l.appendChild(u("script")).onreadystatechange=function(){l.removeChild(this),v.call(t)}}:function(t){setTimeout(s(v,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,i){"use strict";var n=i(3),r=i(8),o=i(31),s=i(56),a=i(14),l=i(42),u=i(2),c=i(41),f=i(25),h=i(10),p=i(108),d=i(35).f,g=i(7).f,_=i(77),m=i(37),v="prototype",y="Wrong index!",x=n.ArrayBuffer,b=n.DataView,w=n.Math,T=n.RangeError,S=n.Infinity,P=x,O=w.abs,k=w.pow,C=w.floor,A=w.log,M=w.LN2,E=r?"_b":"buffer",R=r?"_l":"byteLength",L=r?"_o":"byteOffset";function D(t,e,i){var n,r,o,s=new Array(i),a=8*i-e-1,l=(1<<a)-1,u=l>>1,c=23===e?k(2,-24)-k(2,-77):0,f=0,h=t<0||0===t&&1/t<0?1:0;for((t=O(t))!=t||t===S?(r=t!=t?1:0,n=l):(n=C(A(t)/M),t*(o=k(2,-n))<1&&(n--,o*=2),(t+=n+u>=1?c/o:c*k(2,1-u))*o>=2&&(n++,o/=2),n+u>=l?(r=0,n=l):n+u>=1?(r=(t*o-1)*k(2,e),n+=u):(r=t*k(2,u-1)*k(2,e),n=0));e>=8;s[f++]=255&r,r/=256,e-=8);for(n=n<<e|r,a+=e;a>0;s[f++]=255&n,n/=256,a-=8);return s[--f]|=128*h,s}function F(t,e,i){var n,r=8*i-e-1,o=(1<<r)-1,s=o>>1,a=r-7,l=i-1,u=t[l--],c=127&u;for(u>>=7;a>0;c=256*c+t[l],l--,a-=8);for(n=c&(1<<-a)-1,c>>=-a,a+=e;a>0;n=256*n+t[l],l--,a-=8);if(0===c)c=1-s;else{if(c===o)return n?NaN:u?-S:S;n+=k(2,e),c-=s}return(u?-1:1)*n*k(2,c-e)}function N(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function I(t){return[255&t]}function B(t){return[255&t,t>>8&255]}function j(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function X(t){return D(t,52,8)}function Y(t){return D(t,23,4)}function z(t,e,i){g(t[v],e,{get:function(){return this[i]}})}function W(t,e,i,n){var r=p(+i);if(r+e>t[R])throw T(y);var o=t[E]._b,s=r+t[L],a=o.slice(s,s+e);return n?a:a.reverse()}function U(t,e,i,n,r,o){var s=p(+i);if(s+e>t[R])throw T(y);for(var a=t[E]._b,l=s+t[L],u=n(+r),c=0;c<e;c++)a[l+c]=u[o?c:e-c-1]}if(s.ABV){if(!u(function(){x(1)})||!u(function(){new x(-1)})||u(function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name})){for(var V,G=(x=function(t){return c(this,x),new P(p(t))})[v]=P[v],H=d(P),q=0;H.length>q;)(V=H[q++])in x||a(x,V,P[V]);o||(G.constructor=x)}var $=new b(new x(2)),Z=b[v].setInt8;$.setInt8(0,2147483648),$.setInt8(1,2147483649),!$.getInt8(0)&&$.getInt8(1)||l(b[v],{setInt8:function(t,e){Z.call(this,t,e<<24>>24)},setUint8:function(t,e){Z.call(this,t,e<<24>>24)}},!0)}else x=function(t){c(this,x,"ArrayBuffer");var e=p(t);this._b=_.call(new Array(e),0),this[R]=e},b=function(t,e,i){c(this,b,"DataView"),c(t,x,"DataView");var n=t[R],r=f(e);if(r<0||r>n)throw T("Wrong offset!");if(r+(i=void 0===i?n-r:h(i))>n)throw T("Wrong length!");this[E]=t,this[L]=r,this[R]=i},r&&(z(x,"byteLength","_l"),z(b,"buffer","_b"),z(b,"byteLength","_l"),z(b,"byteOffset","_o")),l(b[v],{getInt8:function(t){return W(this,1,t)[0]<<24>>24},getUint8:function(t){return W(this,1,t)[0]},getInt16:function(t){var e=W(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=W(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return N(W(this,4,t,arguments[1]))},getUint32:function(t){return N(W(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return F(W(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return F(W(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){U(this,1,t,I,e)},setUint8:function(t,e){U(this,1,t,I,e)},setInt16:function(t,e){U(this,2,t,B,e,arguments[2])},setUint16:function(t,e){U(this,2,t,B,e,arguments[2])},setInt32:function(t,e){U(this,4,t,j,e,arguments[2])},setUint32:function(t,e){U(this,4,t,j,e,arguments[2])},setFloat32:function(t,e){U(this,4,t,Y,e,arguments[2])},setFloat64:function(t,e){U(this,8,t,X,e,arguments[2])}});m(x,"ArrayBuffer"),m(b,"DataView"),a(b[v],s.VIEW,!0),e.ArrayBuffer=x,e.DataView=b},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){t.exports=!i(8)&&!i(2)(function(){return 7!=Object.defineProperty(i(57)("div"),"a",{get:function(){return 7}}).a})},function(t,e,i){var n=i(3),r=i(9),o=i(31),s=i(59),a=i(7).f;t.exports=function(t){var e=r.Symbol||(r.Symbol=o?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:s.f(t)})}},function(t,e,i){var n=i(13),r=i(15),o=i(46)(!1),s=i(60)("IE_PROTO");t.exports=function(t,e){var i,a=r(t),l=0,u=[];for(i in a)i!=s&&n(a,i)&&u.push(i);for(;e.length>l;)n(a,i=e[l++])&&(~o(u,i)||u.push(i));return u}},function(t,e,i){var n=i(7),r=i(5),o=i(32);t.exports=i(8)?Object.defineProperties:function(t,e){r(t);for(var i,s=o(e),a=s.length,l=0;a>l;)n.f(t,i=s[l++],e[i]);return t}},function(t,e,i){var n=i(15),r=i(35).f,o={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return s&&"[object Window]"==o.call(t)?function(t){try{return r(t)}catch(t){return s.slice()}}(t):r(n(t))}},function(t,e,i){"use strict";var n=i(32),r=i(47),o=i(45),s=i(16),a=i(44),l=Object.assign;t.exports=!l||i(2)(function(){var t={},e={},i=Symbol(),n="abcdefghijklmnopqrst";return t[i]=7,n.split("").forEach(function(t){e[t]=t}),7!=l({},t)[i]||Object.keys(l({},e)).join("")!=n})?function(t,e){for(var i=s(t),l=arguments.length,u=1,c=r.f,f=o.f;l>u;)for(var h,p=a(arguments[u++]),d=c?n(p).concat(c(p)):n(p),g=d.length,_=0;g>_;)f.call(p,h=d[_++])&&(i[h]=p[h]);return i}:l},function(t,e,i){"use strict";var n=i(22),r=i(4),o=i(90),s=[].slice,a={};t.exports=Function.bind||function(t){var e=n(this),i=s.call(arguments,1),l=function(){var n=i.concat(s.call(arguments));return this instanceof l?function(t,e,i){if(!(e in a)){for(var n=[],r=0;r<e;r++)n[r]="a["+r+"]";a[e]=Function("F,a","return new F("+n.join(",")+")")}return a[e](t,i)}(e,n.length,n):o(e,n,t)};return r(e.prototype)&&(l.prototype=e.prototype),l}},function(t,e){t.exports=function(t,e,i){var n=void 0===i;switch(e.length){case 0:return n?t():t.call(i);case 1:return n?t(e[0]):t.call(i,e[0]);case 2:return n?t(e[0],e[1]):t.call(i,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(i,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(i,e[0],e[1],e[2],e[3])}return t.apply(i,e)}},function(t,e,i){var n=i(3).parseInt,r=i(49).trim,o=i(65),s=/^[-+]?0[xX]/;t.exports=8!==n(o+"08")||22!==n(o+"0x16")?function(t,e){var i=r(String(t),3);return n(i,e>>>0||(s.test(i)?16:10))}:n},function(t,e,i){var n=i(3).parseFloat,r=i(49).trim;t.exports=1/n(i(65)+"-0")!=-1/0?function(t){var e=r(String(t),3),i=n(e);return 0===i&&"-"==e.charAt(0)?-0:i}:n},function(t,e,i){var n=i(23);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},function(t,e,i){var n=i(4),r=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&r(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,i){var n=i(25),r=i(24);t.exports=function(t){return function(e,i){var o,s,a=String(r(e)),l=n(i),u=a.length;return l<0||l>=u?t?"":void 0:(o=a.charCodeAt(l))<55296||o>56319||l+1===u||(s=a.charCodeAt(l+1))<56320||s>57343?t?a.charAt(l):o:t?a.slice(l,l+2):s-56320+(o-55296<<10)+65536}}},function(t,e,i){"use strict";var n=i(34),r=i(29),o=i(37),s={};i(14)(s,i(6)("iterator"),function(){return this}),t.exports=function(t,e,i){t.prototype=n(s,{next:r(1,i)}),o(t,e+" Iterator")}},function(t,e,i){var n=i(5);t.exports=function(t,e,i,r){try{return r?e(n(i)[0],i[1]):e(i)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},function(t,e,i){var n=i(22),r=i(16),o=i(44),s=i(10);t.exports=function(t,e,i,a,l){n(e);var u=r(t),c=o(u),f=s(u.length),h=l?f-1:0,p=l?-1:1;if(i<2)for(;;){if(h in c){a=c[h],h+=p;break}if(h+=p,l?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;l?h>=0:f>h;h+=p)h in c&&(a=e(a,c[h],h,u));return a}},function(t,e,i){"use strict";var n=i(16),r=i(33),o=i(10);t.exports=[].copyWithin||function(t,e){var i=n(this),s=o(i.length),a=r(t,s),l=r(e,s),u=arguments.length>2?arguments[2]:void 0,c=Math.min((void 0===u?s:r(u,s))-l,s-a),f=1;for(l<a&&a<l+c&&(f=-1,l+=c-1,a+=c-1);c-- >0;)l in i?i[a]=i[l]:delete i[a],a+=f,l+=f;return i}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,i){i(8)&&"g"!=/./g.flags&&i(7).f(RegExp.prototype,"flags",{configurable:!0,get:i(79)})},function(t,e,i){"use strict";var n,r,o,s,a=i(31),l=i(3),u=i(21),c=i(48),f=i(1),h=i(4),p=i(22),d=i(41),g=i(52),_=i(53),m=i(80).set,v=i(227)(),y=i(104),x=i(228),b=i(54),w=i(105),T=l.TypeError,S=l.process,P=S&&S.versions,O=P&&P.v8||"",k=l.Promise,C="process"==c(S),A=function(){},M=r=y.f,E=!!function(){try{var t=k.resolve(1),e=(t.constructor={})[i(6)("species")]=function(t){t(A,A)};return(C||"function"==typeof PromiseRejectionEvent)&&t.then(A)instanceof e&&0!==O.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(t){}}(),R=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},L=function(t,e){if(!t._n){t._n=!0;var i=t._c;v(function(){for(var n=t._v,r=1==t._s,o=0,s=function(e){var i,o,s,a=r?e.ok:e.fail,l=e.resolve,u=e.reject,c=e.domain;try{a?(r||(2==t._h&&N(t),t._h=1),!0===a?i=n:(c&&c.enter(),i=a(n),c&&(c.exit(),s=!0)),i===e.promise?u(T("Promise-chain cycle")):(o=R(i))?o.call(i,l,u):l(i)):u(n)}catch(t){c&&!s&&c.exit(),u(t)}};i.length>o;)s(i[o++]);t._c=[],t._n=!1,e&&!t._h&&D(t)})}},D=function(t){m.call(l,function(){var e,i,n,r=t._v,o=F(t);if(o&&(e=x(function(){C?S.emit("unhandledRejection",r,t):(i=l.onunhandledrejection)?i({promise:t,reason:r}):(n=l.console)&&n.error&&n.error("Unhandled promise rejection",r)}),t._h=C||F(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},F=function(t){return 1!==t._h&&0===(t._a||t._c).length},N=function(t){m.call(l,function(){var e;C?S.emit("rejectionHandled",t):(e=l.onrejectionhandled)&&e({promise:t,reason:t._v})})},I=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),L(e,!0))},B=function(t){var e,i=this;if(!i._d){i._d=!0,i=i._w||i;try{if(i===t)throw T("Promise can't be resolved itself");(e=R(t))?v(function(){var n={_w:i,_d:!1};try{e.call(t,u(B,n,1),u(I,n,1))}catch(t){I.call(n,t)}}):(i._v=t,i._s=1,L(i,!1))}catch(t){I.call({_w:i,_d:!1},t)}}};E||(k=function(t){d(this,k,"Promise","_h"),p(t),n.call(this);try{t(u(B,this,1),u(I,this,1))}catch(t){I.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=i(42)(k.prototype,{then:function(t,e){var i=M(_(this,k));return i.ok="function"!=typeof t||t,i.fail="function"==typeof e&&e,i.domain=C?S.domain:void 0,this._c.push(i),this._a&&this._a.push(i),this._s&&L(this,!1),i.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n;this.promise=t,this.resolve=u(B,t,1),this.reject=u(I,t,1)},y.f=M=function(t){return t===k||t===s?new o(t):r(t)}),f(f.G+f.W+f.F*!E,{Promise:k}),i(37)(k,"Promise"),i(40)("Promise"),s=i(9).Promise,f(f.S+f.F*!E,"Promise",{reject:function(t){var e=M(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(a||!E),"Promise",{resolve:function(t){return w(a&&this===s?k:this,t)}}),f(f.S+f.F*!(E&&i(50)(function(t){k.all(t).catch(A)})),"Promise",{all:function(t){var e=this,i=M(e),n=i.resolve,r=i.reject,o=x(function(){var i=[],o=0,s=1;g(t,!1,function(t){var a=o++,l=!1;i.push(void 0),s++,e.resolve(t).then(function(t){l||(l=!0,i[a]=t,--s||n(i))},r)}),--s||n(i)});return o.e&&r(o.v),i.promise},race:function(t){var e=this,i=M(e),n=i.reject,r=x(function(){g(t,!1,function(t){e.resolve(t).then(i.resolve,n)})});return r.e&&n(r.v),i.promise}})},function(t,e,i){"use strict";var n=i(22);t.exports.f=function(t){return new function(t){var e,i;this.promise=new t(function(t,n){if(void 0!==e||void 0!==i)throw TypeError("Bad Promise constructor");e=t,i=n}),this.resolve=n(e),this.reject=n(i)}(t)}},function(t,e,i){var n=i(5),r=i(4),o=i(104);t.exports=function(t,e){if(n(t),r(e)&&e.constructor===t)return e;var i=o.f(t);return(0,i.resolve)(e),i.promise}},function(t,e,i){"use strict";var n=i(7).f,r=i(34),o=i(42),s=i(21),a=i(41),l=i(52),u=i(70),c=i(101),f=i(40),h=i(8),p=i(28).fastKey,d=i(43),g=h?"_s":"size",_=function(t,e){var i,n=p(e);if("F"!==n)return t._i[n];for(i=t._f;i;i=i.n)if(i.k==e)return i};t.exports={getConstructor:function(t,e,i,u){var c=t(function(t,n){a(t,c,e,"_i"),t._t=e,t._i=r(null),t._f=void 0,t._l=void 0,t[g]=0,void 0!=n&&l(n,i,t[u],t)});return o(c.prototype,{clear:function(){for(var t=d(this,e),i=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete i[n.i];t._f=t._l=void 0,t[g]=0},delete:function(t){var i=d(this,e),n=_(i,t);if(n){var r=n.n,o=n.p;delete i._i[n.i],n.r=!0,o&&(o.n=r),r&&(r.p=o),i._f==n&&(i._f=r),i._l==n&&(i._l=o),i[g]--}return!!n},forEach:function(t){d(this,e);for(var i,n=s(t,arguments.length>1?arguments[1]:void 0,3);i=i?i.n:this._f;)for(n(i.v,i.k,this);i&&i.r;)i=i.p},has:function(t){return!!_(d(this,e),t)}}),h&&n(c.prototype,"size",{get:function(){return d(this,e)[g]}}),c},def:function(t,e,i){var n,r,o=_(t,e);return o?o.v=i:(t._l=o={i:r=p(e,!0),k:e,v:i,p:n=t._l,n:void 0,r:!1},t._f||(t._f=o),n&&(n.n=o),t[g]++,"F"!==r&&(t._i[r]=o)),t},getEntry:_,setStrong:function(t,e,i){u(t,e,function(t,i){this._t=d(t,e),this._k=i,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?c(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,c(1))},i?"entries":"values",!i,!0),f(e)}}},function(t,e,i){"use strict";var n=i(42),r=i(28).getWeak,o=i(5),s=i(4),a=i(41),l=i(52),u=i(20),c=i(13),f=i(43),h=u(5),p=u(6),d=0,g=function(t){return t._l||(t._l=new _)},_=function(){this.a=[]},m=function(t,e){return h(t.a,function(t){return t[0]===e})};_.prototype={get:function(t){var e=m(this,t);if(e)return e[1]},has:function(t){return!!m(this,t)},set:function(t,e){var i=m(this,t);i?i[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,i,o){var u=t(function(t,n){a(t,u,e,"_i"),t._t=e,t._i=d++,t._l=void 0,void 0!=n&&l(n,i,t[o],t)});return n(u.prototype,{delete:function(t){if(!s(t))return!1;var i=r(t);return!0===i?g(f(this,e)).delete(t):i&&c(i,this._i)&&delete i[this._i]},has:function(t){if(!s(t))return!1;var i=r(t);return!0===i?g(f(this,e)).has(t):i&&c(i,this._i)}}),u},def:function(t,e,i){var n=r(o(e),!0);return!0===n?g(t).set(e,i):n[t._i]=i,t},ufstore:g}},function(t,e,i){var n=i(25),r=i(10);t.exports=function(t){if(void 0===t)return 0;var e=n(t),i=r(e);if(e!==i)throw RangeError("Wrong length!");return i}},function(t,e,i){var n=i(35),r=i(47),o=i(5),s=i(3).Reflect;t.exports=s&&s.ownKeys||function(t){var e=n.f(o(t)),i=r.f;return i?e.concat(i(t)):e}},function(t,e,i){var n=i(10),r=i(67),o=i(24);t.exports=function(t,e,i,s){var a=String(o(t)),l=a.length,u=void 0===i?" ":String(i),c=n(e);if(c<=l||""==u)return a;var f=c-l,h=r.call(u,Math.ceil(f/u.length));return h.length>f&&(h=h.slice(0,f)),s?h+a:a+h}},function(t,e,i){var n=i(32),r=i(15),o=i(45).f;t.exports=function(t){return function(e){for(var i,s=r(e),a=n(s),l=a.length,u=0,c=[];l>u;)o.call(s,i=a[u++])&&c.push(t?[i,s[i]]:s[i]);return c}}},function(t,e,i){i(113),i(285),t.exports=i(280)},function(t,e,i){"use strict";(function(t){i(114),i(258),i(260),i(262),i(264),i(266),i(268),i(270),i(272),i(274),i(278),t._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),t._babelPolyfill=!0}).call(this,i(82))},function(t,e,i){i(115),i(117),i(118),i(119),i(120),i(121),i(122),i(123),i(124),i(125),i(126),i(127),i(128),i(129),i(130),i(131),i(133),i(134),i(135),i(136),i(137),i(138),i(139),i(140),i(141),i(142),i(143),i(144),i(145),i(146),i(147),i(148),i(149),i(150),i(151),i(152),i(153),i(154),i(155),i(156),i(157),i(158),i(159),i(161),i(162),i(163),i(164),i(165),i(166),i(167),i(168),i(169),i(170),i(171),i(172),i(173),i(174),i(175),i(176),i(177),i(178),i(179),i(180),i(181),i(182),i(183),i(184),i(185),i(186),i(187),i(188),i(189),i(190),i(191),i(192),i(193),i(194),i(196),i(197),i(199),i(200),i(201),i(202),i(203),i(204),i(205),i(208),i(209),i(210),i(211),i(212),i(213),i(214),i(215),i(216),i(217),i(218),i(219),i(220),i(78),i(221),i(222),i(102),i(223),i(224),i(225),i(226),i(103),i(229),i(230),i(231),i(232),i(233),i(234),i(235),i(236),i(237),i(238),i(239),i(240),i(241),i(242),i(243),i(244),i(245),i(246),i(247),i(248),i(249),i(250),i(251),i(252),i(253),i(254),i(255),i(256),i(257),t.exports=i(9)},function(t,e,i){"use strict";var n=i(3),r=i(13),o=i(8),s=i(1),a=i(11),l=i(28).KEY,u=i(2),c=i(58),f=i(37),h=i(30),p=i(6),d=i(59),g=i(84),_=i(116),m=i(62),v=i(5),y=i(4),x=i(15),b=i(27),w=i(29),T=i(34),S=i(87),P=i(18),O=i(7),k=i(32),C=P.f,A=O.f,M=S.f,E=n.Symbol,R=n.JSON,L=R&&R.stringify,D=p("_hidden"),F=p("toPrimitive"),N={}.propertyIsEnumerable,I=c("symbol-registry"),B=c("symbols"),j=c("op-symbols"),X=Object.prototype,Y="function"==typeof E,z=n.QObject,W=!z||!z.prototype||!z.prototype.findChild,U=o&&u(function(){return 7!=T(A({},"a",{get:function(){return A(this,"a",{value:7}).a}})).a})?function(t,e,i){var n=C(X,e);n&&delete X[e],A(t,e,i),n&&t!==X&&A(X,e,n)}:A,V=function(t){var e=B[t]=T(E.prototype);return e._k=t,e},G=Y&&"symbol"==typeof E.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof E},H=function(t,e,i){return t===X&&H(j,e,i),v(t),e=b(e,!0),v(i),r(B,e)?(i.enumerable?(r(t,D)&&t[D][e]&&(t[D][e]=!1),i=T(i,{enumerable:w(0,!1)})):(r(t,D)||A(t,D,w(1,{})),t[D][e]=!0),U(t,e,i)):A(t,e,i)},q=function(t,e){v(t);for(var i,n=_(e=x(e)),r=0,o=n.length;o>r;)H(t,i=n[r++],e[i]);return t},$=function(t){var e=N.call(this,t=b(t,!0));return!(this===X&&r(B,t)&&!r(j,t))&&(!(e||!r(this,t)||!r(B,t)||r(this,D)&&this[D][t])||e)},Z=function(t,e){if(t=x(t),e=b(e,!0),t!==X||!r(B,e)||r(j,e)){var i=C(t,e);return!i||!r(B,e)||r(t,D)&&t[D][e]||(i.enumerable=!0),i}},K=function(t){for(var e,i=M(x(t)),n=[],o=0;i.length>o;)r(B,e=i[o++])||e==D||e==l||n.push(e);return n},J=function(t){for(var e,i=t===X,n=M(i?j:x(t)),o=[],s=0;n.length>s;)!r(B,e=n[s++])||i&&!r(X,e)||o.push(B[e]);return o};Y||(a((E=function(){if(this instanceof E)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(i){this===X&&e.call(j,i),r(this,D)&&r(this[D],t)&&(this[D][t]=!1),U(this,t,w(1,i))};return o&&W&&U(X,t,{configurable:!0,set:e}),V(t)}).prototype,"toString",function(){return this._k}),P.f=Z,O.f=H,i(35).f=S.f=K,i(45).f=$,i(47).f=J,o&&!i(31)&&a(X,"propertyIsEnumerable",$,!0),d.f=function(t){return V(p(t))}),s(s.G+s.W+s.F*!Y,{Symbol:E});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var et=k(p.store),it=0;et.length>it;)g(et[it++]);s(s.S+s.F*!Y,"Symbol",{for:function(t){return r(I,t+="")?I[t]:I[t]=E(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var e in I)if(I[e]===t)return e},useSetter:function(){W=!0},useSimple:function(){W=!1}}),s(s.S+s.F*!Y,"Object",{create:function(t,e){return void 0===e?T(t):q(T(t),e)},defineProperty:H,defineProperties:q,getOwnPropertyDescriptor:Z,getOwnPropertyNames:K,getOwnPropertySymbols:J}),R&&s(s.S+s.F*(!Y||u(function(){var t=E();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))})),"JSON",{stringify:function(t){for(var e,i,n=[t],r=1;arguments.length>r;)n.push(arguments[r++]);if(i=e=n[1],(y(e)||void 0!==t)&&!G(t))return m(e)||(e=function(t,e){if("function"==typeof i&&(e=i.call(this,t,e)),!G(e))return e}),n[1]=e,L.apply(R,n)}}),E.prototype[F]||i(14)(E.prototype,F,E.prototype.valueOf),f(E,"Symbol"),f(Math,"Math",!0),f(n.JSON,"JSON",!0)},function(t,e,i){var n=i(32),r=i(47),o=i(45);t.exports=function(t){var e=n(t),i=r.f;if(i)for(var s,a=i(t),l=o.f,u=0;a.length>u;)l.call(t,s=a[u++])&&e.push(s);return e}},function(t,e,i){var n=i(1);n(n.S,"Object",{create:i(34)})},function(t,e,i){var n=i(1);n(n.S+n.F*!i(8),"Object",{defineProperty:i(7).f})},function(t,e,i){var n=i(1);n(n.S+n.F*!i(8),"Object",{defineProperties:i(86)})},function(t,e,i){var n=i(15),r=i(18).f;i(19)("getOwnPropertyDescriptor",function(){return function(t,e){return r(n(t),e)}})},function(t,e,i){var n=i(16),r=i(36);i(19)("getPrototypeOf",function(){return function(t){return r(n(t))}})},function(t,e,i){var n=i(16),r=i(32);i(19)("keys",function(){return function(t){return r(n(t))}})},function(t,e,i){i(19)("getOwnPropertyNames",function(){return i(87).f})},function(t,e,i){var n=i(4),r=i(28).onFreeze;i(19)("freeze",function(t){return function(e){return t&&n(e)?t(r(e)):e}})},function(t,e,i){var n=i(4),r=i(28).onFreeze;i(19)("seal",function(t){return function(e){return t&&n(e)?t(r(e)):e}})},function(t,e,i){var n=i(4),r=i(28).onFreeze;i(19)("preventExtensions",function(t){return function(e){return t&&n(e)?t(r(e)):e}})},function(t,e,i){var n=i(4);i(19)("isFrozen",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,i){var n=i(4);i(19)("isSealed",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,i){var n=i(4);i(19)("isExtensible",function(t){return function(e){return!!n(e)&&(!t||t(e))}})},function(t,e,i){var n=i(1);n(n.S+n.F,"Object",{assign:i(88)})},function(t,e,i){var n=i(1);n(n.S,"Object",{is:i(132)})},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,i){var n=i(1);n(n.S,"Object",{setPrototypeOf:i(64).set})},function(t,e,i){"use strict";var n=i(48),r={};r[i(6)("toStringTag")]="z",r+""!="[object z]"&&i(11)(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},function(t,e,i){var n=i(1);n(n.P,"Function",{bind:i(89)})},function(t,e,i){var n=i(7).f,r=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in r||i(8)&&n(r,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,e,i){"use strict";var n=i(4),r=i(36),o=i(6)("hasInstance"),s=Function.prototype;o in s||i(7).f(s,o,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=r(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,i){var n=i(1),r=i(91);n(n.G+n.F*(parseInt!=r),{parseInt:r})},function(t,e,i){var n=i(1),r=i(92);n(n.G+n.F*(parseFloat!=r),{parseFloat:r})},function(t,e,i){"use strict";var n=i(3),r=i(13),o=i(23),s=i(66),a=i(27),l=i(2),u=i(35).f,c=i(18).f,f=i(7).f,h=i(49).trim,p=n.Number,d=p,g=p.prototype,_="Number"==o(i(34)(g)),m="trim"in String.prototype,v=function(t){var e=a(t,!1);if("string"==typeof e&&e.length>2){var i,n,r,o=(e=m?e.trim():h(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(i=e.charCodeAt(2))||120===i)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:n=2,r=49;break;case 79:case 111:n=8,r=55;break;default:return+e}for(var s,l=e.slice(2),u=0,c=l.length;u<c;u++)if((s=l.charCodeAt(u))<48||s>r)return NaN;return parseInt(l,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,i=this;return i instanceof p&&(_?l(function(){g.valueOf.call(i)}):"Number"!=o(i))?s(new d(v(e)),i,p):v(e)};for(var y,x=i(8)?u(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),b=0;x.length>b;b++)r(d,y=x[b])&&!r(p,y)&&f(p,y,c(d,y));p.prototype=g,g.constructor=p,i(11)(n,"Number",p)}},function(t,e,i){"use strict";var n=i(1),r=i(25),o=i(93),s=i(67),a=1..toFixed,l=Math.floor,u=[0,0,0,0,0,0],c="Number.toFixed: incorrect invocation!",f=function(t,e){for(var i=-1,n=e;++i<6;)n+=t*u[i],u[i]=n%1e7,n=l(n/1e7)},h=function(t){for(var e=6,i=0;--e>=0;)i+=u[e],u[e]=l(i/t),i=i%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==u[t]){var i=String(u[t]);e=""===e?i:e+s.call("0",7-i.length)+i}return e},d=function(t,e,i){return 0===e?i:e%2==1?d(t,e-1,i*t):d(t*t,e/2,i)};n(n.P+n.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!i(2)(function(){a.call({})})),"Number",{toFixed:function(t){var e,i,n,a,l=o(this,c),u=r(t),g="",_="0";if(u<0||u>20)throw RangeError(c);if(l!=l)return"NaN";if(l<=-1e21||l>=1e21)return String(l);if(l<0&&(g="-",l=-l),l>1e-21)if(i=(e=function(t){for(var e=0,i=t;i>=4096;)e+=12,i/=4096;for(;i>=2;)e+=1,i/=2;return e}(l*d(2,69,1))-69)<0?l*d(2,-e,1):l/d(2,e,1),i*=4503599627370496,(e=52-e)>0){for(f(0,i),n=u;n>=7;)f(1e7,0),n-=7;for(f(d(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),f(1,1),h(2),_=p()}else f(0,i),f(1<<-e,0),_=p()+s.call("0",u);return _=u>0?g+((a=_.length)<=u?"0."+s.call("0",u-a)+_:_.slice(0,a-u)+"."+_.slice(a-u)):g+_}})},function(t,e,i){"use strict";var n=i(1),r=i(2),o=i(93),s=1..toPrecision;n(n.P+n.F*(r(function(){return"1"!==s.call(1,void 0)})||!r(function(){s.call({})})),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?s.call(e):s.call(e,t)}})},function(t,e,i){var n=i(1);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,i){var n=i(1),r=i(3).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&r(t)}})},function(t,e,i){var n=i(1);n(n.S,"Number",{isInteger:i(94)})},function(t,e,i){var n=i(1);n(n.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,i){var n=i(1),r=i(94),o=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return r(t)&&o(t)<=9007199254740991}})},function(t,e,i){var n=i(1);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,i){var n=i(1);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,i){var n=i(1),r=i(92);n(n.S+n.F*(Number.parseFloat!=r),"Number",{parseFloat:r})},function(t,e,i){var n=i(1),r=i(91);n(n.S+n.F*(Number.parseInt!=r),"Number",{parseInt:r})},function(t,e,i){var n=i(1),r=i(95),o=Math.sqrt,s=Math.acosh;n(n.S+n.F*!(s&&710==Math.floor(s(Number.MAX_VALUE))&&s(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:r(t-1+o(t-1)*o(t+1))}})},function(t,e,i){var n=i(1),r=Math.asinh;n(n.S+n.F*!(r&&1/r(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,i){var n=i(1),r=Math.atanh;n(n.S+n.F*!(r&&1/r(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,i){var n=i(1),r=i(68);n(n.S,"Math",{cbrt:function(t){return r(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,i){var n=i(1);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,i){var n=i(1),r=Math.exp;n(n.S,"Math",{cosh:function(t){return(r(t=+t)+r(-t))/2}})},function(t,e,i){var n=i(1),r=i(69);n(n.S+n.F*(r!=Math.expm1),"Math",{expm1:r})},function(t,e,i){var n=i(1);n(n.S,"Math",{fround:i(160)})},function(t,e,i){var n=i(68),r=Math.pow,o=r(2,-52),s=r(2,-23),a=r(2,127)*(2-s),l=r(2,-126);t.exports=Math.fround||function(t){var e,i,r=Math.abs(t),u=n(t);return r<l?u*function(t){return t+1/o-1/o}(r/l/s)*l*s:(i=(e=(1+s/o)*r)-(e-r))>a||i!=i?u*(1/0):u*i}},function(t,e,i){var n=i(1),r=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var i,n,o=0,s=0,a=arguments.length,l=0;s<a;)l<(i=r(arguments[s++]))?(o=o*(n=l/i)*n+1,l=i):o+=i>0?(n=i/l)*n:i;return l===1/0?1/0:l*Math.sqrt(o)}})},function(t,e,i){var n=i(1),r=Math.imul;n(n.S+n.F*i(2)(function(){return-5!=r(4294967295,5)||2!=r.length}),"Math",{imul:function(t,e){var i=+t,n=+e,r=65535&i,o=65535&n;return 0|r*o+((65535&i>>>16)*o+r*(65535&n>>>16)<<16>>>0)}})},function(t,e,i){var n=i(1);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,i){var n=i(1);n(n.S,"Math",{log1p:i(95)})},function(t,e,i){var n=i(1);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,i){var n=i(1);n(n.S,"Math",{sign:i(68)})},function(t,e,i){var n=i(1),r=i(69),o=Math.exp;n(n.S+n.F*i(2)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(r(t)-r(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,e,i){var n=i(1),r=i(69),o=Math.exp;n(n.S,"Math",{tanh:function(t){var e=r(t=+t),i=r(-t);return e==1/0?1:i==1/0?-1:(e-i)/(o(t)+o(-t))}})},function(t,e,i){var n=i(1);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,i){var n=i(1),r=i(33),o=String.fromCharCode,s=String.fromCodePoint;n(n.S+n.F*(!!s&&1!=s.length),"String",{fromCodePoint:function(t){for(var e,i=[],n=arguments.length,s=0;n>s;){if(e=+arguments[s++],r(e,1114111)!==e)throw RangeError(e+" is not a valid code point");i.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return i.join("")}})},function(t,e,i){var n=i(1),r=i(15),o=i(10);n(n.S,"String",{raw:function(t){for(var e=r(t.raw),i=o(e.length),n=arguments.length,s=[],a=0;i>a;)s.push(String(e[a++])),a<n&&s.push(String(arguments[a]));return s.join("")}})},function(t,e,i){"use strict";i(49)("trim",function(t){return function(){return t(this,3)}})},function(t,e,i){"use strict";var n=i(96)(!0);i(70)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,i=this._i;return i>=e.length?{value:void 0,done:!0}:(t=n(e,i),this._i+=t.length,{value:t,done:!1})})},function(t,e,i){"use strict";var n=i(1),r=i(96)(!1);n(n.P,"String",{codePointAt:function(t){return r(this,t)}})},function(t,e,i){"use strict";var n=i(1),r=i(10),o=i(71),s="".endsWith;n(n.P+n.F*i(73)("endsWith"),"String",{endsWith:function(t){var e=o(this,t,"endsWith"),i=arguments.length>1?arguments[1]:void 0,n=r(e.length),a=void 0===i?n:Math.min(r(i),n),l=String(t);return s?s.call(e,l,a):e.slice(a-l.length,a)===l}})},function(t,e,i){"use strict";var n=i(1),r=i(71);n(n.P+n.F*i(73)("includes"),"String",{includes:function(t){return!!~r(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,i){var n=i(1);n(n.P,"String",{repeat:i(67)})},function(t,e,i){"use strict";var n=i(1),r=i(10),o=i(71),s="".startsWith;n(n.P+n.F*i(73)("startsWith"),"String",{startsWith:function(t){var e=o(this,t,"startsWith"),i=r(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return s?s.call(e,n,i):e.slice(i,i+n.length)===n}})},function(t,e,i){"use strict";i(12)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,i){"use strict";i(12)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,i){"use strict";i(12)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,i){"use strict";i(12)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,i){"use strict";i(12)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,i){"use strict";i(12)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,i){"use strict";i(12)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,i){"use strict";i(12)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,i){"use strict";i(12)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,i){"use strict";i(12)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,i){"use strict";i(12)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,i){"use strict";i(12)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,i){"use strict";i(12)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,i){var n=i(1);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,i){"use strict";var n=i(1),r=i(16),o=i(27);n(n.P+n.F*i(2)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=r(this),i=o(e);return"number"!=typeof i||isFinite(i)?e.toISOString():null}})},function(t,e,i){var n=i(1),r=i(195);n(n.P+n.F*(Date.prototype.toISOString!==r),"Date",{toISOString:r})},function(t,e,i){"use strict";var n=i(2),r=Date.prototype.getTime,o=Date.prototype.toISOString,s=function(t){return t>9?t:"0"+t};t.exports=n(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!n(function(){o.call(new Date(NaN))})?function(){if(!isFinite(r.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),i=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+s(t.getUTCMonth()+1)+"-"+s(t.getUTCDate())+"T"+s(t.getUTCHours())+":"+s(t.getUTCMinutes())+":"+s(t.getUTCSeconds())+"."+(i>99?i:"0"+s(i))+"Z"}:o},function(t,e,i){var n=Date.prototype,r=n.toString,o=n.getTime;new Date(NaN)+""!="Invalid Date"&&i(11)(n,"toString",function(){var t=o.call(this);return t==t?r.call(this):"Invalid Date"})},function(t,e,i){var n=i(6)("toPrimitive"),r=Date.prototype;n in r||i(14)(r,n,i(198))},function(t,e,i){"use strict";var n=i(5),r=i(27);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return r(n(this),"number"!=t)}},function(t,e,i){var n=i(1);n(n.S,"Array",{isArray:i(62)})},function(t,e,i){"use strict";var n=i(21),r=i(1),o=i(16),s=i(98),a=i(74),l=i(10),u=i(75),c=i(76);r(r.S+r.F*!i(50)(function(t){Array.from(t)}),"Array",{from:function(t){var e,i,r,f,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,g=d>1?arguments[1]:void 0,_=void 0!==g,m=0,v=c(h);if(_&&(g=n(g,d>2?arguments[2]:void 0,2)),void 0==v||p==Array&&a(v))for(i=new p(e=l(h.length));e>m;m++)u(i,m,_?g(h[m],m):h[m]);else for(f=v.call(h),i=new p;!(r=f.next()).done;m++)u(i,m,_?s(f,g,[r.value,m],!0):r.value);return i.length=m,i}})},function(t,e,i){"use strict";var n=i(1),r=i(75);n(n.S+n.F*i(2)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,i=new("function"==typeof this?this:Array)(e);e>t;)r(i,t,arguments[t++]);return i.length=e,i}})},function(t,e,i){"use strict";var n=i(1),r=i(15),o=[].join;n(n.P+n.F*(i(44)!=Object||!i(17)(o)),"Array",{join:function(t){return o.call(r(this),void 0===t?",":t)}})},function(t,e,i){"use strict";var n=i(1),r=i(63),o=i(23),s=i(33),a=i(10),l=[].slice;n(n.P+n.F*i(2)(function(){r&&l.call(r)}),"Array",{slice:function(t,e){var i=a(this.length),n=o(this);if(e=void 0===e?i:e,"Array"==n)return l.call(this,t,e);for(var r=s(t,i),u=s(e,i),c=a(u-r),f=new Array(c),h=0;h<c;h++)f[h]="String"==n?this.charAt(r+h):this[r+h];return f}})},function(t,e,i){"use strict";var n=i(1),r=i(22),o=i(16),s=i(2),a=[].sort,l=[1,2,3];n(n.P+n.F*(s(function(){l.sort(void 0)})||!s(function(){l.sort(null)})||!i(17)(a)),"Array",{sort:function(t){return void 0===t?a.call(o(this)):a.call(o(this),r(t))}})},function(t,e,i){"use strict";var n=i(1),r=i(20)(0),o=i(17)([].forEach,!0);n(n.P+n.F*!o,"Array",{forEach:function(t){return r(this,t,arguments[1])}})},function(t,e,i){var n=i(207);t.exports=function(t,e){return new(n(t))(e)}},function(t,e,i){var n=i(4),r=i(62),o=i(6)("species");t.exports=function(t){var e;return r(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!r(e.prototype)||(e=void 0),n(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},function(t,e,i){"use strict";var n=i(1),r=i(20)(1);n(n.P+n.F*!i(17)([].map,!0),"Array",{map:function(t){return r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(20)(2);n(n.P+n.F*!i(17)([].filter,!0),"Array",{filter:function(t){return r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(20)(3);n(n.P+n.F*!i(17)([].some,!0),"Array",{some:function(t){return r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(20)(4);n(n.P+n.F*!i(17)([].every,!0),"Array",{every:function(t){return r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(99);n(n.P+n.F*!i(17)([].reduce,!0),"Array",{reduce:function(t){return r(this,t,arguments.length,arguments[1],!1)}})},function(t,e,i){"use strict";var n=i(1),r=i(99);n(n.P+n.F*!i(17)([].reduceRight,!0),"Array",{reduceRight:function(t){return r(this,t,arguments.length,arguments[1],!0)}})},function(t,e,i){"use strict";var n=i(1),r=i(46)(!1),o=[].indexOf,s=!!o&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(s||!i(17)(o)),"Array",{indexOf:function(t){return s?o.apply(this,arguments)||0:r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(15),o=i(25),s=i(10),a=[].lastIndexOf,l=!!a&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(l||!i(17)(a)),"Array",{lastIndexOf:function(t){if(l)return a.apply(this,arguments)||0;var e=r(this),i=s(e.length),n=i-1;for(arguments.length>1&&(n=Math.min(n,o(arguments[1]))),n<0&&(n=i+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},function(t,e,i){var n=i(1);n(n.P,"Array",{copyWithin:i(100)}),i(39)("copyWithin")},function(t,e,i){var n=i(1);n(n.P,"Array",{fill:i(77)}),i(39)("fill")},function(t,e,i){"use strict";var n=i(1),r=i(20)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),n(n.P+n.F*o,"Array",{find:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(39)("find")},function(t,e,i){"use strict";var n=i(1),r=i(20)(6),o="findIndex",s=!0;o in[]&&Array(1)[o](function(){s=!1}),n(n.P+n.F*s,"Array",{findIndex:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(39)(o)},function(t,e,i){i(40)("Array")},function(t,e,i){var n=i(3),r=i(66),o=i(7).f,s=i(35).f,a=i(72),l=i(79),u=n.RegExp,c=u,f=u.prototype,h=/a/g,p=/a/g,d=new u(h)!==h;if(i(8)&&(!d||i(2)(function(){return p[i(6)("match")]=!1,u(h)!=h||u(p)==p||"/a/i"!=u(h,"i")}))){u=function(t,e){var i=this instanceof u,n=a(t),o=void 0===e;return!i&&n&&t.constructor===u&&o?t:r(d?new c(n&&!o?t.source:t,e):c((n=t instanceof u)?t.source:t,n&&o?l.call(t):e),i?this:f,u)};for(var g=function(t){t in u||o(u,t,{configurable:!0,get:function(){return c[t]},set:function(e){c[t]=e}})},_=s(c),m=0;_.length>m;)g(_[m++]);f.constructor=u,u.prototype=f,i(11)(n,"RegExp",u)}i(40)("RegExp")},function(t,e,i){"use strict";i(102);var n=i(5),r=i(79),o=i(8),s=/./.toString,a=function(t){i(11)(RegExp.prototype,"toString",t,!0)};i(2)(function(){return"/a/b"!=s.call({source:"a",flags:"b"})})?a(function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?r.call(t):void 0)}):"toString"!=s.name&&a(function(){return s.call(this)})},function(t,e,i){i(51)("match",1,function(t,e,i){return[function(i){"use strict";var n=t(this),r=void 0==i?void 0:i[e];return void 0!==r?r.call(i,n):new RegExp(i)[e](String(n))},i]})},function(t,e,i){i(51)("replace",2,function(t,e,i){return[function(n,r){"use strict";var o=t(this),s=void 0==n?void 0:n[e];return void 0!==s?s.call(n,o,r):i.call(String(o),n,r)},i]})},function(t,e,i){i(51)("search",1,function(t,e,i){return[function(i){"use strict";var n=t(this),r=void 0==i?void 0:i[e];return void 0!==r?r.call(i,n):new RegExp(i)[e](String(n))},i]})},function(t,e,i){i(51)("split",2,function(t,e,n){"use strict";var r=i(72),o=n,s=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var a=void 0===/()??/.exec("")[1];n=function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!r(t))return o.call(i,t,e);var n,l,u,c,f,h=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,g=void 0===e?4294967295:e>>>0,_=new RegExp(t.source,p+"g");for(a||(n=new RegExp("^"+_.source+"$(?!\\s)",p));(l=_.exec(i))&&!((u=l.index+l[0].length)>d&&(h.push(i.slice(d,l.index)),!a&&l.length>1&&l[0].replace(n,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(l[f]=void 0)}),l.length>1&&l.index<i.length&&s.apply(h,l.slice(1)),c=l[0].length,d=u,h.length>=g));)_.lastIndex===l.index&&_.lastIndex++;return d===i.length?!c&&_.test("")||h.push(""):h.push(i.slice(d)),h.length>g?h.slice(0,g):h}}else"0".split(void 0,0).length&&(n=function(t,e){return void 0===t&&0===e?[]:o.call(this,t,e)});return[function(i,r){var o=t(this),s=void 0==i?void 0:i[e];return void 0!==s?s.call(i,o,r):n.call(String(o),i,r)},n]})},function(t,e,i){var n=i(3),r=i(80).set,o=n.MutationObserver||n.WebKitMutationObserver,s=n.process,a=n.Promise,l="process"==i(23)(s);t.exports=function(){var t,e,i,u=function(){var n,r;for(l&&(n=s.domain)&&n.exit();t;){r=t.fn,t=t.next;try{r()}catch(n){throw t?i():e=void 0,n}}e=void 0,n&&n.enter()};if(l)i=function(){s.nextTick(u)};else if(!o||n.navigator&&n.navigator.standalone)if(a&&a.resolve){var c=a.resolve(void 0);i=function(){c.then(u)}}else i=function(){r.call(n,u)};else{var f=!0,h=document.createTextNode("");new o(u).observe(h,{characterData:!0}),i=function(){h.data=f=!f}}return function(n){var r={fn:n,next:void 0};e&&(e.next=r),t||(t=r,i()),e=r}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,i){"use strict";var n=i(106),r=i(43);t.exports=i(55)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=n.getEntry(r(this,"Map"),t);return e&&e.v},set:function(t,e){return n.def(r(this,"Map"),0===t?0:t,e)}},n,!0)},function(t,e,i){"use strict";var n=i(106),r=i(43);t.exports=i(55)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(r(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,i){"use strict";var n,r=i(20)(0),o=i(11),s=i(28),a=i(88),l=i(107),u=i(4),c=i(2),f=i(43),h=s.getWeak,p=Object.isExtensible,d=l.ufstore,g={},_=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(u(t)){var e=h(t);return!0===e?d(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return l.def(f(this,"WeakMap"),t,e)}},v=t.exports=i(55)("WeakMap",_,m,l,!0,!0);c(function(){return 7!=(new v).set((Object.freeze||Object)(g),7).get(g)})&&(a((n=l.getConstructor(_,"WeakMap")).prototype,m),s.NEED=!0,r(["delete","has","get","set"],function(t){var e=v.prototype,i=e[t];o(e,t,function(e,r){if(u(e)&&!p(e)){this._f||(this._f=new n);var o=this._f[t](e,r);return"set"==t?this:o}return i.call(this,e,r)})}))},function(t,e,i){"use strict";var n=i(107),r=i(43);i(55)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(r(this,"WeakSet"),t,!0)}},n,!1,!0)},function(t,e,i){"use strict";var n=i(1),r=i(56),o=i(81),s=i(5),a=i(33),l=i(10),u=i(4),c=i(3).ArrayBuffer,f=i(53),h=o.ArrayBuffer,p=o.DataView,d=r.ABV&&c.isView,g=h.prototype.slice,_=r.VIEW;n(n.G+n.W+n.F*(c!==h),{ArrayBuffer:h}),n(n.S+n.F*!r.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||u(t)&&_ in t}}),n(n.P+n.U+n.F*i(2)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==g&&void 0===e)return g.call(s(this),t);for(var i=s(this).byteLength,n=a(t,i),r=a(void 0===e?i:e,i),o=new(f(this,h))(l(r-n)),u=new p(this),c=new p(o),d=0;n<r;)c.setUint8(d++,u.getUint8(n++));return o}}),i(40)("ArrayBuffer")},function(t,e,i){var n=i(1);n(n.G+n.W+n.F*!i(56).ABV,{DataView:i(81).DataView})},function(t,e,i){i(26)("Int8",1,function(t){return function(e,i,n){return t(this,e,i,n)}})},function(t,e,i){i(26)("Uint8",1,function(t){return function(e,i,n){return t(this,e,i,n)}})},function(t,e,i){i(26)("Uint8",1,function(t){return function(e,i,n){return t(this,e,i,n)}},!0)},function(t,e,i){i(26)("Int16",2,function(t){return function(e,i,n){return t(this,e,i,n)}})},function(t,e,i){i(26)("Uint16",2,function(t){return function(e,i,n){return t(this,e,i,n)}})},function(t,e,i){i(26)("Int32",4,function(t){return function(e,i,n){return t(this,e,i,n)}})},function(t,e,i){i(26)("Uint32",4,function(t){return function(e,i,n){return t(this,e,i,n)}})},function(t,e,i){i(26)("Float32",4,function(t){return function(e,i,n){return t(this,e,i,n)}})},function(t,e,i){i(26)("Float64",8,function(t){return function(e,i,n){return t(this,e,i,n)}})},function(t,e,i){var n=i(1),r=i(22),o=i(5),s=(i(3).Reflect||{}).apply,a=Function.apply;n(n.S+n.F*!i(2)(function(){s(function(){})}),"Reflect",{apply:function(t,e,i){var n=r(t),l=o(i);return s?s(n,e,l):a.call(n,e,l)}})},function(t,e,i){var n=i(1),r=i(34),o=i(22),s=i(5),a=i(4),l=i(2),u=i(89),c=(i(3).Reflect||{}).construct,f=l(function(){function t(){}return!(c(function(){},[],t)instanceof t)}),h=!l(function(){c(function(){})});n(n.S+n.F*(f||h),"Reflect",{construct:function(t,e){o(t),s(e);var i=arguments.length<3?t:o(arguments[2]);if(h&&!f)return c(t,e,i);if(t==i){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(u.apply(t,n))}var l=i.prototype,p=r(a(l)?l:Object.prototype),d=Function.apply.call(t,p,e);return a(d)?d:p}})},function(t,e,i){var n=i(7),r=i(1),o=i(5),s=i(27);r(r.S+r.F*i(2)(function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,i){o(t),e=s(e,!0),o(i);try{return n.f(t,e,i),!0}catch(t){return!1}}})},function(t,e,i){var n=i(1),r=i(18).f,o=i(5);n(n.S,"Reflect",{deleteProperty:function(t,e){var i=r(o(t),e);return!(i&&!i.configurable)&&delete t[e]}})},function(t,e,i){"use strict";var n=i(1),r=i(5),o=function(t){this._t=r(t),this._i=0;var e,i=this._k=[];for(e in t)i.push(e)};i(97)(o,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),n(n.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,e,i){var n=i(18),r=i(36),o=i(13),s=i(1),a=i(4),l=i(5);s(s.S,"Reflect",{get:function t(e,i){var s,u,c=arguments.length<3?e:arguments[2];return l(e)===c?e[i]:(s=n.f(e,i))?o(s,"value")?s.value:void 0!==s.get?s.get.call(c):void 0:a(u=r(e))?t(u,i,c):void 0}})},function(t,e,i){var n=i(18),r=i(1),o=i(5);r(r.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(o(t),e)}})},function(t,e,i){var n=i(1),r=i(36),o=i(5);n(n.S,"Reflect",{getPrototypeOf:function(t){return r(o(t))}})},function(t,e,i){var n=i(1);n(n.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,i){var n=i(1),r=i(5),o=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return r(t),!o||o(t)}})},function(t,e,i){var n=i(1);n(n.S,"Reflect",{ownKeys:i(109)})},function(t,e,i){var n=i(1),r=i(5),o=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){r(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,e,i){var n=i(7),r=i(18),o=i(36),s=i(13),a=i(1),l=i(29),u=i(5),c=i(4);a(a.S,"Reflect",{set:function t(e,i,a){var f,h,p=arguments.length<4?e:arguments[3],d=r.f(u(e),i);if(!d){if(c(h=o(e)))return t(h,i,a,p);d=l(0)}if(s(d,"value")){if(!1===d.writable||!c(p))return!1;if(f=r.f(p,i)){if(f.get||f.set||!1===f.writable)return!1;f.value=a,n.f(p,i,f)}else n.f(p,i,l(0,a));return!0}return void 0!==d.set&&(d.set.call(p,a),!0)}})},function(t,e,i){var n=i(1),r=i(64);r&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){r.check(t,e);try{return r.set(t,e),!0}catch(t){return!1}}})},function(t,e,i){i(259),t.exports=i(9).Array.includes},function(t,e,i){"use strict";var n=i(1),r=i(46)(!0);n(n.P,"Array",{includes:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(39)("includes")},function(t,e,i){i(261),t.exports=i(9).String.padStart},function(t,e,i){"use strict";var n=i(1),r=i(110),o=i(54);n(n.P+n.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,i){i(263),t.exports=i(9).String.padEnd},function(t,e,i){"use strict";var n=i(1),r=i(110),o=i(54);n(n.P+n.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,i){i(265),t.exports=i(59).f("asyncIterator")},function(t,e,i){i(84)("asyncIterator")},function(t,e,i){i(267),t.exports=i(9).Object.getOwnPropertyDescriptors},function(t,e,i){var n=i(1),r=i(109),o=i(15),s=i(18),a=i(75);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,i,n=o(t),l=s.f,u=r(n),c={},f=0;u.length>f;)void 0!==(i=l(n,e=u[f++]))&&a(c,e,i);return c}})},function(t,e,i){i(269),t.exports=i(9).Object.values},function(t,e,i){var n=i(1),r=i(111)(!1);n(n.S,"Object",{values:function(t){return r(t)}})},function(t,e,i){i(271),t.exports=i(9).Object.entries},function(t,e,i){var n=i(1),r=i(111)(!0);n(n.S,"Object",{entries:function(t){return r(t)}})},function(t,e,i){"use strict";i(103),i(273),t.exports=i(9).Promise.finally},function(t,e,i){"use strict";var n=i(1),r=i(9),o=i(3),s=i(53),a=i(105);n(n.P+n.R,"Promise",{finally:function(t){var e=s(this,r.Promise||o.Promise),i="function"==typeof t;return this.then(i?function(i){return a(e,t()).then(function(){return i})}:t,i?function(i){return a(e,t()).then(function(){throw i})}:t)}})},function(t,e,i){i(275),i(276),i(277),t.exports=i(9)},function(t,e,i){var n=i(3),r=i(1),o=i(54),s=[].slice,a=/MSIE .\./.test(o),l=function(t){return function(e,i){var n=arguments.length>2,r=!!n&&s.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,r)}:e,i)}};r(r.G+r.B+r.F*a,{setTimeout:l(n.setTimeout),setInterval:l(n.setInterval)})},function(t,e,i){var n=i(1),r=i(80);n(n.G+n.B,{setImmediate:r.set,clearImmediate:r.clear})},function(t,e,i){for(var n=i(78),r=i(32),o=i(11),s=i(3),a=i(14),l=i(38),u=i(6),c=u("iterator"),f=u("toStringTag"),h=l.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=r(p),g=0;g<d.length;g++){var _,m=d[g],v=p[m],y=s[m],x=y&&y.prototype;if(x&&(x[c]||a(x,c,h),x[f]||a(x,f,m),l[m]=h,v))for(_ in n)x[_]||o(x,_,n[_],!0)}},function(t,e){!function(e){"use strict";var i,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag",u="object"==typeof t,c=e.regeneratorRuntime;if(c)u&&(t.exports=c);else{(c=e.regeneratorRuntime=u?t.exports:{}).wrap=x;var f="suspendedStart",h="suspendedYield",p="executing",d="completed",g={},_={};_[s]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(E([])));v&&v!==n&&r.call(v,s)&&(_=v);var y=S.prototype=w.prototype=Object.create(_);T.prototype=y.constructor=S,S.constructor=T,S[l]=T.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===T||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,l in t||(t[l]="GeneratorFunction")),t.prototype=Object.create(y),t},c.awrap=function(t){return{__await:t}},P(O.prototype),O.prototype[a]=function(){return this},c.AsyncIterator=O,c.async=function(t,e,i,n){var r=new O(x(t,e,i,n));return c.isGeneratorFunction(e)?r:r.next().then(function(t){return t.done?t.value:r.next()})},P(y),y[l]="Generator",y[s]=function(){return this},y.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var i in t)e.push(i);return e.reverse(),function i(){for(;e.length;){var n=e.pop();if(n in t)return i.value=n,i.done=!1,i}return i.done=!0,i}},c.values=E,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=i,this.done=!1,this.delegate=null,this.method="next",this.arg=i,this.tryEntries.forEach(A),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=i)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=i),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return n("end");if(s.tryLoc<=this.prev){var l=r.call(s,"catchLoc"),u=r.call(s,"finallyLoc");if(l&&u){if(this.prev<s.catchLoc)return n(s.catchLoc,!0);if(this.prev<s.finallyLoc)return n(s.finallyLoc)}else if(l){if(this.prev<s.catchLoc)return n(s.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return n(s.finallyLoc)}}}},abrupt:function(t,e){for(var i=this.tryEntries.length-1;i>=0;--i){var n=this.tryEntries[i];if(n.tryLoc<=this.prev&&r.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),A(i),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var r=n.arg;A(i)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:E(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=i),g}}}function x(t,e,i,n){var r=e&&e.prototype instanceof w?e:w,o=Object.create(r.prototype),s=new M(n||[]);return o._invoke=function(t,e,i){var n=f;return function(r,o){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===r)throw o;return R()}for(i.method=r,i.arg=o;;){var s=i.delegate;if(s){var a=k(s,i);if(a){if(a===g)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(n===f)throw n=d,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n=p;var l=b(t,e,i);if("normal"===l.type){if(n=i.done?d:h,l.arg===g)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(n=d,i.method="throw",i.arg=l.arg)}}}(t,i,s),o}function b(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}function w(){}function T(){}function S(){}function P(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function O(t){var e;this._invoke=function(i,n){function o(){return new Promise(function(e,o){!function e(i,n,o,s){var a=b(t[i],t,n);if("throw"!==a.type){var l=a.arg,u=l.value;return u&&"object"==typeof u&&r.call(u,"__await")?Promise.resolve(u.__await).then(function(t){e("next",t,o,s)},function(t){e("throw",t,o,s)}):Promise.resolve(u).then(function(t){l.value=t,o(l)},s)}s(a.arg)}(i,n,e,o)})}return e=e?e.then(o,o):o()}}function k(t,e){var n=t.iterator[e.method];if(n===i){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=i,k(t,e),"throw"===e.method))return g;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var r=b(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,g;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=i),e.delegate=null,g):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function E(t){if(t){var e=t[s];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=i,e.done=!0,e};return o.next=o}}return{next:R}}function R(){return{value:i,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,i){var n=i(281);"string"==typeof n&&(n=[[t.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};i(283)(n,r);n.locals&&(t.exports=n.locals)},function(t,e,i){(e=t.exports=i(282)(!1)).push([t.i,'html, body {\n  height: 100%;\n  margin: 0;\n  padding: 0; }\n\n.elements {\n  min-width: 100px;\n  min-height: 100px;\n  background: #FFF;\n  position: fixed;\n  left: 1em;\n  top: 1em; }\n  .elements:before {\n    width: 10px;\n    height: 10px;\n    content: "Elements list";\n    color: lightblue; }\n\n.control {\n  min-width: 100px;\n  padding: 4px;\n  margin: auto;\n  text-align: center; }\n  .control button {\n    margin: 0 8px; }\n\n#gameBox {\n  min-width: 300px;\n  max-width: 800px;\n  width: 100%;\n  height: 100%;\n  margin: auto;\n  text-align: left;\n  overflow: hidden;\n  position: relative;\n  background: rgba(255, 182, 193, 0.3);\n  outline: 1px solid yellow; }\n\n.gift {\n  width: 27px;\n  height: 27px;\n  border-radius: 50px;\n  position: absolute; }\n\n#gameBox .gift.hit, #gameBox .ball.hit {\n  background: #000;\n  width: 40px;\n  height: 40px;\n  transition-duration: 3s;\n  opacity: 0; }\n\n.BoomAnimate {\n  width: 40px;\n  height: 40px;\n  border-radius: 50px;\n  background: lightgreen;\n  position: absolute;\n  opacity: 1; }\n\n.BoomAnimate.hit {\n  transition-duration: 5s;\n  opacity: 0; }\n\n#gameBox #catcher {\n  width: 16%;\n  height: 20px;\n  display: inline-block;\n  background: lightseagreen; }\n\n#realcatcher {\n  width: 75%;\n  height: 50%;\n  margin: 30px auto 0;\n  outline: 1px solid red;\n  color: blue;\n  font-size: 30px;\n  text-align: center; }\n\n.hide {\n  display: none; }\n\nbutton {\n  border: 1px solid #DDD;\n  border-radius: 15px;\n  padding: 2px 12px; }\n  button:disabled {\n    color: #CCC;\n    background: #666; }\n',""]),e.locals={elements:"elements",control:"control",gameBox:"gameBox",gift:"gift",hit:"hit",ball:"ball",BoomAnimate:"BoomAnimate",catcher:"catcher",realcatcher:"realcatcher",hide:"hide"}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var i=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var r=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(n),o=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[i].concat(o).concat([r]).join("\n")}return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i}).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(n[o]=!0)}for(r=0;r<t.length;r++){var s=t[r];"number"==typeof s[0]&&n[s[0]]||(i&&!s[2]?s[2]=i:i&&(s[2]="("+s[2]+") and ("+i+")"),e.push(s))}},e}},function(t,e,i){var n={},r=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),o=function(t){var e={};return function(t,i){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,i);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),s=null,a=0,l=[],u=i(284);function c(t,e){for(var i=0;i<t.length;i++){var r=t[i],o=n[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(_(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(_(r.parts[s],e));n[r.id]={id:r.id,refs:1,parts:a}}}}function f(t,e){for(var i=[],n={},r=0;r<t.length;r++){var o=t[r],s=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};n[s]?n[s].parts.push(a):i.push(n[s]={id:s,parts:[a]})}return i}function h(t,e){var i=o(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=l[l.length-1];if("top"===t.insertAt)n?n.nextSibling?i.insertBefore(e,n.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),l.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=o(t.insertAt.before,i);i.insertBefore(e,r)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function d(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return i.nc}();n&&(t.attrs.nonce=n)}return g(e,t.attrs),h(t,e),e}function g(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})}function _(t,e){var i,n,r,o;if(e.transform&&t.css){if(!(o=e.transform(t.css)))return function(){};t.css=o}if(e.singleton){var l=a++;i=s||(s=d(e)),n=v.bind(null,i,l,!1),r=v.bind(null,i,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(e,t.attrs),h(t,e),e}(e),n=function(t,e,i){var n=i.css,r=i.sourceMap,o=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||o)&&(n=u(n));r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var s=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,i,e),r=function(){p(i),i.href&&URL.revokeObjectURL(i.href)}):(i=d(e),n=function(t,e){var i=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),r=function(){p(i)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else r()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=r()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=f(t,e);return c(i,e),function(t){for(var r=[],o=0;o<i.length;o++){var s=i[o];(a=n[s.id]).refs--,r.push(a)}t&&c(f(t,e),e);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete n[a.id]}}}};var m=function(){var t=[];return function(e,i){return t[e]=i,t.filter(Boolean).join("\n")}}();function v(t,e,i,n){var r=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=m(e,r);else{var o=document.createTextNode(r),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,n=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var r,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(r=0===o.indexOf("//")?o:0===o.indexOf("/")?i+o:n+o.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(t,e,i){"use strict";i.r(e);var n=i(0);
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/n.f._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(){var t=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},e=function(t,e,i){var n,r,o=t.cycle;for(n in o)r=o[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},i=function(t,e,r){n.g.call(this,t,e,r),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=i.prototype.render},r=n.g._internals,o=r.isSelector,s=r.isArray,a=i.prototype=n.g.to({},.1,{}),l=[];i.version="2.0.2",a.constructor=i,a.kill()._gc=!1,i.killTweensOf=i.killDelayedCallsTo=n.g.killTweensOf,i.getTweensOf=n.g.getTweensOf,i.lagSmoothing=n.g.lagSmoothing,i.ticker=n.g.ticker,i.render=n.g.render,a.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),n.g.prototype.invalidate.call(this)},a.updateTo=function(t,e){var i,r=this.ratio,o=this.vars.immediateRender||t.immediateRender;for(i in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[i]=t[i];if(this._initted||o)if(e)this._initted=!1,o&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&n.g._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var s=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(s,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||o)for(var a,l=1/(1-r),u=this._firstPT;u;)a=u.s+u.c,u.c*=l,u.s=a-u.c,u=u._next;return this},a.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var o,s,a,l,u,c,f,h,p,d=this._dirty?this.totalDuration():this._totalDuration,g=this._time,_=this._totalTime,m=this._cycle,v=this._duration,y=this._rawPrevTime;if(t>=d-1e-7&&t>=0?(this._totalTime=d,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=v,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(o=!0,s="onComplete",i=i||this._timeline.autoRemoveChildren),0===v&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(y<0||t<=0&&t>=-1e-7||1e-10===y&&"isPause"!==this.data)&&y!==t&&(i=!0,y>1e-10&&(s="onReverseComplete")),this._rawPrevTime=h=!e||t||y===t?t:1e-10)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==_||0===v&&y>0)&&(s="onReverseComplete",o=this._reversed),t<0&&(this._active=!1,0===v&&(this._initted||!this.vars.lazy||i)&&(y>=0&&(i=!0),this._rawPrevTime=h=!e||t||y===t?t:1e-10)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=v+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&_<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=v-this._time,(p=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==p||this._initted?this._yoyoEase=p=!0===p?this._ease:p instanceof n.b?p:n.b.map[p]:(p=this.vars.ease,this._yoyoEase=p=p?p instanceof n.b?p:"function"==typeof p?new n.b(p,this.vars.easeParams):n.b.map[p]||n.g.defaultEase:n.g.defaultEase)),this.ratio=p?1-p.getRatio((v-this._time)/v):0)),this._time>v?this._time=v:this._time<0&&(this._time=0)),this._easeType&&!p?(u=this._time/v,c=this._easeType,f=this._easePower,(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===f?u*=u:2===f?u*=u*u:3===f?u*=u*u*u:4===f&&(u*=u*u*u*u),1===c?this.ratio=1-u:2===c?this.ratio=u:this._time/v<.5?this.ratio=u/2:this.ratio=1-u/2):p||(this.ratio=this._ease.getRatio(this._time/v))),g!==this._time||i||m!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=g,this._totalTime=_,this._rawPrevTime=y,this._cycle=m,r.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||o||p?o&&this._ease._calcEnd&&!p&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/v)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==g&&t>=0&&(this._active=!0),0===_&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,!0,i):s||(s="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==v||e||this._callback("onStart"))),a=this._firstPT;a;)a.f?a.t[a.p](a.c*this.ratio+a.s):a.t[a.p]=a.c*this.ratio+a.s,a=a._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,i),e||(this._totalTime!==_||s)&&this._callback("onUpdate")),this._cycle!==m&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),s&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,i),o&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[s]&&this._callback(s),0===v&&1e-10===this._rawPrevTime&&1e-10!==h&&(this._rawPrevTime=0)))}else _!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},i.to=function(t,e,n){return new i(t,e,n)},i.from=function(t,e,n){return n.runBackwards=!0,n.immediateRender=0!=n.immediateRender,new i(t,e,n)},i.fromTo=function(t,e,n,r){return r.startAt=n,r.immediateRender=0!=r.immediateRender&&0!=n.immediateRender,new i(t,e,r)},i.staggerTo=i.allTo=function(r,a,u,c,f,h,p){c=c||0;var d,g,_,m,v=0,y=[],x=function(){u.onComplete&&u.onComplete.apply(u.onCompleteScope||this,arguments),f.apply(p||u.callbackScope||this,h||l)},b=u.cycle,w=u.startAt&&u.startAt.cycle;for(s(r)||("string"==typeof r&&(r=n.g.selector(r)||r),o(r)&&(r=t(r))),r=r||[],c<0&&((r=t(r)).reverse(),c*=-1),d=r.length-1,_=0;_<=d;_++){for(m in g={},u)g[m]=u[m];if(b&&(e(g,r,_),null!=g.duration&&(a=g.duration,delete g.duration)),w){for(m in w=g.startAt={},u.startAt)w[m]=u.startAt[m];e(g.startAt,r,_)}g.delay=v+(g.delay||0),_===d&&f&&(g.onComplete=x),y[_]=new i(r[_],a,g),v+=c}return y},i.staggerFrom=i.allFrom=function(t,e,n,r,o,s,a){return n.runBackwards=!0,n.immediateRender=0!=n.immediateRender,i.staggerTo(t,e,n,r,o,s,a)},i.staggerFromTo=i.allFromTo=function(t,e,n,r,o,s,a,l){return r.startAt=n,r.immediateRender=0!=r.immediateRender&&0!=n.immediateRender,i.staggerTo(t,e,r,o,s,a,l)},i.delayedCall=function(t,e,n,r,o){return new i(e,0,{delay:t,onComplete:e,onCompleteParams:n,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:n,immediateRender:!1,useFrames:o,overwrite:0})},i.set=function(t,e){return new i(t,0,e)},i.isTweening=function(t){return n.g.getTweensOf(t,!0).length>0};var u=function(t,e){for(var i=[],r=0,o=t._first;o;)o instanceof n.g?i[r++]=o:(e&&(i[r++]=o),r=(i=i.concat(u(o,e))).length),o=o._next;return i},c=i.getAllTweens=function(t){return u(n.a._rootTimeline,t).concat(u(n.a._rootFramesTimeline,t))};i.killAll=function(t,e,i,r){null==e&&(e=!0),null==i&&(i=!0);var o,s,a,l=c(0!=r),u=l.length,f=e&&i&&r;for(a=0;a<u;a++)s=l[a],(f||s instanceof n.d||(o=s.target===s.vars.onComplete)&&i||e&&!o)&&(t?s.totalTime(s._reversed?0:s.totalDuration()):s._enabled(!1,!1))},i.killChildTweensOf=function(e,a){if(null!=e){var l,u,c,f,h,p=r.tweenLookup;if("string"==typeof e&&(e=n.g.selector(e)||e),o(e)&&(e=t(e)),s(e))for(f=e.length;--f>-1;)i.killChildTweensOf(e[f],a);else{for(c in l=[],p)for(u=p[c].target.parentNode;u;)u===e&&(l=l.concat(p[c].tweens)),u=u.parentNode;for(h=l.length,f=0;f<h;f++)a&&l[f].totalTime(l[f].totalDuration()),l[f]._enabled(!1,!1)}}};var f=function(t,e,i,r){e=!1!==e,i=!1!==i;for(var o,s,a=c(r=!1!==r),l=e&&i&&r,u=a.length;--u>-1;)s=a[u],(l||s instanceof n.d||(o=s.target===s.vars.onComplete)&&i||e&&!o)&&s.paused(t)};return i.pauseAll=function(t,e,i){f(!0,t,e,i)},i.resumeAll=function(t,e,i){f(!1,t,e,i)},i.globalTimeScale=function(t){var e=n.a._rootTimeline,i=n.g.ticker.time;return arguments.length?(t=t||1e-10,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=n.a._rootFramesTimeline,i=n.g.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=n.a._rootTimeline._timeScale=t,t):e._timeScale},a.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},a.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},a.duration=function(t){return arguments.length?n.a.prototype.duration.call(this,t):this._duration},a.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},a.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},a.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},a.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},i},!0);var r=n.h.TweenMax;
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
n.f._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(){var t,e,i,r,o=function(){n.e.call(this,"css"),this._overwriteProps.length=0,this.setRatio=o.prototype.setRatio},s=n.f._gsDefine.globals,a={},l=o.prototype=new n.e("css");l.constructor=o,o.version="2.0.2",o.API=2,o.defaultTransformPerspective=0,o.defaultSkewType="compensated",o.defaultSmoothOrigin=!0,l="px",o.suffixMap={top:l,right:l,bottom:l,left:l,width:l,height:l,fontSize:l,padding:l,margin:l,perspective:l,lineHeight:""};var u,c,f,h,p,d,g,_,m=/(?:\-|\.|\b)(\d|\.|e\-)+/g,v=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,y=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,x=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,b=/(?:\d|\-|\+|=|#|\.)*/g,w=/opacity *= *([^)]*)/i,T=/opacity:([^;]*)/i,S=/alpha\(opacity *=.+?\)/i,P=/^(rgb|hsl)/,O=/([A-Z])/g,k=/-([a-z])/gi,C=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,A=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,E=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,R=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,L=/,(?=[^\)]*(?:\(|$))/gi,D=/[\s,\(]/i,F=Math.PI/180,N=180/Math.PI,I={},B={style:{}},j=n.f.document||{createElement:function(){return B}},X=function(t,e){return j.createElementNS?j.createElementNS(e||"http://www.w3.org/1999/xhtml",t):j.createElement(t)},Y=X("div"),z=X("img"),W=o._internals={_specialProps:a},U=(n.f.navigator||{}).userAgent||"",V=function(){var t=U.indexOf("Android"),e=X("a");return f=-1!==U.indexOf("Safari")&&-1===U.indexOf("Chrome")&&(-1===t||parseFloat(U.substr(t+8,2))>3),p=f&&parseFloat(U.substr(U.indexOf("Version/")+8,2))<6,h=-1!==U.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(U)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(U))&&(d=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),G=function(t){return w.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},H=function(t){n.f.console&&console.log(t)},q="",$="",Z=function(t,e){var i,n,r=(e=e||Y).style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(q="-"+($=3===n?"ms":i[n]).toLowerCase()+"-",$+t):null},K=("undefined"!=typeof window?window:j.defaultView||{getComputedStyle:function(){}}).getComputedStyle,J=o.getStyle=function(t,e,i,n,r){var o;return V||"opacity"!==e?(!n&&t.style[e]?o=t.style[e]:(i=i||K(t))?o=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(O,"-$1").toLowerCase()):t.currentStyle&&(o=t.currentStyle[e]),null==r||o&&"none"!==o&&"auto"!==o&&"auto auto"!==o?o:r):G(t)},Q=W.convertToPixels=function(t,e,i,r,s){if("px"===r||!r&&"lineHeight"!==e)return i;if("auto"===r||!i)return 0;var a,l,u,c=M.test(e),f=t,h=Y.style,p=i<0,d=1===i;if(p&&(i=-i),d&&(i*=100),"lineHeight"!==e||r)if("%"===r&&-1!==e.indexOf("border"))a=i/100*(c?t.clientWidth:t.clientHeight);else{if(h.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&f.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)h[c?"borderLeftWidth":"borderTopWidth"]=i+r;else{if(f=t.parentNode||j.body,-1!==J(f,"display").indexOf("flex")&&(h.position="absolute"),l=f._gsCache,u=n.g.ticker.frame,l&&c&&l.time===u)return l.width*i/100;h[c?"width":"height"]=i+r}f.appendChild(Y),a=parseFloat(Y[c?"offsetWidth":"offsetHeight"]),f.removeChild(Y),c&&"%"===r&&!1!==o.cacheWidths&&((l=f._gsCache=f._gsCache||{}).time=u,l.width=a/i*100),0!==a||s||(a=Q(t,e,i,r,!0))}else l=K(t).lineHeight,t.style.lineHeight=i,a=parseFloat(K(t).lineHeight),t.style.lineHeight=l;return d&&(a/=100),p?-a:a},tt=W.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(Q(t,e,parseFloat(r),r.replace(b,""))||0)},et=function(t,e){var i,n,r,o={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)-1!==(r=e[i]).indexOf("-transform")&&Ct!==r||(o[r.replace(k,A)]=e.getPropertyValue(r));else for(i in e)-1!==i.indexOf("Transform")&&kt!==i||(o[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===o[i]&&(o[i.replace(k,A)]=e[i]);return V||(o.opacity=G(t)),n=Yt(t,e,!1),o.rotation=n.rotation,o.skewX=n.skewX,o.scaleX=n.scaleX,o.scaleY=n.scaleY,o.x=n.x,o.y=n.y,Mt&&(o.z=n.z,o.rotationX=n.rotationX,o.rotationY=n.rotationY,o.scaleZ=n.scaleZ),o.filters&&delete o.filters,o},it=function(t,e,i,n,r){var o,s,a,l={},u=t.style;for(s in i)"cssText"!==s&&"length"!==s&&isNaN(s)&&(e[s]!==(o=i[s])||r&&r[s])&&-1===s.indexOf("Origin")&&("number"!=typeof o&&"string"!=typeof o||(l[s]="auto"!==o||"left"!==s&&"top"!==s?""!==o&&"auto"!==o&&"none"!==o||"string"!=typeof e[s]||""===e[s].replace(x,"")?o:0:tt(t,s),void 0!==u[s]&&(a=new mt(u,s,u[s],a))));if(n)for(s in n)"className"!==s&&(l[s]=n[s]);return{difs:l,firstMPT:a}},nt={width:["Left","Right"],height:["Top","Bottom"]},rt=["marginLeft","marginRight","marginTop","marginBottom"],ot=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getCTM&&Bt(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=nt[e],o=r.length;for(i=i||K(t,null);--o>-1;)n-=parseFloat(J(t,"padding"+r[o],i,!0))||0,n-=parseFloat(J(t,"border"+r[o]+"Width",i,!0))||0;return n},st=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":n[0],o=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(st(n[i]));return t.join(",")}return null==o?o="center"===r?"50%":"0":"center"===o&&(o="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),t=r+" "+o+(n.length>2?" "+n[2]:""),e&&(e.oxp=-1!==r.indexOf("%"),e.oyp=-1!==o.indexOf("%"),e.oxr="="===r.charAt(1),e.oyr="="===o.charAt(1),e.ox=parseFloat(r.replace(x,"")),e.oy=parseFloat(o.replace(x,"")),e.v=t),e||t},at=function(t,e){return"function"==typeof t&&(t=t(_,g)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},lt=function(t,e){"function"==typeof t&&(t=t(_,g));var i="string"==typeof t&&"="===t.charAt(1);return"string"==typeof t&&"v"===t.charAt(t.length-2)&&(t=(i?t.substr(0,2):0)+window["inner"+("vh"===t.substr(-2)?"Height":"Width")]*(parseFloat(i?t.substr(2):t)/100)),null==t?e:i?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ut=function(t,e,i,n){var r,o,s,a,l;return"function"==typeof t&&(t=t(_,g)),null==t?a=e:"number"==typeof t?a=t:(r=360,o=t.split("_"),s=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(o[0].substr(2)):parseFloat(o[0]))*(-1===t.indexOf("rad")?1:N)-(l?0:e),o.length&&(n&&(n[i]=e+s),-1!==t.indexOf("short")&&(s%=r)!==s%(r/2)&&(s=s<0?s+r:s-r),-1!==t.indexOf("_cw")&&s<0?s=(s+9999999999*r)%r-(s/r|0)*r:-1!==t.indexOf("ccw")&&s>0&&(s=(s-9999999999*r)%r-(s/r|0)*r)),a=e+s),a<1e-6&&a>-1e-6&&(a=0),a},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return 255*(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},ht=o.parseColor=function(t,e){var i,n,r,o,s,a,l,u,c,f,h;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(n=t.charAt(1))+n+(r=t.charAt(2))+r+(o=t.charAt(3))+o),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=h=t.match(m),e){if(-1!==t.indexOf("="))return t.match(v)}else s=Number(i[0])%360/360,a=Number(i[1])/100,n=2*(l=Number(i[2])/100)-(r=l<=.5?l*(a+1):l+a-l*a),i.length>3&&(i[3]=Number(i[3])),i[0]=ft(s+1/3,n,r),i[1]=ft(s,n,r),i[2]=ft(s-1/3,n,r);else i=t.match(m)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!h&&(n=i[0]/255,r=i[1]/255,o=i[2]/255,l=((u=Math.max(n,r,o))+(c=Math.min(n,r,o)))/2,u===c?s=a=0:(f=u-c,a=l>.5?f/(2-u-c):f/(u+c),s=u===n?(r-o)/f+(r<o?6:0):u===r?(o-n)/f+2:(n-r)/f+4,s*=60),i[0]=s+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},pt=function(t,e){var i,n,r,o=t.match(dt)||[],s=0,a="";if(!o.length)return t;for(i=0;i<o.length;i++)n=o[i],s+=(r=t.substr(s,t.indexOf(n,s)-s)).length+n.length,3===(n=ht(n,e)).length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(s)},dt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(l in ct)dt+="|"+l+"\\b";dt=new RegExp(dt+")","gi"),o.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];dt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=pt(t[0],e),t[1]=pt(t[1],e)),dt.lastIndex=0},n.g.defaultStringFilter||(n.g.defaultStringFilter=o.colorStringFilter);var gt=function(t,e,i,n){if(null==t)return function(t){return t};var r,o=e?(t.match(dt)||[""])[0]:"",s=t.split(o).join("").match(y)||[],a=t.substr(0,t.indexOf(s[0])),l=")"===t.charAt(t.length-1)?")":"",u=-1!==t.indexOf(" ")?" ":",",c=s.length,f=c>0?s[0].replace(m,""):"";return c?r=e?function(t){var e,h,p,d;if("number"==typeof t)t+=f;else if(n&&L.test(t)){for(d=t.replace(L,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(dt)||[o])[0],p=(h=t.split(e).join("").match(y)||[]).length,c>p--)for(;++p<c;)h[p]=i?h[(p-1)/2|0]:s[p];return a+h.join(u)+u+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,o,h;if("number"==typeof t)t+=f;else if(n&&L.test(t)){for(o=t.replace(L,"|").split("|"),h=0;h<o.length;h++)o[h]=r(o[h]);return o.join(",")}if(h=(e=t.match(y)||[]).length,c>h--)for(;++h<c;)e[h]=i?e[(h-1)/2|0]:s[h];return a+e.join(u)+l}:function(t){return t}},_t=function(t){return t=t.split(","),function(e,i,n,r,o,s,a){var l,u=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=u[l]=u[l]||u[(l-1)/2>>0];return r.parse(e,a,o,s)}},mt=(W._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,o,s=this.data,a=s.proxy,l=s.firstMPT;l;)e=a[l.v],l.r?e=l.r(e):e<1e-6&&e>-1e-6&&(e=0),l.t[l.p]=e,l=l._next;if(s.autoRotate&&(s.autoRotate.rotation=s.mod?s.mod.call(this._tween,a.rotation,this.t,this._tween):a.rotation),1===t||0===t)for(l=s.firstMPT,o=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[o]=r}}else i[o]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),vt=(W._parseToProxy=function(t,e,i,n,r,o){var s,a,l,u,c,f=n,h={},p={},d=i._transform,g=I;for(i._transform=null,I=e,n=c=i.parse(t,e,n,r),I=g,o&&(i._transform=d,f&&(f._prev=null,f._prev&&(f._prev._next=null)));n&&n!==f;){if(n.type<=1&&(p[a=n.p]=n.s+n.c,h[a]=n.s,o||(u=new mt(n,"s",a,u,n.r),n.c=0),1===n.type))for(s=n.l;--s>0;)l="xn"+s,p[a=n.p+"_"+l]=n.data[l],h[a]=n[l],o||(u=new mt(n,l,a,u,n.rxp[l]));n=n._next}return{proxy:h,end:p,firstMPT:u,pt:c}},W.CSSPropTween=function(e,i,n,o,s,a,l,u,c,f,h){this.t=e,this.p=i,this.s=n,this.c=o,this.n=l||i,e instanceof vt||r.push(this.n),this.r=u?"function"==typeof u?u:Math.round:u,this.type=a||0,c&&(this.pr=c,t=!0),this.b=void 0===f?n:f,this.e=void 0===h?n+o:h,s&&(this._next=s,s._prev=this)}),yt=function(t,e,i,n,r,o){var s=new vt(t,e,i,n-i,r,-1,o);return s.b=i,s.e=s.xs0=n,s},xt=o.parseComplex=function(t,e,i,n,r,s,a,l,c,f){i=i||s||"","function"==typeof n&&(n=n(_,g)),a=new vt(t,e,0,0,a,f?2:1,null,!1,l,i,n),n+="",r&&dt.test(n+i)&&(n=[i,n],o.colorStringFilter(n),i=n[0],n=n[1]);var h,p,d,y,x,b,w,T,S,P,O,k,C,A=i.split(", ").join(",").split(" "),M=n.split(", ").join(",").split(" "),E=A.length,R=!1!==u;for(-1===n.indexOf(",")&&-1===i.indexOf(",")||(-1!==(n+i).indexOf("rgb")||-1!==(n+i).indexOf("hsl")?(A=A.join(" ").replace(L,", ").split(" "),M=M.join(" ").replace(L,", ").split(" ")):(A=A.join(" ").split(",").join(", ").split(" "),M=M.join(" ").split(",").join(", ").split(" ")),E=A.length),E!==M.length&&(E=(A=(s||"").split(" ")).length),a.plugin=c,a.setRatio=f,dt.lastIndex=0,h=0;h<E;h++)if(y=A[h],x=M[h]+"",(T=parseFloat(y))||0===T)a.appendXtra("",T,at(x,T),x.replace(v,""),!(!R||-1===x.indexOf("px"))&&Math.round,!0);else if(r&&dt.test(y))k=")"+((k=x.indexOf(")")+1)?x.substr(k):""),C=-1!==x.indexOf("hsl")&&V,P=x,y=ht(y,C),x=ht(x,C),(S=y.length+x.length>6)&&!V&&0===x[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(M[h]).join("transparent")):(V||(S=!1),C?a.appendXtra(P.substr(0,P.indexOf("hsl"))+(S?"hsla(":"hsl("),y[0],at(x[0],y[0]),",",!1,!0).appendXtra("",y[1],at(x[1],y[1]),"%,",!1).appendXtra("",y[2],at(x[2],y[2]),S?"%,":"%"+k,!1):a.appendXtra(P.substr(0,P.indexOf("rgb"))+(S?"rgba(":"rgb("),y[0],x[0]-y[0],",",Math.round,!0).appendXtra("",y[1],x[1]-y[1],",",Math.round).appendXtra("",y[2],x[2]-y[2],S?",":k,Math.round),S&&(y=y.length<4?1:y[3],a.appendXtra("",y,(x.length<4?1:x[3])-y,k,!1))),dt.lastIndex=0;else if(b=y.match(m)){if(!(w=x.match(v))||w.length!==b.length)return a;for(d=0,p=0;p<b.length;p++)O=b[p],P=y.indexOf(O,d),a.appendXtra(y.substr(d,P-d),Number(O),at(w[p],O),"",!(!R||"px"!==y.substr(P+O.length,2))&&Math.round,0===p),d=P+O.length;a["xs"+a.l]+=y.substr(d)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+x:x;if(-1!==n.indexOf("=")&&a.data){for(k=a.xs0+a.data.s,h=1;h<a.l;h++)k+=a["xs"+h]+a.data["xn"+h];a.e=k+a["xs"+h]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},bt=9;for((l=vt.prototype).l=l.pr=0;--bt>0;)l["xn"+bt]=0,l["xs"+bt]="";l.xs0="",l._next=l._prev=l.xfirst=l.data=l.plugin=l.setRatio=l.rxp=null,l.appendXtra=function(t,e,i,n,r,o){var s=this,a=s.l;return s["xs"+a]+=o&&(a||s["xs"+a])?" "+t:t||"",i||0===a||s.plugin?(s.l++,s.type=s.setRatio?2:1,s["xs"+s.l]=n||"",a>0?(s.data["xn"+a]=e+i,s.rxp["xn"+a]=r,s["xn"+a]=e,s.plugin||(s.xfirst=new vt(s,"xn"+a,e,i,s.xfirst||s,0,s.n,r,s.pr),s.xfirst.xs0=0),s):(s.data={s:e+i},s.rxp={},s.s=e,s.c=i,s.r=r,s)):(s["xs"+a]+=e+(n||""),s)};var wt=function(t,e){e=e||{},this.p=e.prefix&&Z(t)||t,a[t]=a[this.p]=this,this.format=e.formatter||gt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Tt=W._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;n<r.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,new wt(r[n],e)},St=W._registerPluginProp=function(t){if(!a[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Tt(t,{parser:function(t,i,n,r,o,l,u){var c=s.com.greensock.plugins[e];return c?(c._cssRegister(),a[n].parse(t,i,n,r,o,l,u)):(H("Error: "+e+" js file not loaded."),o)}})}};(l=wt.prototype).parseComplex=function(t,e,i,n,r,o){var s,a,l,u,c,f,h=this.keyword;if(this.multi&&(L.test(i)||L.test(e)?(a=e.replace(L,"|").split("|"),l=i.replace(L,"|").split("|")):h&&(a=[e],l=[i])),l){for(u=l.length>a.length?l.length:a.length,s=0;s<u;s++)e=a[s]=a[s]||this.dflt,i=l[s]=l[s]||this.dflt,h&&(c=e.indexOf(h))!==(f=i.indexOf(h))&&(-1===f?a[s]=a[s].split(h).join(""):-1===c&&(a[s]+=" "+h));e=a.join(", "),i=l.join(", ")}return xt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,o)},l.parse=function(t,e,n,r,o,s,a){return this.parseComplex(t.style,this.format(J(t,this.p,i,!1,this.dflt)),this.format(e),o,s)},o.registerSpecialProp=function(t,e,i){Tt(t,{parser:function(t,n,r,o,s,a,l){var u=new vt(t,r,0,0,s,2,r,!1,i);return u.plugin=a,u.setRatio=e(t,n,o._tween,r),u},priority:i})},o.useSVGTransformAttr=!0;var Pt,Ot="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),kt=Z("transform"),Ct=q+"transform",At=Z("transformOrigin"),Mt=null!==Z("perspective"),Et=W.Transform=function(){this.perspective=parseFloat(o.defaultTransformPerspective)||0,this.force3D=!(!1===o.defaultForce3D||!Mt)&&(o.defaultForce3D||"auto")},Rt=n.f.SVGElement,Lt=function(t,e,i){var n,r=j.createElementNS("http://www.w3.org/2000/svg",t),o=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(o,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Dt=j.documentElement||{},Ft=function(){var t,e,i,r=d||/Android/i.test(U)&&!n.f.chrome;return j.createElementNS&&!r&&(t=Lt("svg",Dt),i=(e=Lt("rect",t,{width:100,height:50,x:100})).getBoundingClientRect().width,e.style[At]="50% 50%",e.style[kt]="scaleX(0.5)",r=i===e.getBoundingClientRect().width&&!(h&&Mt),Dt.removeChild(t)),r}(),Nt=function(t,e,i,n,r,s){var a,l,u,c,f,h,p,d,g,_,m,v,y,x,b=t._gsTransform,w=Xt(t,!0);b&&(y=b.xOrigin,x=b.yOrigin),(!n||(a=n.split(" ")).length<2)&&(0===(p=t.getBBox()).x&&0===p.y&&p.width+p.height===0&&(p={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),a=[(-1!==(e=st(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=c=parseFloat(a[0]),i.yOrigin=f=parseFloat(a[1]),n&&w!==jt&&(h=w[0],p=w[1],d=w[2],g=w[3],_=w[4],m=w[5],(v=h*g-p*d)&&(l=c*(g/v)+f*(-d/v)+(d*m-g*_)/v,u=c*(-p/v)+f*(h/v)-(h*m-p*_)/v,c=i.xOrigin=a[0]=l,f=i.yOrigin=a[1]=u)),b&&(s&&(i.xOffset=b.xOffset,i.yOffset=b.yOffset,b=i),r||!1!==r&&!1!==o.defaultSmoothOrigin?(l=c-y,u=f-x,b.xOffset+=l*w[0]+u*w[2]-l,b.yOffset+=l*w[1]+u*w[3]-u):b.xOffset=b.yOffset=0),s||t.setAttribute("data-svg-origin",a.join(" "))},It=function(t){var e,i=X("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,r=this.nextSibling,o=this.style.cssText;if(Dt.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=It}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return r?n.insertBefore(this,r):n.appendChild(this),Dt.removeChild(i),this.style.cssText=o,e},Bt=function(t){return!(!Rt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!function(t){try{return t.getBBox()}catch(e){return It.call(t,!0)}}(t))},jt=[1,0,0,1,0,0],Xt=function(t,e){var i,n,r,o,s,a,l=t._gsTransform||new Et,u=t.style;if(kt?n=J(t,Ct,null,!0):t.currentStyle&&(n=(n=t.currentStyle.filter.match(E))&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,!kt||!(a=!K(t)||"none"===K(t).display)&&t.parentNode||(a&&(o=u.display,u.display="block"),t.parentNode||(s=1,Dt.appendChild(t)),i=!(n=J(t,Ct,null,!0))||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,o?u.display=o:a&&Vt(u,"display"),s&&Dt.removeChild(t)),(l.svg||t.getCTM&&Bt(t))&&(i&&-1!==(u[kt]+"").indexOf("matrix")&&(n=u[kt],i=0),r=t.getAttribute("transform"),i&&r&&(n="matrix("+(r=t.transform.baseVal.consolidate().matrix).a+","+r.b+","+r.c+","+r.d+","+r.e+","+r.f+")",i=0)),i)return jt;for(r=(n||"").match(m)||[],bt=r.length;--bt>-1;)o=Number(r[bt]),r[bt]=(s=o-(o|=0))?(1e5*s+(s<0?-.5:.5)|0)/1e5+o:o;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Yt=W.getTransform=function(t,e,i,r){if(t._gsTransform&&i&&!r)return t._gsTransform;var s,a,l,u,c,f,h=i&&t._gsTransform||new Et,p=h.scaleX<0,d=Mt&&(parseFloat(J(t,At,e,!1,"0 0 0").split(" ")[2])||h.zOrigin)||0,g=parseFloat(o.defaultTransformPerspective)||0;if(h.svg=!(!t.getCTM||!Bt(t)),h.svg&&(Nt(t,J(t,At,e,!1,"50% 50%")+"",h,t.getAttribute("data-svg-origin")),Pt=o.useSVGTransformAttr||Ft),(s=Xt(t))!==jt){if(16===s.length){var _,m,v,y,x,b=s[0],w=s[1],T=s[2],S=s[3],P=s[4],O=s[5],k=s[6],C=s[7],A=s[8],M=s[9],E=s[10],R=s[12],L=s[13],D=s[14],F=s[11],I=Math.atan2(k,E);h.zOrigin&&(R=A*(D=-h.zOrigin)-s[12],L=M*D-s[13],D=E*D+h.zOrigin-s[14]),h.rotationX=I*N,I&&(_=P*(y=Math.cos(-I))+A*(x=Math.sin(-I)),m=O*y+M*x,v=k*y+E*x,A=P*-x+A*y,M=O*-x+M*y,E=k*-x+E*y,F=C*-x+F*y,P=_,O=m,k=v),I=Math.atan2(-T,E),h.rotationY=I*N,I&&(m=w*(y=Math.cos(-I))-M*(x=Math.sin(-I)),v=T*y-E*x,M=w*x+M*y,E=T*x+E*y,F=S*x+F*y,b=_=b*y-A*x,w=m,T=v),I=Math.atan2(w,b),h.rotation=I*N,I&&(_=b*(y=Math.cos(I))+w*(x=Math.sin(I)),m=P*y+O*x,v=A*y+M*x,w=w*y-b*x,O=O*y-P*x,M=M*y-A*x,b=_,P=m,A=v),h.rotationX&&Math.abs(h.rotationX)+Math.abs(h.rotation)>359.9&&(h.rotationX=h.rotation=0,h.rotationY=180-h.rotationY),I=Math.atan2(P,O),h.scaleX=(1e5*Math.sqrt(b*b+w*w+T*T)+.5|0)/1e5,h.scaleY=(1e5*Math.sqrt(O*O+k*k)+.5|0)/1e5,h.scaleZ=(1e5*Math.sqrt(A*A+M*M+E*E)+.5|0)/1e5,b/=h.scaleX,P/=h.scaleY,w/=h.scaleX,O/=h.scaleY,Math.abs(I)>2e-5?(h.skewX=I*N,P=0,"simple"!==h.skewType&&(h.scaleY*=1/Math.cos(I))):h.skewX=0,h.perspective=F?1/(F<0?-F:F):0,h.x=R,h.y=L,h.z=D,h.svg&&(h.x-=h.xOrigin-(h.xOrigin*b-h.yOrigin*P),h.y-=h.yOrigin-(h.yOrigin*w-h.xOrigin*O))}else if(!Mt||r||!s.length||h.x!==s[4]||h.y!==s[5]||!h.rotationX&&!h.rotationY){var B=s.length>=6,j=B?s[0]:1,X=s[1]||0,Y=s[2]||0,z=B?s[3]:1;h.x=s[4]||0,h.y=s[5]||0,l=Math.sqrt(j*j+X*X),u=Math.sqrt(z*z+Y*Y),c=j||X?Math.atan2(X,j)*N:h.rotation||0,f=Y||z?Math.atan2(Y,z)*N+c:h.skewX||0,h.scaleX=l,h.scaleY=u,h.rotation=c,h.skewX=f,Mt&&(h.rotationX=h.rotationY=h.z=0,h.perspective=g,h.scaleZ=1),h.svg&&(h.x-=h.xOrigin-(h.xOrigin*j+h.yOrigin*Y),h.y-=h.yOrigin-(h.xOrigin*X+h.yOrigin*z))}for(a in Math.abs(h.skewX)>90&&Math.abs(h.skewX)<270&&(p?(h.scaleX*=-1,h.skewX+=h.rotation<=0?180:-180,h.rotation+=h.rotation<=0?180:-180):(h.scaleY*=-1,h.skewX+=h.skewX<=0?180:-180)),h.zOrigin=d,h)h[a]<2e-5&&h[a]>-2e-5&&(h[a]=0)}return i&&(t._gsTransform=h,h.svg&&(Pt&&t.style[kt]?n.g.delayedCall(.001,function(){Vt(t.style,kt)}):!Pt&&t.getAttribute("transform")&&n.g.delayedCall(.001,function(){t.removeAttribute("transform")}))),h},zt=function(t){var e,i,n=this.data,r=-n.rotation*F,o=r+n.skewX*F,s=(Math.cos(r)*n.scaleX*1e5|0)/1e5,a=(Math.sin(r)*n.scaleX*1e5|0)/1e5,l=(Math.sin(o)*-n.scaleY*1e5|0)/1e5,u=(Math.cos(o)*n.scaleY*1e5|0)/1e5,c=this.t.style,f=this.t.currentStyle;if(f){i=a,a=-l,l=-i,e=f.filter,c.filter="";var h,p,g=this.t.offsetWidth,_=this.t.offsetHeight,m="absolute"!==f.position,v="progid:DXImageTransform.Microsoft.Matrix(M11="+s+", M12="+a+", M21="+l+", M22="+u,y=n.x+g*n.xPercent/100,x=n.y+_*n.yPercent/100;if(null!=n.ox&&(y+=(h=(n.oxp?g*n.ox*.01:n.ox)-g/2)-(h*s+(p=(n.oyp?_*n.oy*.01:n.oy)-_/2)*a),x+=p-(h*l+p*u)),v+=m?", Dx="+((h=g/2)-(h*s+(p=_/2)*a)+y)+", Dy="+(p-(h*l+p*u)+x)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?c.filter=e.replace(R,v):c.filter=v+" "+e,0!==t&&1!==t||1===s&&0===a&&0===l&&1===u&&(m&&-1===v.indexOf("Dx=0, Dy=0")||w.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&c.removeAttribute("filter")),!m){var T,S,P,O=d<8?1:-1;for(h=n.ieOffsetX||0,p=n.ieOffsetY||0,n.ieOffsetX=Math.round((g-((s<0?-s:s)*g+(a<0?-a:a)*_))/2+y),n.ieOffsetY=Math.round((_-((u<0?-u:u)*_+(l<0?-l:l)*g))/2+x),bt=0;bt<4;bt++)P=(i=-1!==(T=f[S=rt[bt]]).indexOf("px")?parseFloat(T):Q(this.t,S,parseFloat(T),T.replace(b,""))||0)!==n[S]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?h-n.ieOffsetX:p-n.ieOffsetY,c[S]=(n[S]=Math.round(i-P*(0===bt||2===bt?1:O)))+"px"}}},Wt=W.set3DTransformRatio=W.setTransformRatio=function(t){var e,i,n,r,o,s,a,l,u,c,f,p,d,g,_,m,v,y,x,b,w,T=this.data,S=this.t.style,P=T.rotation,O=T.rotationX,k=T.rotationY,C=T.scaleX,A=T.scaleY,M=T.scaleZ,E=T.x,R=T.y,L=T.z,D=T.svg,N=T.perspective,I=T.force3D,B=T.skewY,j=T.skewX;if(B&&(j+=B,P+=B),!((1!==t&&0!==t||"auto"!==I||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&I||L||N||k||O||1!==M)||Pt&&D||!Mt)P||j||D?(P*=F,b=j*F,w=1e5,i=Math.cos(P)*C,o=Math.sin(P)*C,n=Math.sin(P-b)*-A,s=Math.cos(P-b)*A,b&&"simple"===T.skewType&&(e=Math.tan(b-B*F),n*=e=Math.sqrt(1+e*e),s*=e,B&&(e=Math.tan(B*F),i*=e=Math.sqrt(1+e*e),o*=e)),D&&(E+=T.xOrigin-(T.xOrigin*i+T.yOrigin*n)+T.xOffset,R+=T.yOrigin-(T.xOrigin*o+T.yOrigin*s)+T.yOffset,Pt&&(T.xPercent||T.yPercent)&&(_=this.t.getBBox(),E+=.01*T.xPercent*_.width,R+=.01*T.yPercent*_.height),E<(_=1e-6)&&E>-_&&(E=0),R<_&&R>-_&&(R=0)),x=(i*w|0)/w+","+(o*w|0)/w+","+(n*w|0)/w+","+(s*w|0)/w+","+E+","+R+")",D&&Pt?this.t.setAttribute("transform","matrix("+x):S[kt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix(":"matrix(")+x):S[kt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix(":"matrix(")+C+",0,0,"+A+","+E+","+R+")";else{if(h&&(C<(_=1e-4)&&C>-_&&(C=M=2e-5),A<_&&A>-_&&(A=M=2e-5),!N||T.z||T.rotationX||T.rotationY||(N=0)),P||j)P*=F,m=i=Math.cos(P),v=o=Math.sin(P),j&&(P-=j*F,m=Math.cos(P),v=Math.sin(P),"simple"===T.skewType&&(e=Math.tan((j-B)*F),m*=e=Math.sqrt(1+e*e),v*=e,T.skewY&&(e=Math.tan(B*F),i*=e=Math.sqrt(1+e*e),o*=e))),n=-v,s=m;else{if(!(k||O||1!==M||N||D))return void(S[kt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) translate3d(":"translate3d(")+E+"px,"+R+"px,"+L+"px)"+(1!==C||1!==A?" scale("+C+","+A+")":""));i=s=1,n=o=0}c=1,r=a=l=u=f=p=0,d=N?-1/N:0,g=T.zOrigin,_=1e-6,",","0",(P=k*F)&&(m=Math.cos(P),l=-(v=Math.sin(P)),f=d*-v,r=i*v,a=o*v,c=m,d*=m,i*=m,o*=m),(P=O*F)&&(e=n*(m=Math.cos(P))+r*(v=Math.sin(P)),y=s*m+a*v,u=c*v,p=d*v,r=n*-v+r*m,a=s*-v+a*m,c*=m,d*=m,n=e,s=y),1!==M&&(r*=M,a*=M,c*=M,d*=M),1!==A&&(n*=A,s*=A,u*=A,p*=A),1!==C&&(i*=C,o*=C,l*=C,f*=C),(g||D)&&(g&&(E+=r*-g,R+=a*-g,L+=c*-g+g),D&&(E+=T.xOrigin-(T.xOrigin*i+T.yOrigin*n)+T.xOffset,R+=T.yOrigin-(T.xOrigin*o+T.yOrigin*s)+T.yOffset),E<_&&E>-_&&(E="0"),R<_&&R>-_&&(R="0"),L<_&&L>-_&&(L=0)),x=T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix3d(":"matrix3d(",x+=(i<_&&i>-_?"0":i)+","+(o<_&&o>-_?"0":o)+","+(l<_&&l>-_?"0":l),x+=","+(f<_&&f>-_?"0":f)+","+(n<_&&n>-_?"0":n)+","+(s<_&&s>-_?"0":s),O||k||1!==M?(x+=","+(u<_&&u>-_?"0":u)+","+(p<_&&p>-_?"0":p)+","+(r<_&&r>-_?"0":r),x+=","+(a<_&&a>-_?"0":a)+","+(c<_&&c>-_?"0":c)+","+(d<_&&d>-_?"0":d)+","):x+=",0,0,0,0,1,0,",x+=E+","+R+","+L+","+(N?1+-L/N:1)+")",S[kt]=x}};(l=Et.prototype).x=l.y=l.z=l.skewX=l.skewY=l.rotation=l.rotationX=l.rotationY=l.zOrigin=l.xPercent=l.yPercent=l.xOffset=l.yOffset=0,l.scaleX=l.scaleY=l.scaleZ=1,Tt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,n,r,s,a,l){if(r._lastParsedTransform===l)return s;r._lastParsedTransform=l;var u,c=l.scale&&"function"==typeof l.scale?l.scale:0;"function"==typeof l[n]&&(u=l[n],l[n]=e),c&&(l.scale=c(_,t));var f,h,p,d,m,v,y,x,b,w=t._gsTransform,T=t.style,S=Ot.length,P=l,O={},k=Yt(t,i,!0,P.parseTransform),C=P.transform&&("function"==typeof P.transform?P.transform(_,g):P.transform);if(k.skewType=P.skewType||k.skewType||o.defaultSkewType,r._transform=k,"rotationZ"in P&&(P.rotation=P.rotationZ),C&&"string"==typeof C&&kt)(h=Y.style)[kt]=C,h.display="block",h.position="absolute",-1!==C.indexOf("%")&&(h.width=J(t,"width"),h.height=J(t,"height")),j.body.appendChild(Y),f=Yt(Y,null,!1),"simple"===k.skewType&&(f.scaleY*=Math.cos(f.skewX*F)),k.svg&&(v=k.xOrigin,y=k.yOrigin,f.x-=k.xOffset,f.y-=k.yOffset,(P.transformOrigin||P.svgOrigin)&&(C={},Nt(t,st(P.transformOrigin),C,P.svgOrigin,P.smoothOrigin,!0),v=C.xOrigin,y=C.yOrigin,f.x-=C.xOffset-k.xOffset,f.y-=C.yOffset-k.yOffset),(v||y)&&(x=Xt(Y,!0),f.x-=v-(v*x[0]+y*x[2]),f.y-=y-(v*x[1]+y*x[3]))),j.body.removeChild(Y),f.perspective||(f.perspective=k.perspective),null!=P.xPercent&&(f.xPercent=lt(P.xPercent,k.xPercent)),null!=P.yPercent&&(f.yPercent=lt(P.yPercent,k.yPercent));else if("object"==typeof P){if(f={scaleX:lt(null!=P.scaleX?P.scaleX:P.scale,k.scaleX),scaleY:lt(null!=P.scaleY?P.scaleY:P.scale,k.scaleY),scaleZ:lt(P.scaleZ,k.scaleZ),x:lt(P.x,k.x),y:lt(P.y,k.y),z:lt(P.z,k.z),xPercent:lt(P.xPercent,k.xPercent),yPercent:lt(P.yPercent,k.yPercent),perspective:lt(P.transformPerspective,k.perspective)},null!=(m=P.directionalRotation))if("object"==typeof m)for(h in m)P[h]=m[h];else P.rotation=m;"string"==typeof P.x&&-1!==P.x.indexOf("%")&&(f.x=0,f.xPercent=lt(P.x,k.xPercent)),"string"==typeof P.y&&-1!==P.y.indexOf("%")&&(f.y=0,f.yPercent=lt(P.y,k.yPercent)),f.rotation=ut("rotation"in P?P.rotation:"shortRotation"in P?P.shortRotation+"_short":k.rotation,k.rotation,"rotation",O),Mt&&(f.rotationX=ut("rotationX"in P?P.rotationX:"shortRotationX"in P?P.shortRotationX+"_short":k.rotationX||0,k.rotationX,"rotationX",O),f.rotationY=ut("rotationY"in P?P.rotationY:"shortRotationY"in P?P.shortRotationY+"_short":k.rotationY||0,k.rotationY,"rotationY",O)),f.skewX=ut(P.skewX,k.skewX),f.skewY=ut(P.skewY,k.skewY)}for(Mt&&null!=P.force3D&&(k.force3D=P.force3D,d=!0),(p=k.force3D||k.z||k.rotationX||k.rotationY||f.z||f.rotationX||f.rotationY||f.perspective)||null==P.scale||(f.scaleZ=1);--S>-1;)((C=f[b=Ot[S]]-k[b])>1e-6||C<-1e-6||null!=P[b]||null!=I[b])&&(d=!0,s=new vt(k,b,k[b],C,s),b in O&&(s.e=O[b]),s.xs0=0,s.plugin=a,r._overwriteProps.push(s.n));return C=P.transformOrigin,k.svg&&(C||P.svgOrigin)&&(v=k.xOffset,y=k.yOffset,Nt(t,st(C),f,P.svgOrigin,P.smoothOrigin),s=yt(k,"xOrigin",(w?k:f).xOrigin,f.xOrigin,s,"transformOrigin"),s=yt(k,"yOrigin",(w?k:f).yOrigin,f.yOrigin,s,"transformOrigin"),v===k.xOffset&&y===k.yOffset||(s=yt(k,"xOffset",w?v:k.xOffset,k.xOffset,s,"transformOrigin"),s=yt(k,"yOffset",w?y:k.yOffset,k.yOffset,s,"transformOrigin")),C="0px 0px"),(C||Mt&&p&&k.zOrigin)&&(kt?(d=!0,b=At,C=(C||J(t,b,i,!1,"50% 50%"))+"",(s=new vt(T,b,0,0,s,-1,"transformOrigin")).b=T[b],s.plugin=a,Mt?(h=k.zOrigin,C=C.split(" "),k.zOrigin=(C.length>2&&(0===h||"0px"!==C[2])?parseFloat(C[2]):h)||0,s.xs0=s.e=C[0]+" "+(C[1]||"50%")+" 0px",(s=new vt(k,"zOrigin",0,0,s,-1,s.n)).b=h,s.xs0=s.e=k.zOrigin):s.xs0=s.e=C):st(C+"",k)),d&&(r._transformType=k.svg&&Pt||!p&&3!==this._transformType?2:3),u&&(l[n]=u),c&&(l.scale=c),s},prefix:!0}),Tt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Tt("borderRadius",{defaultValue:"0px",parser:function(t,n,r,o,s,a){n=this.format(n);var l,u,c,f,h,p,d,g,_,m,v,y,x,b,w,T,S=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],P=t.style;for(_=parseFloat(t.offsetWidth),m=parseFloat(t.offsetHeight),l=n.split(" "),u=0;u<S.length;u++)this.p.indexOf("border")&&(S[u]=Z(S[u])),-1!==(h=f=J(t,S[u],i,!1,"0px")).indexOf(" ")&&(h=(f=h.split(" "))[0],f=f[1]),p=c=l[u],d=parseFloat(h),y=h.substr((d+"").length),(x="="===p.charAt(1))?(g=parseInt(p.charAt(0)+"1",10),p=p.substr(2),g*=parseFloat(p),v=p.substr((g+"").length-(g<0?1:0))||""):(g=parseFloat(p),v=p.substr((g+"").length)),""===v&&(v=e[r]||y),v!==y&&(b=Q(t,"borderLeft",d,y),w=Q(t,"borderTop",d,y),"%"===v?(h=b/_*100+"%",f=w/m*100+"%"):"em"===v?(h=b/(T=Q(t,"borderLeft",1,"em"))+"em",f=w/T+"em"):(h=b+"px",f=w+"px"),x&&(p=parseFloat(h)+g+v,c=parseFloat(f)+g+v)),s=xt(P,S[u],h+" "+f,p+" "+c,!1,"0px",s);return s},prefix:!0,formatter:gt("0px 0px 0px 0px",!1,!0)}),Tt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,n,r,o,s){return xt(t.style,n,this.format(J(t,n,i,!1,"0px 0px")),this.format(e),!1,"0px",o)},prefix:!0,formatter:gt("0px 0px",!1,!0)}),Tt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,n,r,o,s){var a,l,u,c,f,h,p="background-position",g=i||K(t,null),_=this.format((g?d?g.getPropertyValue(p+"-x")+" "+g.getPropertyValue(p+"-y"):g.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),m=this.format(e);if(-1!==_.indexOf("%")!=(-1!==m.indexOf("%"))&&m.split(",").length<2&&(h=J(t,"backgroundImage").replace(C,""))&&"none"!==h){for(a=_.split(" "),l=m.split(" "),z.setAttribute("src",h),u=2;--u>-1;)(c=-1!==(_=a[u]).indexOf("%"))!==(-1!==l[u].indexOf("%"))&&(f=0===u?t.offsetWidth-z.width:t.offsetHeight-z.height,a[u]=c?parseFloat(_)/100*f+"px":parseFloat(_)/f*100+"%");_=a.join(" ")}return this.parseComplex(t.style,_,m,o,s)},formatter:st}),Tt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:st(-1===t.indexOf(" ")?t+" "+t:t)}}),Tt("perspective",{defaultValue:"0px",prefix:!0}),Tt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Tt("transformStyle",{prefix:!0}),Tt("backfaceVisibility",{prefix:!0}),Tt("userSelect",{prefix:!0}),Tt("margin",{parser:_t("marginTop,marginRight,marginBottom,marginLeft")}),Tt("padding",{parser:_t("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Tt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,n,r,o,s){var a,l,u;return d<9?(l=t.currentStyle,u=d<8?" ":",",a="rect("+l.clipTop+u+l.clipRight+u+l.clipBottom+u+l.clipLeft+")",e=this.format(e).split(",").join(u)):(a=this.format(J(t,this.p,i,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,o,s)}}),Tt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Tt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Tt("border",{defaultValue:"0px solid #000",parser:function(t,e,n,r,o,s){var a=J(t,"borderTopWidth",i,!1,"0px"),l=this.format(e).split(" "),u=l[0].replace(b,"");return"px"!==u&&(a=parseFloat(a)/Q(t,"borderTopWidth",1,u)+u),this.parseComplex(t.style,this.format(a+" "+J(t,"borderTopStyle",i,!1,"solid")+" "+J(t,"borderTopColor",i,!1,"#000")),l.join(" "),o,s)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(dt)||["#000"])[0]}}),Tt("borderWidth",{parser:_t("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Tt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,o){var s=t.style,a="cssFloat"in s?"cssFloat":"styleFloat";return new vt(s,a,0,0,r,-1,i,!1,0,s[a],e)}});var Ut=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(-1===n.indexOf("atrix(")&&-1===n.indexOf("radient(")&&-1===n.indexOf("oader(")?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(S,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),-1===n.indexOf("pacity")?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(w,"opacity="+r))};Tt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,n,r,o,s){var a=parseFloat(J(t,"opacity",i,!1,"1")),l=t.style,u="autoAlpha"===n;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),u&&1===a&&"hidden"===J(t,"visibility",i)&&0!==e&&(a=0),V?o=new vt(l,"opacity",a,e-a,o):((o=new vt(l,"opacity",100*a,100*(e-a),o)).xn1=u?1:0,l.zoom=1,o.type=2,o.b="alpha(opacity="+o.s+")",o.e="alpha(opacity="+(o.s+o.c)+")",o.data=t,o.plugin=s,o.setRatio=Ut),u&&((o=new vt(l,"visibility",0,0,o,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",r._overwriteProps.push(o.n),r._overwriteProps.push(n)),o}});var Vt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(O,"-$1").toLowerCase())):t.removeAttribute(e))},Gt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Vt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Tt("className",{parser:function(e,n,r,o,s,a,l){var u,c,f,h,p,d=e.getAttribute("class")||"",g=e.style.cssText;if((s=o._classNamePT=new vt(e,r,0,0,s,2)).setRatio=Gt,s.pr=-11,t=!0,s.b=d,c=et(e,i),f=e._gsClassPT){for(h={},p=f.data;p;)h[p.p]=1,p=p._next;f.setRatio(1)}return e._gsClassPT=s,s.e="="!==n.charAt(1)?n:d.replace(new RegExp("(?:\\s|^)"+n.substr(2)+"(?![\\w-])"),"")+("+"===n.charAt(0)?" "+n.substr(2):""),e.setAttribute("class",s.e),u=it(e,c,et(e),l,h),e.setAttribute("class",d),s.data=u.firstMPT,e.style.cssText=g,s=s.xfirst=o.parse(e,u.difs,s,a)}});var Ht=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,o,s=this.t.style,l=a.transform.parse;if("all"===this.e)s.cssText="",r=!0;else for(n=(e=this.e.split(" ").join("").split(",")).length;--n>-1;)i=e[n],a[i]&&(a[i].parse===l?r=!0:i="transformOrigin"===i?At:a[i].p),Vt(s,i);r&&(Vt(s,kt),(o=this.t._gsTransform)&&(o.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Tt("clearProps",{parser:function(e,i,n,r,o){return(o=new vt(e,n,0,0,o,2)).setRatio=Ht,o.e=i,o.pr=-10,o.data=r._tween,t=!0,o}}),l="bezier,throwProps,physicsProps,physics2D".split(","),bt=l.length;bt--;)St(l[bt]);(l=o.prototype)._firstPT=l._lastParsedTransform=l._transform=null,l._onInitTween=function(n,s,l,h){if(!n.nodeType)return!1;this._target=g=n,this._tween=l,this._vars=s,_=h,u=s.autoRound,t=!1,e=s.suffixMap||o.suffixMap,i=K(n,""),r=this._overwriteProps;var d,m,v,y,x,b,w,S,P,O=n.style;if(c&&""===O.zIndex&&("auto"!==(d=J(n,"zIndex",i))&&""!==d||this._addLazySet(O,"zIndex",0)),"string"==typeof s&&(y=O.cssText,d=et(n,i),O.cssText=y+";"+s,d=it(n,d,et(n)).difs,!V&&T.test(s)&&(d.opacity=parseFloat(RegExp.$1)),s=d,O.cssText=y),s.className?this._firstPT=m=a.className.parse(n,s.className,"className",this,null,null,s):this._firstPT=m=this.parse(n,s,null),this._transformType){for(P=3===this._transformType,kt?f&&(c=!0,""===O.zIndex&&("auto"!==(w=J(n,"zIndex",i))&&""!==w||this._addLazySet(O,"zIndex",0)),p&&this._addLazySet(O,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):O.zoom=1,v=m;v&&v._next;)v=v._next;S=new vt(n,"transform",0,0,null,2),this._linkCSSP(S,null,v),S.setRatio=kt?Wt:zt,S.data=this._transform||Yt(n,i,!0),S.tween=l,S.pr=-1,r.pop()}if(t){for(;m;){for(b=m._next,v=y;v&&v.pr>m.pr;)v=v._next;(m._prev=v?v._prev:x)?m._prev._next=m:y=m,(m._next=v)?v._prev=m:x=m,m=b}this._firstPT=y}return!0},l.parse=function(t,n,r,o){var s,l,c,f,h,p,d,m,v,y,x=t.style;for(s in n){if("function"==typeof(p=n[s])&&(p=p(_,g)),l=a[s])r=l.parse(t,p,s,this,r,o,n);else{if("--"===s.substr(0,2)){this._tween._propLookup[s]=this._addTween.call(this._tween,t.style,"setProperty",K(t).getPropertyValue(s)+"",p+"",s,!1,s);continue}h=J(t,s,i)+"",v="string"==typeof p,"color"===s||"fill"===s||"stroke"===s||-1!==s.indexOf("Color")||v&&P.test(p)?(v||(p=((p=ht(p)).length>3?"rgba(":"rgb(")+p.join(",")+")"),r=xt(x,s,h,p,!0,"transparent",r,0,o)):v&&D.test(p)?r=xt(x,s,h,p,!0,null,r,0,o):(d=(c=parseFloat(h))||0===c?h.substr((c+"").length):"",""!==h&&"auto"!==h||("width"===s||"height"===s?(c=ot(t,s,i),d="px"):"left"===s||"top"===s?(c=tt(t,s,i),d="px"):(c="opacity"!==s?0:1,d="")),(y=v&&"="===p.charAt(1))?(f=parseInt(p.charAt(0)+"1",10),p=p.substr(2),f*=parseFloat(p),m=p.replace(b,"")):(f=parseFloat(p),m=v?p.replace(b,""):""),""===m&&(m=s in e?e[s]:d),p=f||0===f?(y?f+c:f)+m:n[s],d!==m&&(""===m&&"lineHeight"!==s||(f||0===f)&&c&&(c=Q(t,s,c,d),"%"===m?(c/=Q(t,s,100,"%")/100,!0!==n.strictUnits&&(h=c+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?c/=Q(t,s,1,m):"px"!==m&&(f=Q(t,s,f,m),m="px"),y&&(f||0===f)&&(p=f+c+m))),y&&(f+=c),!c&&0!==c||!f&&0!==f?void 0!==x[s]&&(p||p+""!="NaN"&&null!=p)?(r=new vt(x,s,f||c||0,0,r,-1,s,!1,0,h,p)).xs0="none"!==p||"display"!==s&&-1===s.indexOf("Style")?p:h:H("invalid "+s+" tween value: "+n[s]):(r=new vt(x,s,c,f-c,r,0,s,!1!==u&&("px"===m||"zIndex"===s),0,h,p)).xs0=m)}o&&r&&!r.plugin&&(r.plugin=o)}return r},l.setRatio=function(t){var e,i,n,r=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(e=r.c*t+r.s,r.r?e=r.r(e):e<1e-6&&e>-1e-6&&(e=0),r.type)if(1===r.type)if(2===(n=r.l))r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(e=r.r(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},l._enableTransforms=function(t){this._transform=this._transform||Yt(this._target,i,!0),this._transformType=this._transform.svg&&Pt||!t&&3!==this._transformType?2:3};var qt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};l._addLazySet=function(t,e,i){var n=this._firstPT=new vt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=qt,n.data=this},l._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},l._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},l._kill=function(t){var e,i,r,o=t;if(t.autoAlpha||t.alpha){for(i in o={},t)o[i]=t[i];o.opacity=1,o.autoAlpha&&(o.visibility=1)}for(t.className&&(e=this._classNamePT)&&((r=e.xfirst)&&r._prev?this._linkCSSP(r._prev,e._next,r._prev._prev):r===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,r._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return n.e.prototype._kill.call(this,o)};var $t=function(t,e,i){var n,r,o,s;if(t.slice)for(r=t.length;--r>-1;)$t(t[r],e,i);else for(r=(n=t.childNodes).length;--r>-1;)s=(o=n[r]).type,o.style&&(e.push(et(o)),i&&i.push(o)),1!==s&&9!==s&&11!==s||!o.childNodes.length||$t(o,e,i)};return o.cascadeTo=function(t,e,i){var r,o,s,a,l=n.g.to(t,e,i),u=[l],c=[],f=[],h=[],p=n.g._internals.reservedProps;for(t=l._targets||l.target,$t(t,c,h),l.render(e,!0,!0),$t(t,f),l.render(0,!0,!0),l._enabled(!0),r=h.length;--r>-1;)if((o=it(h[r],c[r],f[r])).firstMPT){for(s in o=o.difs,i)p[s]&&(o[s]=i[s]);for(s in a={},o)a[s]=c[r][s];u.push(n.g.fromTo(h[r],e,a,o))}return u},n.e.activate([o]),o},!0);var o=n.h.CSSPlugin,s=n.f._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,n){var r,o;if("function"!=typeof t.setAttribute)return!1;for(r in e)"function"==typeof(o=e[r])&&(o=o(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",o+"",r,!1,r),this._overwriteProps.push(r);return!0}}),a=n.f._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),l=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(i){return(Math.round(i/t)*t*e|0)/e}},u=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},c=a.prototype;
/*!
 * VERSION: 0.6.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */c._onInitAllProps=function(){var t,e,i,n,r=this._tween,o=r.vars.roundProps,s={},a=r._propLookup.roundProps;if("object"!=typeof o||o.push)for("string"==typeof o&&(o=o.split(",")),i=o.length;--i>-1;)s[o[i]]=Math.round;else for(n in o)s[n]=l(o[n]);for(n in s)for(t=r._firstPT;t;)e=t._next,t.pg?t.t._mod(s):t.n===n&&(2===t.f&&t.t?u(t.t._firstPT,s[n]):(this._add(t.t,n,t.s,t.c,s[n]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:r._firstPT===t&&(r._firstPT=e),t._next=t._prev=null,r._propLookup[n]=a)),t=e;return!1},c._add=function(t,e,i,n,r){this._addTween(t,e,i,i+n,e,r||Math.round),this._overwriteProps.push(e)};
/*!
 * VERSION: 0.3.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var f=n.f._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,o,s,a,l,u,c=!0===e.useRadians?2*Math.PI:360;for(r in e)"useRadians"!==r&&("function"==typeof(a=e[r])&&(a=a(n,t)),o=(u=(a+"").split("_"))[0],s=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),l=(a=this.finals[r]="string"==typeof o&&"="===o.charAt(1)?s+parseInt(o.charAt(0)+"1",10)*Number(o.substr(2)):Number(o)||0)-s,u.length&&(-1!==(o=u.join("_")).indexOf("short")&&(l%=c)!==l%(c/2)&&(l=l<0?l+c:l-c),-1!==o.indexOf("_cw")&&l<0?l=(l+9999999999*c)%c-(l/c|0)*c:-1!==o.indexOf("ccw")&&l>0&&(l=(l-9999999999*c)%c-(l/c|0)*c)),(l>1e-6||l<-1e-6)&&(this._addTween(t,r,s,s+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}});f._autoCSS=!0,
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
n.f._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(){var t=function(t){n.d.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var e,i,r=this.vars;for(i in r)e=r[i],o(e)&&-1!==e.join("").indexOf("{self}")&&(r[i]=this._swapSelfInParams(e));o(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},e=n.g._internals,i=t._internals={},r=e.isSelector,o=e.isArray,s=e.lazyTweens,a=e.lazyRender,l=n.f._gsDefine.globals,u=function(t){var e,i={};for(e in t)i[e]=t[e];return i},c=function(t,e,i){var n,r,o=t.cycle;for(n in o)r=o[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},f=i.pauseCallback=function(){},h=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},p=t.prototype=new n.d;return t.version="2.0.2",p.constructor=t,p.kill()._gc=p._forcingPlayhead=p._hasPause=!1,p.to=function(t,e,i,r){var o=i.repeat&&l.TweenMax||n.g;return e?this.add(new o(t,e,i),r):this.set(t,i,r)},p.from=function(t,e,i,r){return this.add((i.repeat&&l.TweenMax||n.g).from(t,e,i),r)},p.fromTo=function(t,e,i,r,o){var s=r.repeat&&l.TweenMax||n.g;return e?this.add(s.fromTo(t,e,i,r),o):this.set(t,r,o)},p.staggerTo=function(e,i,o,s,a,l,f,p){var d,g,_=new t({onComplete:l,onCompleteParams:f,callbackScope:p,smoothChildTiming:this.smoothChildTiming}),m=o.cycle;for("string"==typeof e&&(e=n.g.selector(e)||e),r(e=e||[])&&(e=h(e)),(s=s||0)<0&&((e=h(e)).reverse(),s*=-1),g=0;g<e.length;g++)(d=u(o)).startAt&&(d.startAt=u(d.startAt),d.startAt.cycle&&c(d.startAt,e,g)),m&&(c(d,e,g),null!=d.duration&&(i=d.duration,delete d.duration)),_.to(e[g],i,d,g*s);return this.add(_,a)},p.staggerFrom=function(t,e,i,n,r,o,s,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,o,s,a)},p.staggerFromTo=function(t,e,i,n,r,o,s,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,o,s,a,l)},p.call=function(t,e,i,r){return this.add(n.g.delayedCall(0,t,e,i),r)},p.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new n.g(t,0,e),i)},t.exportRoot=function(e,i){null==(e=e||{}).smoothChildTiming&&(e.smoothChildTiming=!0);var r,o,s,a,l=new t(e),u=l._timeline;for(null==i&&(i=!0),u._remove(l,!0),l._startTime=0,l._rawPrevTime=l._time=l._totalTime=u._time,s=u._first;s;)a=s._next,i&&s instanceof n.g&&s.target===s.vars.onComplete||((o=s._startTime-s._delay)<0&&(r=1),l.add(s,o)),s=a;return u.add(l,0),r&&l.totalDuration(),l},p.add=function(e,i,r,s){var a,l,u,c,f,h;if("number"!=typeof i&&(i=this._parseTimeOrLabel(i,0,!0,e)),!(e instanceof n.a)){if(e instanceof Array||e&&e.push&&o(e)){for(r=r||"normal",s=s||0,a=i,l=e.length,u=0;u<l;u++)o(c=e[u])&&(c=new t({tweens:c})),this.add(c,a),"string"!=typeof c&&"function"!=typeof c&&("sequence"===r?a=c._startTime+c.totalDuration()/c._timeScale:"start"===r&&(c._startTime-=c.delay())),a+=s;return this._uncache(!0)}if("string"==typeof e)return this.addLabel(e,i);if("function"!=typeof e)throw"Cannot add "+e+" into the timeline; it is not a tween, timeline, function, or string.";e=n.g.delayedCall(0,e)}if(n.d.prototype.add.call(this,e,i),e._time&&(a=Math.max(0,Math.min(e.totalDuration(),(this.rawTime()-e._startTime)*e._timeScale)),Math.abs(a-e._totalTime)>1e-5&&e.render(a,!1,!1)),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(h=(f=this).rawTime()>e._startTime;f._timeline;)h&&f._timeline.smoothChildTiming?f.totalTime(f._totalTime,!0):f._gc&&f._enabled(!0,!1),f=f._timeline;return this},p.remove=function(t){if(t instanceof n.a){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?n.a._rootFramesTimeline:n.a._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&o(t)){for(var i=t.length;--i>-1;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},p._remove=function(t,e){return n.d.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},p.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},p.insert=p.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},p.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},p.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},p.addPause=function(t,e,i,r){var o=n.g.delayedCall(0,f,i,r||this);return o.vars.onComplete=o.vars.onReverseComplete=e,o.data="isPause",this._hasPause=!0,this.add(o,t)},p.removeLabel=function(t){return delete this._labels[t],this},p.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},p._parseTimeOrLabel=function(t,e,i,r){var s,a;if(r instanceof n.a&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&o(r)))for(a=r.length;--a>-1;)r[a]instanceof n.a&&r[a].timeline===this&&this.remove(r[a]);if(s="number"!=typeof t||e?this.duration()>99999999999?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-s:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=s);else{if(-1===(a=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=s+e:e:this._labels[t]+e;e=parseInt(t.charAt(a-1)+"1",10)*Number(t.substr(a+1)),t=a>1?this._parseTimeOrLabel(t.substr(0,a-1),0,i):s}return Number(t)+e},p.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},p.stop=function(){return this.paused(!0)},p.gotoAndPlay=function(t,e){return this.play(t,e)},p.gotoAndStop=function(t,e){return this.pause(t,e)},p.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,o,l,u,c,f,h=this._time,p=this._dirty?this.totalDuration():this._totalDuration,d=this._startTime,g=this._timeScale,_=this._paused;if(h!==this._time&&(t+=this._time-h),t>=p-1e-7&&t>=0)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,l="onComplete",u=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||1e-10===this._rawPrevTime)&&this._rawPrevTime!==t&&this._first&&(u=!0,this._rawPrevTime>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==h||0===this._duration&&1e-10!==this._rawPrevTime&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(l="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(u=r=!0,l="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(u=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(u=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=h)for(n=this._first;n&&n._startTime<=t&&!c;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(c=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!c;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(c=n),n=n._prev;c&&(this._time=t=c._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==h&&this._first||i||u||c){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==h&&t>0&&(this._active=!0),0===h&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),(f=this._time)>=h)for(n=this._first;n&&(o=n._next,f===this._time&&(!this._paused||_));)(n._active||n._startTime<=f&&!n._paused&&!n._gc)&&(c===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,f===this._time&&(!this._paused||_));){if(n._active||n._startTime<=h&&!n._paused&&!n._gc){if(c===n){for(c=n._prev;c&&c.endTime()>this._time;)c.render(c._reversed?c.totalDuration()-(t-c._startTime)*c._timeScale:(t-c._startTime)*c._timeScale,e,i),c=c._prev;c=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=o}this._onUpdate&&(e||(s.length&&a(),this._callback("onUpdate"))),l&&(this._gc||d!==this._startTime&&g===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(s.length&&a(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}},p._hasPausedChild=function(){for(var e=this._first;e;){if(e._paused||e instanceof t&&e._hasPausedChild())return!0;e=e._next}return!1},p.getChildren=function(t,e,i,r){r=r||-9999999999;for(var o=[],s=this._first,a=0;s;)s._startTime<r||(s instanceof n.g?!1!==e&&(o[a++]=s):(!1!==i&&(o[a++]=s),!1!==t&&(a=(o=o.concat(s.getChildren(!0,e,i))).length))),s=s._next;return o},p.getTweensOf=function(t,e){var i,r,o=this._gc,s=[],a=0;for(o&&this._enabled(!0,!0),r=(i=n.g.getTweensOf(t)).length;--r>-1;)(i[r].timeline===this||e&&this._contains(i[r]))&&(s[a++]=i[r]);return o&&this._enabled(!1,!0),s},p.recent=function(){return this._recent},p._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},p.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,o=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in o)o[n]>=i&&(o[n]+=t);return this._uncache(!0)},p._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},p.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},p.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return n.a.prototype.invalidate.call(this)},p._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return n.d.prototype._enabled.call(this,t,e)},p.totalTime=function(t,e,i){this._forcingPlayhead=!0;var r=n.a.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},p.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},p.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,o=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>o&&this._sortChildren&&!r._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(r,r._startTime-r._delay),this._calculatingDuration=0):o=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale,this._time-=r._startTime,this._totalTime-=r._startTime,this._rawPrevTime-=r._startTime),this.shiftChildren(-r._startTime,!1,-9999999999),o=0),(i=r._startTime+r._totalDuration/r._timeScale)>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},p.paused=function(t){if(!t)for(var e=this._first,i=this._time;e;)e._startTime===i&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return n.a.prototype.paused.apply(this,arguments)},p.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===n.a._rootFramesTimeline},p.rawTime=function(t){return t&&(this._paused||this._repeat&&this.time()>0&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},t},!0);var h=n.h.TimelineLite;
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */n.f._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(){var t=function(t){h.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},e=n.g._internals,i=e.lazyTweens,r=e.lazyRender,o=n.f._gsDefine.globals,s=new n.b(null,null,1,0),a=t.prototype=new h;return a.constructor=t,a.kill()._gc=!1,t.version="2.0.2",a.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),h.prototype.invalidate.call(this)},a.addCallback=function(t,e,i,r){return this.add(n.g.delayedCall(0,t,i,r),e)},a.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},a.removePause=function(t){return this.removeCallback(h._internals.pauseCallback,t)},a.tweenTo=function(t,e){e=e||{};var i,r,a,l={ease:s,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},u=e.repeat&&o.TweenMax||n.g;for(r in e)l[r]=e[r];return l.time=this._parseTimeOrLabel(t),i=Math.abs(Number(l.time)-this._time)/this._timeScale||.001,a=new u(this,i,l),l.onStart=function(){a.target.paused(!0),a.vars.time===a.target.time()||i!==a.duration()||a.isFromTo||a.duration(Math.abs(a.vars.time-a.target.time())/a.target._timeScale).render(a.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||a,e.onStartParams||[])},a},a.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var n=this.tweenTo(e,i);return n.isFromTo=1,n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},a.render=function(t,e,n){this._gc&&this._enabled(!0,!1);var o,s,a,l,u,c,f,h,p=this._time,d=this._dirty?this.totalDuration():this._totalDuration,g=this._duration,_=this._totalTime,m=this._startTime,v=this._timeScale,y=this._rawPrevTime,x=this._paused,b=this._cycle;if(p!==this._time&&(t+=this._time-p),t>=d-1e-7&&t>=0)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(s=!0,l="onComplete",u=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||y<0||1e-10===y)&&y!==t&&this._first&&(u=!0,y>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:(this._time=g,t=g+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==p||0===g&&1e-10!==y&&(y>0||t<0&&y>=0)&&!this._locked)&&(l="onReverseComplete",s=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(u=s=!0,l="onReverseComplete"):y>=0&&this._first&&(u=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=g||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&s)for(o=this._first;o&&0===o._startTime;)o._duration||(s=!1),o=o._next;t=0,this._initted||(u=!0)}else if(0===g&&y<0&&(u=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=g+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&_<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!=(1&this._cycle)&&(this._time=g-this._time),this._time>g?(this._time=g,t=g+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if((t=this._time)>=p||this._repeat&&b!==this._cycle)for(o=this._first;o&&o._startTime<=t&&!f;)o._duration||"isPause"!==o.data||o.ratio||0===o._startTime&&0===this._rawPrevTime||(f=o),o=o._next;else for(o=this._last;o&&o._startTime>=t&&!f;)o._duration||"isPause"===o.data&&o._rawPrevTime>0&&(f=o),o=o._prev;f&&f._startTime<g&&(this._time=t=f._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var w=this._yoyo&&0!=(1&b),T=w===(this._yoyo&&0!=(1&this._cycle)),S=this._totalTime,P=this._cycle,O=this._rawPrevTime,k=this._time;if(this._totalTime=b*g,this._cycle<b?w=!w:this._totalTime+=g,this._time=p,this._rawPrevTime=0===g?y-1e-4:y,this._cycle=b,this._locked=!0,p=w?0:g,this.render(p,e,0===g),e||this._gc||this.vars.onRepeat&&(this._cycle=P,this._locked=!1,this._callback("onRepeat")),p!==this._time)return;if(T&&(this._cycle=b,this._locked=!0,p=w?g+1e-4:-1e-4,this.render(p,!0,!1)),this._locked=!1,this._paused&&!x)return;this._time=k,this._totalTime=S,this._cycle=P,this._rawPrevTime=O}if(this._time!==p&&this._first||n||u||f){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==_&&t>0&&(this._active=!0),0===_&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),(h=this._time)>=p)for(o=this._first;o&&(a=o._next,h===this._time&&(!this._paused||x));)(o._active||o._startTime<=this._time&&!o._paused&&!o._gc)&&(f===o&&this.pause(),o._reversed?o.render((o._dirty?o.totalDuration():o._totalDuration)-(t-o._startTime)*o._timeScale,e,n):o.render((t-o._startTime)*o._timeScale,e,n)),o=a;else for(o=this._last;o&&(a=o._prev,h===this._time&&(!this._paused||x));){if(o._active||o._startTime<=p&&!o._paused&&!o._gc){if(f===o){for(f=o._prev;f&&f.endTime()>this._time;)f.render(f._reversed?f.totalDuration()-(t-f._startTime)*f._timeScale:(t-f._startTime)*f._timeScale,e,n),f=f._prev;f=null,this.pause()}o._reversed?o.render((o._dirty?o.totalDuration():o._totalDuration)-(t-o._startTime)*o._timeScale,e,n):o.render((t-o._startTime)*o._timeScale,e,n)}o=a}this._onUpdate&&(e||(i.length&&r(),this._callback("onUpdate"))),l&&(this._locked||this._gc||m!==this._startTime&&v===this._timeScale||(0===this._time||d>=this.totalDuration())&&(s&&(i.length&&r(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}else _!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},a.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,o=[],s=this.getChildren(t,e,i),a=0,l=s.length;for(n=0;n<l;n++)(r=s[n]).isActive()&&(o[a++]=r);return o},a.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},a.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},a.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},a.invalidate=function(){return this._locked=!1,h.prototype.invalidate.call(this)},a.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},a.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},a.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(h.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},a.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},a.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},a.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},a.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},t},!0);var p=n.h.TimelineMax,d=180/Math.PI,g=[],_=[],m=[],v={},y=n.f._gsDefine.globals,x=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},b=function(t,e,i,n){var r={a:t},o={},s={},a={c:n},l=(t+e)/2,u=(e+i)/2,c=(i+n)/2,f=(l+u)/2,h=(u+c)/2,p=(h-f)/8;return r.b=l+(t-l)/4,o.b=f+p,r.c=o.a=(r.b+o.b)/2,o.c=s.a=(f+h)/2,s.b=h-p,a.b=c+(n-c)/4,s.c=a.a=(s.b+a.b)/2,[r,o,s,a]},w=function(t,e,i,n,r){var o,s,a,l,u,c,f,h,p,d,v,y,x,w=t.length-1,T=0,S=t[0].a;for(o=0;o<w;o++)s=(u=t[T]).a,a=u.d,l=t[T+1].d,r?(v=g[o],x=((y=_[o])+v)*e*.25/(n?.5:m[o]||.5),h=a-((c=a-(a-s)*(n?.5*e:0!==v?x/v:0))+(((f=a+(l-a)*(n?.5*e:0!==y?x/y:0))-c)*(3*v/(v+y)+.5)/4||0))):h=a-((c=a-(a-s)*e*.5)+(f=a+(l-a)*e*.5))/2,c+=h,f+=h,u.c=p=c,u.b=0!==o?S:S=u.a+.6*(u.c-u.a),u.da=a-s,u.ca=p-s,u.ba=S-s,i?(d=b(s,S,p,a),t.splice(T,1,d[0],d[1],d[2],d[3]),T+=4):T++,S=f;(u=t[T]).b=S,u.c=S+.4*(u.d-S),u.da=u.d-u.a,u.ca=u.c-u.a,u.ba=S-u.a,i&&(d=b(u.a,S,u.c,u.d),t.splice(T,1,d[0],d[1],d[2],d[3]))},T=function(t,e,i,n){var r,o,s,a,l,u,c=[];if(n)for(o=(t=[n].concat(t)).length;--o>-1;)"string"==typeof(u=t[o][e])&&"="===u.charAt(1)&&(t[o][e]=n[e]+Number(u.charAt(0)+u.substr(2)));if((r=t.length-2)<0)return c[0]=new x(t[0][e],0,0,t[0][e]),c;for(o=0;o<r;o++)s=t[o][e],a=t[o+1][e],c[o]=new x(s,0,0,a),i&&(l=t[o+2][e],g[o]=(g[o]||0)+(a-s)*(a-s),_[o]=(_[o]||0)+(l-a)*(l-a));return c[o]=new x(t[o][e],0,0,t[o+1][e]),c},S=function(t,e,i,n,r,o){var s,a,l,u,c,f,h,p,d={},y=[],x=o||t[0];for(a in r="string"==typeof r?","+r+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])y.push(a);if(t.length>1){for(p=t[t.length-1],h=!0,s=y.length;--s>-1;)if(a=y[s],Math.abs(x[a]-p[a])>.05){h=!1;break}h&&(t=t.concat(),o&&t.unshift(o),t.push(t[1]),o=t[t.length-3])}for(g.length=_.length=m.length=0,s=y.length;--s>-1;)a=y[s],v[a]=-1!==r.indexOf(","+a+","),d[a]=T(t,a,v[a],o);for(s=g.length;--s>-1;)g[s]=Math.sqrt(g[s]),_[s]=Math.sqrt(_[s]);if(!n){for(s=y.length;--s>-1;)if(v[a])for(f=(l=d[y[s]]).length-1,u=0;u<f;u++)c=l[u+1].da/_[u]+l[u].da/g[u]||0,m[u]=(m[u]||0)+c*c;for(s=m.length;--s>-1;)m[s]=Math.sqrt(m[s])}for(s=y.length,u=i?4:1;--s>-1;)l=d[a=y[s]],w(l,e,i,n,v[a]),h&&(l.splice(0,u),l.splice(l.length-u,u));return d},P=function(t,e,i){for(var n,r,o,s,a,l,u,c,f,h,p,d=1/i,g=t.length;--g>-1;)for(o=(h=t[g]).a,s=h.d-o,a=h.c-o,l=h.b-o,n=r=0,c=1;c<=i;c++)n=r-(r=((u=d*c)*u*s+3*(f=1-u)*(u*a+f*l))*u),e[p=g*i+c-1]=(e[p]||0)+n*n},O=n.f._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,o,s,a,l=e.values||[],u={},c=l[0],f=e.autoRotate||i.vars.orientToBezier;for(n in this._autoRotate=f?f instanceof Array?f:[["x","y","rotation",!0===f?0:Number(f)||0]]:null,c)this._props.push(n);for(o=this._props.length;--o>-1;)n=this._props[o],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],u[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||u[n]!==l[0][n]&&(a=u);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?S(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):function(t,e,i){var n,r,o,s,a,l,u,c,f,h,p,d={},g="cubic"===(e=e||"soft")?3:2,_="soft"===e,m=[];if(_&&i&&(t=[i].concat(t)),null==t||t.length<g+1)throw"invalid Bezier data";for(f in t[0])m.push(f);for(l=m.length;--l>-1;){for(d[f=m[l]]=a=[],h=0,c=t.length,u=0;u<c;u++)n=null==i?t[u][f]:"string"==typeof(p=t[u][f])&&"="===p.charAt(1)?i[f]+Number(p.charAt(0)+p.substr(2)):Number(p),_&&u>1&&u<c-1&&(a[h++]=(n+a[h-2])/2),a[h++]=n;for(c=h-g+1,h=0,u=0;u<c;u+=g)n=a[u],r=a[u+1],o=a[u+2],s=2===g?0:a[u+3],a[h++]=p=3===g?new x(n,r,o,s):new x(n,(2*r+n)/3,(2*r+o)/3,o);a.length=h}return d}(l,e.type,u),this._segCount=this._beziers[n].length,this._timeRes){var h=function(t,e){var i,n,r,o,s=[],a=[],l=0,u=0,c=(e=e>>0||6)-1,f=[],h=[];for(i in t)P(t[i],s,e);for(r=s.length,n=0;n<r;n++)l+=Math.sqrt(s[n]),h[o=n%e]=l,o===c&&(u+=l,f[o=n/e>>0]=h,a[o]=u,l=0,h=[]);return{length:u,lengths:a,segments:f}}(this._beziers,this._timeRes);this._length=h.length,this._lengths=h.lengths,this._segments=h.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(f=this._autoRotate)for(this._initialRotations=[],f[0]instanceof Array||(this._autoRotate=f=[f]),o=f.length;--o>-1;){for(s=0;s<3;s++)n=f[o][s],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=f[o][2],this._initialRotations[o]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,n,r,o,s,a,l,u,c,f=this._segCount,h=this._func,p=this._target,g=t!==this._startRatio;if(this._timeRes){if(u=this._lengths,c=this._curSeg,t*=this._length,n=this._li,t>this._l2&&n<f-1){for(l=f-1;n<l&&(this._l2=u[++n])<=t;);this._l1=u[n-1],this._li=n,this._curSeg=c=this._segments[n],this._s2=c[this._s1=this._si=0]}else if(t<this._l1&&n>0){for(;n>0&&(this._l1=u[--n])>=t;);0===n&&t<this._l1?this._l1=0:n++,this._l2=u[n],this._li=n,this._curSeg=c=this._segments[n],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(e=n,t-=this._l1,n=this._si,t>this._s2&&n<c.length-1){for(l=c.length-1;n<l&&(this._s2=c[++n])<=t;);this._s1=c[n-1],this._si=n}else if(t<this._s1&&n>0){for(;n>0&&(this._s1=c[--n])>=t;);0===n&&t<this._s1?this._s1=0:n++,this._s2=c[n],this._si=n}s=(n+(t-this._s1)/(this._s2-this._s1))*this._prec||0}else s=(t-(e=t<0?0:t>=1?f-1:f*t>>0)*(1/f))*f;for(i=1-s,n=this._props.length;--n>-1;)r=this._props[n],a=(s*s*(o=this._beziers[r][e]).da+3*i*(s*o.ca+i*o.ba))*s+o.a,this._mod[r]&&(a=this._mod[r](a,p)),h[r]?p[r](a):p[r]=a;if(this._autoRotate){var _,m,v,y,x,b,w,T=this._autoRotate;for(n=T.length;--n>-1;)r=T[n][2],b=T[n][3]||0,w=!0===T[n][4]?1:d,o=this._beziers[T[n][0]],_=this._beziers[T[n][1]],o&&_&&(o=o[e],_=_[e],m=o.a+(o.b-o.a)*s,m+=((y=o.b+(o.c-o.b)*s)-m)*s,y+=(o.c+(o.d-o.c)*s-y)*s,v=_.a+(_.b-_.a)*s,v+=((x=_.b+(_.c-_.b)*s)-v)*s,x+=(_.c+(_.d-_.c)*s-x)*s,a=g?Math.atan2(x-v,y-m)*w+b:this._initialRotations[n],this._mod[r]&&(a=this._mod[r](a,p)),h[r]?p[r](a):p[r]=a)}}}),k=O.prototype;
/*!
 * VERSION: 1.3.8
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/O.bezierThrough=S,O.cubicToQuadratic=b,O._autoCSS=!0,O.quadraticToCubic=function(t,e,i){return new x(t,(2*e+t)/3,(2*e+i)/3,i)},O._cssRegister=function(){var t=y.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,o,s,a,l){e instanceof Array&&(e={values:e}),l=new O;var u,c,f,h=e.values,p=h.length-1,d=[],g={};if(p<0)return a;for(u=0;u<=p;u++)f=i(t,h[u],s,a,l,p!==u),d[u]=f.end;for(c in e)g[c]=e[c];return g.values=d,(a=new r(t,"bezier",0,0,f.pt,2)).data=f,a.plugin=l,a.setRatio=n,0===g.autoRotate&&(g.autoRotate=!0),!g.autoRotate||g.autoRotate instanceof Array||(u=!0===g.autoRotate?0:Number(g.autoRotate),g.autoRotate=null!=f.end.left?[["left","top","rotation",u,!1]]:null!=f.end.x&&[["x","y","rotation",u,!1]]),g.autoRotate&&(s._transform||s._enableTransforms(!1),f.autoRotate=s._target._gsTransform,f.proxy.rotation=f.autoRotate.rotation||0,s._overwriteProps.push("rotation")),l._onInitTween(f.proxy,g,s._tween),a}})}},k._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)(e=t[i[n]])&&"function"==typeof e&&(this._mod[i[n]]=e)},k._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)},
/*!
 * VERSION: 1.16.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
n.f._gsDefine("easing.Back",["easing.Ease"],function(){var t,e,i,r,o=n.f.GreenSockGlobals||n.f,s=o.com.greensock,a=2*Math.PI,l=Math.PI/2,u=s._class,c=function(t,e){var i=u("easing."+t,function(){},!0),r=i.prototype=new n.b;return r.constructor=i,r.getRatio=e,i},f=n.b.register||function(){},h=function(t,e,i,n,r){var o=u("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return f(o,t),o},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(t,e){var i=u("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=i.prototype=new n.b;return r.constructor=i,r.getRatio=e,r.config=function(t){return new i(t)},i},g=h("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),_=u("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),m=_.prototype=new n.b;return m.constructor=_,m.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},_.ease=new _(.7,.7),m.config=_.config=function(t,e,i){return new _(t,e,i)},(m=(t=u("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new n.b).constructor=t,m.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},m.config=t.config=function(e,i){return new t(e,i)},(m=(e=u("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new n.b).constructor=e,m.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},m.config=e.config=function(t,i,n){return new e(t,i,n)},(m=(i=u("easing.RoughEase",function(t){for(var e,i,r,o,s,a,l=(t=t||{}).taper||"none",u=[],c=0,f=0|(t.points||20),h=f,d=!1!==t.randomize,g=!0===t.clamp,_=t.template instanceof n.b?t.template:null,m="number"==typeof t.strength?.4*t.strength:.4;--h>-1;)e=d?Math.random():1/f*h,i=_?_.getRatio(e):e,r="none"===l?m:"out"===l?(o=1-e)*o*m:"in"===l?e*e*m:e<.5?(o=2*e)*o*.5*m:(o=2*(1-e))*o*.5*m,d?i+=Math.random()*r-.5*r:h%2?i+=.5*r:i-=.5*r,g&&(i>1?i=1:i<0&&(i=0)),u[c++]={x:e,y:i};for(u.sort(function(t,e){return t.x-e.x}),a=new p(1,1,null),h=f;--h>-1;)s=u[h],a=new p(s.x,s.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)},!0)).prototype=new n.b).constructor=i,m.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},m.config=function(t){return new i(t)},i.ease=new i,h("Bounce",c("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),c("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),c("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),h("Circ",c("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),c("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),c("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),h("Elastic",(r=function(t,e,i){var r=u("easing."+t,function(t,e){this._p1=t>=1?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),o=r.prototype=new n.b;return o.constructor=r,o.getRatio=e,o.config=function(t,e){return new r(t,e)},r})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),r("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),h("Expo",c("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),c("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),c("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),h("Sine",c("SineOut",function(t){return Math.sin(t*l)}),c("SineIn",function(t){return 1-Math.cos(t*l)}),c("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),u("easing.EaseLookup",{find:function(t){return n.b.map[t]}},!0),f(o.SlowMo,"SlowMo","ease,"),f(i,"RoughEase","ease,"),f(t,"SteppedEase","ease,"),g},!0);var C=n.h.Back,A=n.h.Elastic,M=n.h.Bounce,E=n.h.RoughEase,R=n.h.SlowMo,L=n.h.SteppedEase,D=n.h.Circ,F=n.h.Expo,N=n.h.Sine,I=n.h.ExpoScaleEase,B=r;B._autoActivated=[h,p,o,s,O,a,f,C,A,M,E,R,L,D,F,N,I],
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 **/
/*!
 * VERSION: 0.16.5
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * Requires TweenLite and CSSPlugin version 1.17.0 or later (TweenMax contains both TweenLite and CSSPlugin). ThrowPropsPlugin is required for momentum-based continuation of movement after the mouse/touch is released (ThrowPropsPlugin is a membership benefit of Club GreenSock - http://greensock.com/club/).
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
n.f._gsDefine("utils.Draggable",["events.EventDispatcher","TweenLite","plugins.CSSPlugin"],function(){var t,e,i,r,s,a,l,u={css:{},data:"_draggable"},c={css:{},data:"_draggable"},f={css:{},data:"_draggable"},h={css:{}},p=n.f._gsDefine.globals,d={},g=function(){return!1},_={style:{},appendChild:g,removeChild:g},m=n.f.document||{createElement:function(){return _}},v=m.documentElement||{},y=function(t){return m.createElementNS?m.createElementNS("http://www.w3.org/1999/xhtml",t):m.createElement(t)},x=y("div"),b=[],w=180/Math.PI,T=999999999999999,S=Date.now||function(){return(new Date).getTime()},P=!(m.addEventListener||!m.all),O=m.createElement("div"),k=[],C={},A=0,M=/^(?:a|input|textarea|button|select)$/i,E=0,R=n.f.navigator&&-1!==n.f.navigator.userAgent.toLowerCase().indexOf("android"),L=0,D={},F={},N=function(t,e){var i,n={};if(e)for(i in t)n[i]=t[i]*e;else for(i in t)n[i]=t[i];return n},I=function(){for(var t=k.length;--t>-1;)k[t]()},B=function(t){for(var e=k.length;--e>-1;)k[e]===t&&k.splice(e,1);n.g.to(j,0,{overwrite:"all",delay:15,onComplete:j,data:"_draggable"})},j=function(){k.length||n.g.ticker.removeEventListener("tick",I)},X=function(){return null!=window.pageYOffset?window.pageYOffset:null!=m.scrollTop?m.scrollTop:v.scrollTop||m.body.scrollTop||0},Y=function(){return null!=window.pageXOffset?window.pageXOffset:null!=m.scrollLeft?m.scrollLeft:v.scrollLeft||m.body.scrollLeft||0},z=function(t,e){kt(t,"scroll",e),U(t.parentNode)||z(t.parentNode,e)},W=function(t,e){Ct(t,"scroll",e),U(t.parentNode)||W(t.parentNode,e)},U=function(t){return!(t&&t!==v&&t!==m&&t!==m.body&&t!==window&&t.nodeType&&t.parentNode)},V=function(t,e){var i="x"===e?"Width":"Height",n="scroll"+i,r="client"+i,o=m.body;return Math.max(0,U(t)?Math.max(v[n],o[n])-(window["inner"+i]||v[r]||o[r]):t[n]-t[r])},G=function(t){var e=U(t),i=V(t,"x"),n=V(t,"y");e?t=F:G(t.parentNode),t._gsMaxScrollX=i,t._gsMaxScrollY=n,t._gsScrollX=t.scrollLeft||0,t._gsScrollY=t.scrollTop||0},H=function(t,e){return t=t||window.event,d.pageX=t.clientX+m.body.scrollLeft+v.scrollLeft,d.pageY=t.clientY+m.body.scrollTop+v.scrollTop,e&&(t.returnValue=!1),d},q=function(t){return t?("string"==typeof t&&(t=n.g.selector(t)),t.length&&t!==window&&t[0]&&t[0].style&&!t.nodeType&&(t=t[0]),t===window||t.nodeType&&t.style?t:null):t},$=function(t,e){var i,n,r,o=t.style;if(void 0===o[e]){for(r=["O","Moz","ms","Ms","Webkit"],n=5,i=e.charAt(0).toUpperCase()+e.substr(1);--n>-1&&void 0===o[r[n]+i];);if(n<0)return"";e=(3===n?"ms":r[n])+i}return e},Z=function(t,e,i){var n=t.style;n&&(void 0===n[e]&&(e=$(t,e)),null==i?n.removeProperty?n.removeProperty(e.replace(/([A-Z])/g,"-$1").toLowerCase()):n.removeAttribute(e):void 0!==n[e]&&(n[e]=i))},K=("undefined"!=typeof window?window:m.defaultView||{getComputedStyle:function(){}}).getComputedStyle,J=function(t,e){return K(t instanceof Element?t:t.host||(t.parentNode||{}).host||t,e)},Q=/(?:Left|Right|Width)/i,tt=/(?:\d|\-|\+|=|#|\.)*/g,et=function(t,e,i,n,r){if("px"===n||!n)return i;if("auto"===n||!i)return 0;var o,s=Q.test(e),a=t,l=x.style,u=i<0;return u&&(i=-i),"%"===n&&-1!==e.indexOf("border")?o=i/100*(s?t.clientWidth:t.clientHeight):(l.cssText="border:0 solid red;position:"+it(t,"position",!0)+";line-height:0;","%"!==n&&a.appendChild?l[s?"borderLeftWidth":"borderTopWidth"]=i+n:(a=t.parentNode||m.body,l[s?"width":"height"]=i+n),a.appendChild(x),o=parseFloat(x[s?"offsetWidth":"offsetHeight"]),a.removeChild(x),0!==o||r||(o=et(t,e,i,n,!0))),u?-o:o},it=function(t,e,i){var n,r=(t._gsTransform||{})[e];return r||0===r?r:(t.style&&t.style[e]?r=t.style[e]:(n=J(t))?r=(r=n.getPropertyValue(e.replace(/([A-Z])/g,"-$1").toLowerCase()))||n.length?r:n[e]:t.currentStyle&&(r=t.currentStyle[e]),"auto"!==r||"top"!==e&&"left"!==e||(r=function(t,e){if("absolute"!==it(t,"position",!0))return 0;var i="left"===e?"Left":"Top",n=it(t,"margin"+i,!0);return t["offset"+i]-(et(t,e,parseFloat(n),(n+"").replace(tt,""))||0)}(t,e)),i?r:parseFloat(r)||0)},nt=function(t,e,i){var n=t.vars,r=n[i],o=t._listeners[e];"function"==typeof r&&r.apply(n[i+"Scope"]||n.callbackScope||t,n[i+"Params"]||[t.pointerEvent]),o&&t.dispatchEvent(e)},rt=function(t,e){var i,n,r,o=q(t);return o?Tt(o,e):void 0!==t.left?(r=vt(e),{left:t.left-r.x,top:t.top-r.y,width:t.width,height:t.height}):{left:n=t.min||t.minX||t.minRotation||0,top:i=t.min||t.minY||0,width:(t.max||t.maxX||t.maxRotation||0)-n,height:(t.max||t.maxY||0)-i}},ot=function(){if(!m.createElementNS)return i=0,void(r=!1);var t,e,n,o,u=y("div"),c=m.createElementNS("http://www.w3.org/2000/svg","svg"),f=y("div"),h=u.style,p=m.body||v,d="flex"===it(p,"display",!0);m.body&&lt&&(h.position="absolute",p.appendChild(f),f.appendChild(u),o=u.offsetParent,f.style[lt]="rotate(1deg)",l=u.offsetParent===o,f.style.position="absolute",h.height="10px",o=u.offsetTop,f.style.border="5px solid red",a=o!==u.offsetTop,p.removeChild(f)),h=c.style,c.setAttributeNS(null,"width","400px"),c.setAttributeNS(null,"height","400px"),c.setAttributeNS(null,"viewBox","0 0 400 400"),h.display="block",h.boxSizing="border-box",h.border="0px solid red",h.transform="none",u.style.cssText="width:100px;height:100px;overflow:scroll;-ms-overflow-style:none;",p.appendChild(u),u.appendChild(c),e=(n=c.createSVGPoint().matrixTransform(c.getScreenCTM())).y,u.scrollTop=100,n.x=n.y=0,n=n.matrixTransform(c.getScreenCTM()),s=e-n.y<100.1?0:e-n.y-150,u.removeChild(c),p.removeChild(u),p.appendChild(c),d&&(p.style.display="block"),e=(t=c.getScreenCTM()).e,h.border="50px solid red",t=c.getScreenCTM(),0===e&&0===t.e&&0===t.f&&1===t.a?(i=1,r=!0):(i=e!==t.e?1:0,r=1!==t.a),d&&(p.style.display="flex"),p.removeChild(c)},st=""!==$(x,"perspective"),at=$(x,"transformOrigin").replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),lt=$(x,"transform"),ut=lt.replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),ct={},ft={},ht=n.f.SVGElement,pt=function(t){return!!(ht&&"function"==typeof t.getBBox&&t.getCTM&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},dt=n.f.navigator&&(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(n.f.navigator.userAgent)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(n.f.navigator.userAgent))&&parseFloat(RegExp.$1)<11,gt=[],_t=[],mt=function(t){if(!t.getBoundingClientRect||!t.parentNode||!lt)return{offsetTop:0,offsetLeft:0,scaleX:1,scaleY:1,offsetParent:v};if(!1!==Ft.cacheSVGData&&t._dCache&&t._dCache.lastUpdate===n.g.ticker.frame)return t._dCache;var e,o,a,l,u,c,f,h,p,d,g,_=t,y=yt(t);if(y.lastUpdate=n.g.ticker.frame,t.getBBox&&!y.isSVGRoot){for(_=t.parentNode,e=t.getBBox();_&&"svg"!==(_.nodeName+"").toLowerCase();)_=_.parentNode;return l=mt(_),y.offsetTop=e.y*l.scaleY,y.offsetLeft=e.x*l.scaleX,y.scaleX=l.scaleX,y.scaleY=l.scaleY,y.offsetParent=_||v,y}for((a=y.offsetParent)===m.body&&(a=v),_t.length=gt.length=0;_&&("matrix(1, 0, 0, 1, 0, 0)"!==(u=it(_,lt,!0))&&"none"!==u&&"translate3d(0px, 0px, 0px)"!==u&&(_t.push(_),gt.push(_.style[lt]),_.style[lt]="none"),_!==a);)_=_.parentNode;for(o=a.getBoundingClientRect(),u=t.getScreenCTM(),f=t.createSVGPoint().matrixTransform(u),y.scaleX=Math.sqrt(u.a*u.a+u.b*u.b),y.scaleY=Math.sqrt(u.d*u.d+u.c*u.c),void 0===i&&ot(),y.borderBox&&!r&&t.getAttribute("width")&&(l=J(t)||{},h=parseFloat(l.borderLeftWidth)+parseFloat(l.borderRightWidth)||0,p=parseFloat(l.borderTopWidth)+parseFloat(l.borderBottomWidth)||0,d=parseFloat(l.width)||0,g=parseFloat(l.height)||0,y.scaleX*=(d-h)/d,y.scaleY*=(g-p)/g),s?(e=t.getBoundingClientRect(),y.offsetLeft=e.left-o.left,y.offsetTop=e.top-o.top):(y.offsetLeft=f.x-o.left,y.offsetTop=f.y-o.top),y.offsetParent=a,c=_t.length;--c>-1;)_t[c].style[lt]=gt[c];return y},vt=function(t,e){if(e=e||{},!t||t===v||!t.parentNode||t===window)return{x:0,y:0};var i=J(t),r=at&&i?i.getPropertyValue(at):"50% 50%",o=r.split(" "),s=-1!==r.indexOf("left")?"0%":-1!==r.indexOf("right")?"100%":o[0],a=-1!==r.indexOf("top")?"0%":-1!==r.indexOf("bottom")?"100%":o[1];return"center"!==a&&null!=a||(a="50%"),("center"===s||isNaN(parseFloat(s)))&&(s="50%"),t.getBBox&&pt(t)?(t._gsTransform||(n.g.set(t,{x:"+=0",overwrite:!1}),void 0===t._gsTransform.xOrigin&&console.log("Draggable requires at least GSAP 1.17.0")),r=t.getBBox(),e.x=t._gsTransform.xOrigin-r.x,e.y=t._gsTransform.yOrigin-r.y):(t.getBBox&&-1!==(s+a).indexOf("%")&&(t={offsetWidth:(t=t.getBBox()).width,offsetHeight:t.height}),e.x=-1!==s.indexOf("%")?t.offsetWidth*parseFloat(s)/100:parseFloat(s),e.y=-1!==a.indexOf("%")?t.offsetHeight*parseFloat(a)/100:parseFloat(a)),e},yt=function(t){if(!1!==Ft.cacheSVGData&&t._dCache&&t._dCache.lastUpdate===n.g.ticker.frame)return t._dCache;var e,i=t._dCache=t._dCache||{},r=J(t),o=t.getBBox&&pt(t),s="svg"===(t.nodeName+"").toLowerCase();if(i.isSVG=o,i.isSVGRoot=s,i.borderBox="border-box"===r.boxSizing,i.computedStyle=r,s)(e=t.parentNode||v).insertBefore(x,t),i.offsetParent=x.offsetParent||v,e.removeChild(x);else if(o){for(e=t.parentNode;e&&"svg"!==(e.nodeName+"").toLowerCase();)e=e.parentNode;i.offsetParent=e}else i.offsetParent=t.offsetParent;return i},xt=function(t,e,n,r,o){if(t===window||!t||!t.style||!t.parentNode)return[1,0,0,1,0,0];var s,u,c,f,h,p,d,g,_,y,x,b,w,T,S=t._dCache||yt(t),P=t.parentNode,O=P._dCache||yt(P),k=S.computedStyle,C=S.isSVG?O.offsetParent:P.offsetParent;return s=S.isSVG&&-1!==(t.style[lt]+"").indexOf("matrix")?t.style[lt]:k?k.getPropertyValue(ut):t.currentStyle?t.currentStyle[lt]:"1,0,0,1,0,0",t.getBBox&&-1!==(t.getAttribute("transform")+"").indexOf("matrix")&&(s=t.getAttribute("transform")),(s=(s+"").match(/(?:\-|\.|\b)(\d|\.|e\-)+/g)||[1,0,0,1,0,0]).length>6&&(s=[s[0],s[1],s[4],s[5],s[12],s[13]]),r?s[4]=s[5]=0:S.isSVG&&(h=t._gsTransform)&&(h.xOrigin||h.yOrigin)&&(s[0]=parseFloat(s[0]),s[1]=parseFloat(s[1]),s[2]=parseFloat(s[2]),s[3]=parseFloat(s[3]),s[4]=parseFloat(s[4])-(h.xOrigin-(h.xOrigin*s[0]+h.yOrigin*s[2])),s[5]=parseFloat(s[5])-(h.yOrigin-(h.xOrigin*s[1]+h.yOrigin*s[3]))),e&&(void 0===i&&ot(),c=S.isSVG||S.isSVGRoot?mt(t):t,S.isSVG?(f=t.getBBox(),y=O.isSVGRoot?{x:0,y:0}:P.getBBox(),c={offsetLeft:f.x-y.x,offsetTop:f.y-y.y,offsetParent:S.offsetParent}):S.isSVGRoot?(x=parseInt(k.borderTopWidth,10)||0,b=parseInt(k.borderLeftWidth,10)||0,w=(s[0]-i)*b+s[2]*x,T=s[1]*b+(s[3]-i)*x,p=e.x,d=e.y,g=p-(p*s[0]+d*s[2]),_=d-(p*s[1]+d*s[3]),s[4]=parseFloat(s[4])+g,s[5]=parseFloat(s[5])+_,e.x-=g,e.y-=_,p=c.scaleX,d=c.scaleY,o||(e.x*=p,e.y*=d),s[0]*=p,s[1]*=d,s[2]*=p,s[3]*=d,dt||(e.x+=w,e.y+=T),C===m.body&&c.offsetParent===v&&(C=v)):!a&&t.offsetParent&&(e.x+=parseInt(it(t.offsetParent,"borderLeftWidth"),10)||0,e.y+=parseInt(it(t.offsetParent,"borderTopWidth"),10)||0),u=P===v||P===m.body,s[4]=Number(s[4])+e.x+(c.offsetLeft||0)-n.x-(u?0:P.scrollLeft||0),s[5]=Number(s[5])+e.y+(c.offsetTop||0)-n.y-(u?0:P.scrollTop||0),P&&"fixed"===it(t,"position",k)&&(s[4]+=Y(),s[5]+=X()),!P||P===v||C!==c.offsetParent||O.isSVG||l&&"100100"!==xt(P).join("")||(c=O.isSVGRoot?mt(P):P,s[4]-=c.offsetLeft||0,s[5]-=c.offsetTop||0,a||!O.offsetParent||S.isSVG||S.isSVGRoot||(s[4]-=parseInt(it(O.offsetParent,"borderLeftWidth"),10)||0,s[5]-=parseInt(it(O.offsetParent,"borderTopWidth"),10)||0))),s},bt=function(t,e){if(!t||t===window||!t.parentNode)return[1,0,0,1,0,0];for(var i,n,r,o,s,a,l,u,c=vt(t,ct),f=vt(t.parentNode,ft),h=xt(t,c,f,!1,!e);(t=t.parentNode)&&t.parentNode&&t!==v;)c=f,f=vt(t.parentNode,c===ct?ft:ct),l=xt(t,c,f),i=h[0],n=h[1],r=h[2],o=h[3],s=h[4],a=h[5],h[0]=i*l[0]+n*l[2],h[1]=i*l[1]+n*l[3],h[2]=r*l[0]+o*l[2],h[3]=r*l[1]+o*l[3],h[4]=s*l[0]+a*l[2]+l[4],h[5]=s*l[1]+a*l[3]+l[5];return e&&(i=h[0],n=h[1],r=h[2],o=h[3],s=h[4],a=h[5],u=i*o-n*r,h[0]=o/u,h[1]=-n/u,h[2]=-r/u,h[3]=i/u,h[4]=(r*a-o*s)/u,h[5]=-(i*a-n*s)/u),h},wt=function(t,e,i){var n=t.x*e[0]+t.y*e[2]+e[4],r=t.x*e[1]+t.y*e[3]+e[5];return t.x=n*i[0]+r*i[2]+i[4],t.y=n*i[1]+r*i[3]+i[5],t},Tt=function(t,e,i){if(!(t=q(t)))return null;e=q(e);var n,r,o,s,a,l,u,c,f,h,p,d,g,_,y,x,b,w,T,S,O,k,C=t.getBBox&&pt(t);if(t===window)s=X(),o=(r=Y())+(v.clientWidth||t.innerWidth||m.body.clientWidth||0),a=s+((t.innerHeight||0)-20<v.clientHeight?v.clientHeight:t.innerHeight||m.body.clientHeight||0);else{if(void 0===e||e===window)return t.getBoundingClientRect();r=-(n=vt(t)).x,s=-n.y,C?(g=(d=t.getBBox()).width,_=d.height):"svg"!==(t.nodeName+"").toLowerCase()&&t.offsetWidth?(g=t.offsetWidth,_=t.offsetHeight):(O=J(t),g=parseFloat(O.width),_=parseFloat(O.height)),o=r+g,a=s+_,"svg"!==t.nodeName.toLowerCase()||P||(k=(y=mt(t)).computedStyle||{},w=(t.getAttribute("viewBox")||"0 0").split(" "),T=parseFloat(w[0]),S=parseFloat(w[1]),x=parseFloat(k.borderLeftWidth)||0,b=parseFloat(k.borderTopWidth)||0,o-=g-(g-x)/y.scaleX-T,a-=_-(_-b)/y.scaleY-S,r-=x/y.scaleX-T,s-=b/y.scaleY-S,O&&(o+=(parseFloat(k.borderRightWidth)+x)/y.scaleX,a+=(b+parseFloat(k.borderBottomWidth))/y.scaleY))}return t===e?{left:r,top:s,width:o-r,height:a-s}:(l=bt(t),u=bt(e,!0),c=wt({x:r,y:s},l,u),f=wt({x:o,y:s},l,u),h=wt({x:o,y:a},l,u),p=wt({x:r,y:a},l,u),r=Math.min(c.x,f.x,h.x,p.x),s=Math.min(c.y,f.y,h.y,p.y),D.x=D.y=0,i&&vt(e,D),{left:r+D.x,top:s+D.y,width:Math.max(c.x,f.x,h.x,p.x)-r,height:Math.max(c.y,f.y,h.y,p.y)-s})},St=function(t){return!!(t&&t.length&&t[0]&&(t[0].nodeType&&t[0].style&&!t.nodeType||t[0].length&&t[0][0]))},Pt="undefined"!=typeof window&&"ontouchstart"in v&&"orientation"in window,Ot=function(t){for(var e=t.split(","),i=(void 0!==x.onpointerdown?"pointerdown,pointermove,pointerup,pointercancel":void 0!==x.onmspointerdown?"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel":t).split(","),n={},r=4;--r>-1;)n[e[r]]=i[r],n[i[r]]=e[r];return n}("touchstart,touchmove,touchend,touchcancel"),kt=function(t,e,i,n){if(t.addEventListener){var r=Ot[e];n=n||{passive:!1},t.addEventListener(r||e,i,n),r&&e!==r&&t.addEventListener(e,i,n)}else t.attachEvent&&t.attachEvent("on"+e,i)},Ct=function(t,e,i){if(t.removeEventListener){var n=Ot[e];t.removeEventListener(n||e,i),n&&e!==n&&t.removeEventListener(e,i)}else t.detachEvent&&t.detachEvent("on"+e,i)},At=function(e){t=e.touches&&E<e.touches.length,Ct(e.target,"touchend",At)},Mt=function(e){t=e.touches&&E<e.touches.length,kt(e.target,"touchend",At)},Et=function(t,e,i,n,r,o){var s,a,l,u={};if(e)if(1!==r&&e instanceof Array){if(u.end=s=[],l=e.length,"object"==typeof e[0])for(a=0;a<l;a++)s[a]=N(e[a],r);else for(a=0;a<l;a++)s[a]=e[a]*r;i+=1.1,n-=1.1}else u.end="function"==typeof e?function(i){var n,o,s=e.call(t,i);if(1!==r)if("object"==typeof s){for(o in n={},s)n[o]=s[o]*r;s=n}else s*=r;return s}:e;return(i||0===i)&&(u.max=i),(n||0===n)&&(u.min=n),o&&(u.velocity=0),u},Rt=function(t){var e;return!(!t||!t.getAttribute||"BODY"===t.nodeName)&&(!("true"!==(e=t.getAttribute("data-clickable"))&&("false"===e||!t.onclick&&!M.test(t.nodeName+"")&&"true"!==t.getAttribute("contentEditable")))||Rt(t.parentNode))},Lt=function(t,e){for(var i,n=t.length;--n>-1;)(i=t[n]).ondragstart=i.onselectstart=e?null:g,Z(i,"userSelect",e?"text":"none")},Dt=function(){var t,e=m.createElement("div"),i=m.createElement("div"),n=i.style,r=m.body||x;return n.display="inline-block",n.position="relative",e.style.cssText=i.innerHTML="width:90px; height:40px; padding:10px; overflow:auto; visibility: hidden",e.appendChild(i),r.appendChild(e),t=i.offsetHeight+18>e.scrollHeight,r.removeChild(e),t}(),Ft=function(i,r){n.c.call(this,i),i=q(i),e||(e=p.com.greensock.plugins.ThrowPropsPlugin),this.vars=r=N(r||{}),this.target=i,this.x=this.y=this.rotation=0,this.dragResistance=parseFloat(r.dragResistance)||0,this.edgeResistance=isNaN(r.edgeResistance)?1:parseFloat(r.edgeResistance)||0,this.lockAxis=r.lockAxis,this.autoScroll=r.autoScroll||0,this.lockedAxis=null,this.allowEventDefault=!!r.allowEventDefault;var s,a,l,d,g,_,y,x,M,j,X,Y,V,$,K,J,Q,tt,et,ot,at,ut,ct,ft,ht,dt,gt,_t,mt,yt,xt,wt,Tt=(r.type||(P?"top,left":"x,y")).toLowerCase(),St=-1!==Tt.indexOf("x")||-1!==Tt.indexOf("y"),At=-1!==Tt.indexOf("rotation"),Nt=At?"rotation":St?"x":"left",It=St?"y":"top",jt=-1!==Tt.indexOf("x")||-1!==Tt.indexOf("left")||"scroll"===Tt,Xt=-1!==Tt.indexOf("y")||-1!==Tt.indexOf("top")||"scroll"===Tt,Yt=r.minimumMovement||2,zt=this,Wt=function(t){if("string"==typeof t&&(t=n.g.selector(t)),!t||t.nodeType)return[t];var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i}(r.trigger||r.handle||i),Ut={},Vt=0,Gt=!1,Ht=r.autoScrollMarginTop||40,qt=r.autoScrollMarginRight||40,$t=r.autoScrollMarginBottom||40,Zt=r.autoScrollMarginLeft||40,Kt=r.clickableTest||Rt,Jt=0,Qt=function(t){if(!(zt.isPressed&&t.which<2))return t.preventDefault(),t.stopPropagation(),!1;zt.endDrag()},te=function(t){if(zt.autoScroll&&zt.isDragging&&(Gt||tt)){var e,n,r,o,s,l,u,c,f=i,h=15*zt.autoScroll;for(Gt=!1,F.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=v.scrollTop?v.scrollTop:m.body.scrollTop,F.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=v.scrollLeft?v.scrollLeft:m.body.scrollLeft,o=zt.pointerX-F.scrollLeft,s=zt.pointerY-F.scrollTop;f&&!n;)e=(n=U(f.parentNode))?F:f.parentNode,r=n?{bottom:Math.max(v.clientHeight,window.innerHeight||0),right:Math.max(v.clientWidth,window.innerWidth||0),left:0,top:0}:e.getBoundingClientRect(),l=u=0,Xt&&((c=e._gsMaxScrollY-e.scrollTop)<0?u=c:s>r.bottom-$t&&c?(Gt=!0,u=Math.min(c,h*(1-Math.max(0,r.bottom-s)/$t)|0)):s<r.top+Ht&&e.scrollTop&&(Gt=!0,u=-Math.min(e.scrollTop,h*(1-Math.max(0,s-r.top)/Ht)|0)),u&&(e.scrollTop+=u)),jt&&((c=e._gsMaxScrollX-e.scrollLeft)<0?l=c:o>r.right-qt&&c?(Gt=!0,l=Math.min(c,h*(1-Math.max(0,r.right-o)/qt)|0)):o<r.left+Zt&&e.scrollLeft&&(Gt=!0,l=-Math.min(e.scrollLeft,h*(1-Math.max(0,o-r.left)/Zt)|0)),l&&(e.scrollLeft+=l)),n&&(l||u)&&(window.scrollTo(e.scrollLeft,e.scrollTop),de(zt.pointerX+l,zt.pointerY+u)),f=e}if(tt){var p=zt.x,d=zt.y;p<1e-6&&p>-1e-6&&(p=0),d<1e-6&&d>-1e-6&&(d=0),At?(zt.deltaX=p-gt.data.rotation,gt.data.rotation=zt.rotation=p,gt.setRatio(1)):a?(Xt&&(zt.deltaY=d-a.top(),a.top(d)),jt&&(zt.deltaX=p-a.left(),a.left(p))):St?(Xt&&(zt.deltaY=d-gt.data.y,gt.data.y=d),jt&&(zt.deltaX=p-gt.data.x,gt.data.x=p),gt.setRatio(1)):(Xt&&(zt.deltaY=d-parseFloat(i.style.top||0),i.style.top=d+"px"),jt&&(zt.deltaY=p-parseFloat(i.style.left||0),i.style.left=p+"px")),!x||t||yt||(yt=!0,nt(zt,"drag","onDrag"),yt=!1)}tt=!1},ee=function(t,e){var r,o=zt.x,s=zt.y;i._gsTransform||!St&&!At||n.g.set(i,{x:"+=0",overwrite:!1,data:"_draggable"}),St?(zt.y=i._gsTransform.y,zt.x=i._gsTransform.x):At?zt.x=zt.rotation=i._gsTransform.rotation:a?(zt.y=a.top(),zt.x=a.left()):(zt.y=parseInt(i.style.top,10)||0,zt.x=parseInt(i.style.left,10)||0),(ot||at||ut)&&!e&&(zt.isDragging||zt.isThrowing)&&(ut&&(D.x=zt.x,D.y=zt.y,(r=ut(D)).x!==zt.x&&(zt.x=r.x,tt=!0),r.y!==zt.y&&(zt.y=r.y,tt=!0)),ot&&(r=ot(zt.x))!==zt.x&&(zt.x=r,At&&(zt.rotation=r),tt=!0),at&&((r=at(zt.y))!==zt.y&&(zt.y=r),tt=!0)),tt&&te(!0),t||(zt.deltaX=zt.x-o,zt.deltaY=zt.y-s,nt(zt,"throwupdate","onThrowUpdate"))},ie=function(){var t,e,n,o;y=!1,a?(a.calibrate(),zt.minX=j=-a.maxScrollLeft(),zt.minY=Y=-a.maxScrollTop(),zt.maxX=M=zt.maxY=X=0,y=!0):r.bounds&&(t=rt(r.bounds,i.parentNode),At?(zt.minX=j=t.left,zt.maxX=M=t.left+t.width,zt.minY=Y=zt.maxY=X=0):void 0!==r.bounds.maxX||void 0!==r.bounds.maxY?(t=r.bounds,zt.minX=j=t.minX,zt.minY=Y=t.minY,zt.maxX=M=t.maxX,zt.maxY=X=t.maxY):(e=rt(i,i.parentNode),zt.minX=j=it(i,Nt)+t.left-e.left,zt.minY=Y=it(i,It)+t.top-e.top,zt.maxX=M=j+(t.width-e.width),zt.maxY=X=Y+(t.height-e.height)),j>M&&(zt.minX=M,zt.maxX=M=j,j=zt.minX),Y>X&&(zt.minY=X,zt.maxY=X=Y,Y=zt.minY),At&&(zt.minRotation=j,zt.maxRotation=M),y=!0),r.liveSnap&&(o=(n=!0===r.liveSnap?r.snap||{}:r.liveSnap)instanceof Array||"function"==typeof n,At?(ot=ce(o?n:n.rotation,j,M,1),at=null):n.points?ut=fe(o?n:n.points,j,M,Y,X,n.radius,a?-1:1):(jt&&(ot=ce(o?n:n.x||n.left||n.scrollLeft,j,M,a?-1:1)),Xt&&(at=ce(o?n:n.y||n.top||n.scrollTop,Y,X,a?-1:1))))},ne=function(){zt.isThrowing=!1,nt(zt,"throwcomplete","onThrowComplete")},re=function(){zt.isThrowing=!1},oe=function(t,n){var o,s,l,u;t&&e?(!0===t&&(s=(o=r.snap||r.liveSnap||{})instanceof Array||"function"==typeof o,t={resistance:(r.throwResistance||r.resistance||1e3)/(At?10:1)},At?t.rotation=Et(zt,s?o:o.rotation,M,j,1,n):(jt&&(t[Nt]=Et(zt,s?o:o.points||o.x||o.left||o.scrollLeft,M,j,a?-1:1,n||"x"===zt.lockedAxis)),Xt&&(t[It]=Et(zt,s?o:o.points||o.y||o.top||o.scrollTop,X,Y,a?-1:1,n||"y"===zt.lockedAxis)),(o.points||o instanceof Array&&"object"==typeof o[0])&&(t.linkedProps=Nt+","+It,t.radius=o.radius))),zt.isThrowing=!0,u=isNaN(r.overshootTolerance)?1===r.edgeResistance?0:1-zt.edgeResistance+.2:r.overshootTolerance,zt.tween=l=e.to(a||i,{throwProps:t,data:"_draggable",ease:r.ease||p.Power3.easeOut,onComplete:ne,onOverwrite:re,onUpdate:r.fastMode?nt:ee,onUpdateParams:r.fastMode?[zt,"onthrowupdate","onThrowUpdate"]:o&&o.radius?[!1,!0]:b},Math.max(r.minDuration||0,r.maxDuration||0)||2,isNaN(r.minDuration)?0===u||"object"==typeof t&&t.resistance>1e3?0:.5:r.minDuration,u),r.fastMode||(a&&(a._suspendTransforms=!0),l.render(l.duration(),!0,!0),ee(!0,!0),zt.endX=zt.x,zt.endY=zt.y,At&&(zt.endRotation=zt.x),l.play(0),ee(!0,!0),a&&(a._suspendTransforms=!1))):y&&zt.applyBounds()},se=function(t){var e,n,r,o,s,a,u,c,f,h=ht||[1,0,0,1,0,0];ht=bt(i.parentNode,!0),t&&zt.isPressed&&h.join(",")!==ht.join(",")&&(e=h[0],n=h[1],r=h[2],o=h[3],s=h[4],a=h[5],f=l*(-n/(u=e*o-n*r))+d*(e/u)+-(e*a-n*s)/u,d=(c=l*(o/u)+d*(-r/u)+(r*a-o*s)/u)*ht[1]+f*ht[3]+ht[5],l=c*ht[0]+f*ht[2]+ht[4]),ht[1]||ht[2]||1!=ht[0]||1!=ht[3]||0!=ht[4]||0!=ht[5]||(ht=null)},ae=function(){var t=1-zt.edgeResistance;se(!1),ht&&(l=zt.pointerX*ht[0]+zt.pointerY*ht[2]+ht[4],d=zt.pointerX*ht[1]+zt.pointerY*ht[3]+ht[5]),tt&&(de(zt.pointerX,zt.pointerY),te(!0)),a?(ie(),_=a.top(),g=a.left()):(le()?(ee(!0,!0),ie()):zt.applyBounds(),At?(Q=zt.rotationOrigin=function(t,e,i,n,r){t=q(t);var o=bt(t,!1),s=e.x,a=e.y;return i&&(vt(t,e),s-=e.x,a-=e.y),(n=!0===n?e:n||{}).x=s*o[0]+a*o[2]+o[4],n.y=s*o[1]+a*o[3]+o[5],n}(i,{x:0,y:0}),ee(!0,!0),g=zt.x,_=zt.y=Math.atan2(Q.y-zt.pointerY,zt.pointerX-Q.x)*w):(i.parentNode&&i.parentNode.scrollTop||0,i.parentNode&&i.parentNode.scrollLeft||0,_=it(i,It),g=it(i,Nt))),y&&t&&(g>M?g=M+(g-M)/t:g<j&&(g=j-(j-g)/t),At||(_>X?_=X+(_-X)/t:_<Y&&(_=Y-(Y-_)/t))),zt.startX=g,zt.startY=_},le=function(){return zt.tween&&zt.tween.isActive()},ue=function(){!O.parentNode||le()||zt.isDragging||O.parentNode.removeChild(O)},ce=function(t,e,i,n){return"function"==typeof t?function(r){var o=zt.isPressed?1-zt.edgeResistance:1;return t.call(zt,r>i?i+(r-i)*o:r<e?e+(r-e)*o:r)*n}:t instanceof Array?function(n){for(var r,o,s=t.length,a=0,l=T;--s>-1;)(o=(r=t[s])-n)<0&&(o=-o),o<l&&r>=e&&r<=i&&(a=s,l=o);return t[a]}:isNaN(t)?function(t){return t}:function(){return t*n}},fe=function(t,e,i,n,r,o,s){return o=o&&o<T?o*o:T,"function"==typeof t?function(a){var l,u,c,f=zt.isPressed?1-zt.edgeResistance:1,h=a.x,p=a.y;return a.x=h=h>i?i+(h-i)*f:h<e?e+(h-e)*f:h,a.y=p=p>r?r+(p-r)*f:p<n?n+(p-n)*f:p,(l=t.call(zt,a))!==a&&(a.x=l.x,a.y=l.y),1!==s&&(a.x*=s,a.y*=s),o<T&&(u=a.x-h)*u+(c=a.y-p)*c>o&&(a.x=h,a.y=p),a}:t instanceof Array?function(e){for(var i,n,r,s,a=t.length,l=0,u=T;--a>-1;)(s=(i=(r=t[a]).x-e.x)*i+(n=r.y-e.y)*n)<u&&(l=a,u=s);return u<=o?t[l]:e}:function(t){return t}},he=function(t,e){var o;if(s&&!zt.isPressed&&t&&("mousedown"!==t.type&&"pointerdown"!==t.type||e||!(S()-Jt<30)||!Ot[zt.pointerEvent.type])){if(dt=le(),zt.pointerEvent=t,Ot[t.type]?(ft=-1!==t.type.indexOf("touch")?t.currentTarget||t.target:m,kt(ft,"touchend",ge),kt(ft,"touchmove",pe),kt(ft,"touchcancel",ge),kt(m,"touchstart",Mt)):(ft=null,kt(m,"mousemove",pe)),mt=null,kt(m,"mouseup",ge),t&&t.target&&kt(t.target,"mouseup",ge),ct=Kt.call(zt,t.target)&&!r.dragClickables&&!e)return kt(t.target,"change",ge),nt(zt,"pressInit","onPressInit"),nt(zt,"press","onPress"),void Lt(Wt,!0);if(_t=!(!ft||jt===Xt||!1===zt.vars.allowNativeTouchScrolling||zt.vars.allowContextMenu&&t&&(t.ctrlKey||t.which>2))&&(jt?"y":"x"),P?t=H(t,!0):_t||zt.allowEventDefault||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()),t.changedTouches?(t=K=t.changedTouches[0],J=t.identifier):t.pointerId?J=t.pointerId:K=J=null,E++,function(t){k.push(t),1===k.length&&n.g.ticker.addEventListener("tick",I,this,!1,1)}(te),d=zt.pointerY=t.pageY,l=zt.pointerX=t.pageX,nt(zt,"pressInit","onPressInit"),(_t||zt.autoScroll)&&G(i.parentNode),!i.parentNode||!zt.autoScroll||a||At||!i.parentNode._gsMaxScrollX||O.parentNode||i.getBBox||(O.style.width=i.parentNode.scrollWidth+"px",i.parentNode.appendChild(O)),ae(),zt.tween&&zt.tween.kill(),zt.isThrowing=!1,n.g.killTweensOf(a||i,!0,Ut),a&&n.g.killTweensOf(i,!0,{scrollTo:1}),zt.tween=zt.lockedAxis=null,(r.zIndexBoost||!At&&!a&&!1!==r.zIndexBoost)&&(i.style.zIndex=Ft.zIndex++),zt.isPressed=!0,x=!(!r.onDrag&&!zt._listeners.drag),!At)for(o=Wt.length;--o>-1;)Z(Wt[o],"cursor",r.cursor||"move");nt(zt,"press","onPress")}},pe=function(e){var i,n,r,o,a,u,c=e;if(s&&!t&&zt.isPressed&&e){if(zt.pointerEvent=e,i=e.changedTouches){if((e=i[0])!==K&&e.identifier!==J){for(o=i.length;--o>-1&&(e=i[o]).identifier!==J;);if(o<0)return}}else if(e.pointerId&&J&&e.pointerId!==J)return;if(P)e=H(e,!0);else{if(ft&&_t&&!mt&&(n=e.pageX,r=e.pageY,ht&&(o=n*ht[0]+r*ht[2]+ht[4],r=n*ht[1]+r*ht[3]+ht[5],n=o),((a=Math.abs(n-l))!==(u=Math.abs(r-d))&&(a>Yt||u>Yt)||R&&_t===mt)&&(mt=a>u&&jt?"x":"y",!1!==zt.vars.lockAxisOnTouchScroll&&(zt.lockedAxis="x"===mt?"y":"x","function"==typeof zt.vars.onLockAxis&&zt.vars.onLockAxis.call(zt,c)),R&&_t===mt)))return void ge(c);zt.allowEventDefault||_t&&(!mt||_t===mt)||!1===c.cancelable||(c.preventDefault(),c.preventManipulation&&c.preventManipulation())}zt.autoScroll&&(Gt=!0),de(e.pageX,e.pageY)}},de=function(t,e){var i,n,r,o,s,a,u=1-zt.dragResistance,c=1-zt.edgeResistance;zt.pointerX=t,zt.pointerY=e,At?(o=Math.atan2(Q.y-e,t-Q.x)*w,(s=zt.y-o)>180?(_-=360,zt.y=o):s<-180&&(_+=360,zt.y=o),zt.x!==g||Math.abs(_-o)>Yt?(zt.y=o,r=g+(_-o)*u):r=g):(ht&&(a=t*ht[0]+e*ht[2]+ht[4],e=t*ht[1]+e*ht[3]+ht[5],t=a),i=t-l,(n=e-d)<Yt&&n>-Yt&&(n=0),i<Yt&&i>-Yt&&(i=0),(zt.lockAxis||zt.lockedAxis)&&(i||n)&&((a=zt.lockedAxis)||(zt.lockedAxis=a=jt&&Math.abs(i)>Math.abs(n)?"y":Xt?"x":null,a&&"function"==typeof zt.vars.onLockAxis&&zt.vars.onLockAxis.call(zt,zt.pointerEvent)),"y"===a?n=0:"x"===a&&(i=0)),r=g+i*u,o=_+n*u),(ot||at||ut)&&(zt.x!==r||zt.y!==o&&!At)?(ut&&(D.x=r,D.y=o,r=(a=ut(D)).x,o=a.y),ot&&(r=ot(r)),at&&(o=at(o))):y&&(r>M?r=M+(r-M)*c:r<j&&(r=j+(r-j)*c),At||(o>X?o=X+(o-X)*c:o<Y&&(o=Y+(o-Y)*c))),At||ht||(r=Math.round(r),o=Math.round(o)),(zt.x!==r||zt.y!==o&&!At)&&(At?(zt.endRotation=zt.x=zt.endX=r,tt=!0):(Xt&&(zt.y=zt.endY=o,tt=!0),jt&&(zt.x=zt.endX=r,tt=!0)),!zt.isDragging&&zt.isPressed&&(zt.isDragging=!0,nt(zt,"dragstart","onDragStart")))},ge=function(t,e){if(s&&zt.isPressed&&(!t||null==J||e||!(t.pointerId&&t.pointerId!==J||t.changedTouches&&!function(t,e){for(var i=t.length;--i>-1;)if(t[i].identifier===e)return!0;return!1}(t.changedTouches,J)))){zt.isPressed=!1;var o,a,l,u,c,f=t,h=zt.isDragging,p=zt.vars.allowContextMenu&&t&&(t.ctrlKey||t.which>2),d=n.g.delayedCall(.001,ue);if(ft?(Ct(ft,"touchend",ge),Ct(ft,"touchmove",pe),Ct(ft,"touchcancel",ge),Ct(m,"touchstart",Mt)):Ct(m,"mousemove",pe),Ct(m,"mouseup",ge),t&&t.target&&Ct(t.target,"mouseup",ge),tt=!1,ct&&!p)return t&&(Ct(t.target,"change",ge),zt.pointerEvent=f),Lt(Wt,!1),nt(zt,"release","onRelease"),nt(zt,"click","onClick"),void(ct=!1);if(B(te),!At)for(a=Wt.length;--a>-1;)Z(Wt[a],"cursor",r.cursor||"move");if(h&&(Vt=L=S(),zt.isDragging=!1),E--,t){if(P&&(t=H(t,!1)),(o=t.changedTouches)&&(t=o[0])!==K&&t.identifier!==J){for(a=o.length;--a>-1&&(t=o[a]).identifier!==J;);if(a<0)return}zt.pointerEvent=f,zt.pointerX=t.pageX,zt.pointerY=t.pageY}return p&&f?(f.preventDefault(),f.preventManipulation&&f.preventManipulation(),nt(zt,"release","onRelease")):f&&!h?(dt&&(r.snap||r.bounds)&&oe(r.throwProps),nt(zt,"release","onRelease"),R&&"touchmove"===f.type||-1!==f.type.indexOf("cancel")||(nt(zt,"click","onClick"),S()-Jt<300&&nt(zt,"doubleclick","onDoubleClick"),u=f.target||f.srcElement||i,Jt=S(),c=function(){Jt!==xt&&zt.enabled()&&!zt.isPressed&&(u.click?u.click():m.createEvent&&((l=m.createEvent("MouseEvents")).initMouseEvent("click",!0,!0,window,1,zt.pointerEvent.screenX,zt.pointerEvent.screenY,zt.pointerX,zt.pointerY,!1,!1,!1,!1,0,null),u.dispatchEvent(l)))},R||f.defaultPrevented||n.g.delayedCall(1e-5,c))):(oe(r.throwProps),P||zt.allowEventDefault||!f||!r.dragClickables&&Kt.call(zt,f.target)||!h||_t&&(!mt||_t!==mt)||!1===f.cancelable||(f.preventDefault(),f.preventManipulation&&f.preventManipulation()),nt(zt,"release","onRelease")),le()&&d.duration(zt.tween.duration()),h&&nt(zt,"dragend","onDragEnd"),!0}},_e=function(t){if(t&&zt.isDragging&&!a){var e=t.target||t.srcElement||i.parentNode,n=e.scrollLeft-e._gsScrollX,r=e.scrollTop-e._gsScrollY;(n||r)&&(ht?(l-=n*ht[0]+r*ht[2],d-=r*ht[3]+n*ht[1]):(l-=n,d-=r),e._gsScrollX+=n,e._gsScrollY+=r,de(zt.pointerX,zt.pointerY))}},me=function(t){var e=S(),i=e-Jt<40,n=e-Vt<40,r=i&&xt===Jt,o=!!t.preventDefault,s=zt.pointerEvent&&zt.pointerEvent.defaultPrevented,a=i&&wt===Jt,l=t.isTrusted||null==t.isTrusted&&i&&r;if(o&&(r||n&&!1!==zt.vars.suppressClickOnDrag)&&t.stopImmediatePropagation(),i&&(!zt.pointerEvent||!zt.pointerEvent.defaultPrevented)&&(!r||l!==a))return l&&r&&(wt=Jt),void(xt=Jt);(zt.isPressed||n||i)&&(o?l&&t.detail&&i&&!s||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()):t.returnValue=!1)},ve=function(t){return ht?{x:t.x*ht[0]+t.y*ht[2]+ht[4],y:t.x*ht[1]+t.y*ht[3]+ht[5]}:{x:t.x,y:t.y}};(et=Ft.get(this.target))&&et.kill(),this.startDrag=function(t,e){var n,r,o,s;he(t||zt.pointerEvent,!0),e&&!zt.hitTest(t||zt.pointerEvent)&&(n=Bt(t||zt.pointerEvent),r=Bt(i),o=ve({x:n.left+n.width/2,y:n.top+n.height/2}),s=ve({x:r.left+r.width/2,y:r.top+r.height/2}),l-=o.x-s.x,d-=o.y-s.y),zt.isDragging||(zt.isDragging=!0,nt(zt,"dragstart","onDragStart"))},this.drag=pe,this.endDrag=function(t){ge(t||zt.pointerEvent,!0)},this.timeSinceDrag=function(){return zt.isDragging?0:(S()-Vt)/1e3},this.timeSinceClick=function(){return(S()-Jt)/1e3},this.hitTest=function(t,e){return Ft.hitTest(zt.target,t,e)},this.getDirection=function(t,i){var n,r,o,s,a,l,u="velocity"===t&&e?t:"object"!=typeof t||At?"start":"element";return"element"===u&&(a=Bt(zt.target),l=Bt(t)),n="start"===u?zt.x-g:"velocity"===u?e.getVelocity(this.target,Nt):a.left+a.width/2-(l.left+l.width/2),At?n<0?"counter-clockwise":"clockwise":(i=i||2,r="start"===u?zt.y-_:"velocity"===u?e.getVelocity(this.target,It):a.top+a.height/2-(l.top+l.height/2),s=(o=Math.abs(n/r))<1/i?"":n<0?"left":"right",o<i&&(""!==s&&(s+="-"),s+=r<0?"up":"down"),s)},this.applyBounds=function(t){var e,n,o,s,a,l;if(t&&r.bounds!==t)return r.bounds=t,zt.update(!0);if(ee(!0),ie(),y){if(e=zt.x,n=zt.y,e>M?e=M:e<j&&(e=j),n>X?n=X:n<Y&&(n=Y),(zt.x!==e||zt.y!==n)&&(o=!0,zt.x=zt.endX=e,At?zt.endRotation=e:zt.y=zt.endY=n,tt=!0,te(!0),zt.autoScroll&&!zt.isDragging))for(G(i.parentNode),s=i,F.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=v.scrollTop?v.scrollTop:m.body.scrollTop,F.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=v.scrollLeft?v.scrollLeft:m.body.scrollLeft;s&&!l;)a=(l=U(s.parentNode))?F:s.parentNode,Xt&&a.scrollTop>a._gsMaxScrollY&&(a.scrollTop=a._gsMaxScrollY),jt&&a.scrollLeft>a._gsMaxScrollX&&(a.scrollLeft=a._gsMaxScrollX),s=a;zt.isThrowing&&(o||zt.endX>M||zt.endX<j||zt.endY>X||zt.endY<Y)&&oe(r.throwProps,o)}return zt},this.update=function(t,e,n){var r=zt.x,o=zt.y;return se(!e),t?zt.applyBounds():(tt&&n&&te(!0),ee(!0)),e&&(de(zt.pointerX,zt.pointerY),tt&&te(!0)),zt.isPressed&&!e&&(jt&&Math.abs(r-zt.x)>.01||Xt&&Math.abs(o-zt.y)>.01&&!At)&&ae(),zt.autoScroll&&(G(i.parentNode),Gt=zt.isDragging,te(!0)),zt.autoScroll&&(W(i,_e),z(i,_e)),zt},this.enable=function(t){var l,u,c;if("soft"!==t){for(u=Wt.length;--u>-1;)c=Wt[u],kt(c,"mousedown",he),kt(c,"touchstart",he),kt(c,"click",me,!0),At||Z(c,"cursor",r.cursor||"move"),Z(c,"touchCallout","none"),Z(c,"touchAction",jt===Xt?"none":jt?"pan-y":"pan-x"),pt(c)&&Z(c.ownerSVGElement||c,"touchAction",jt===Xt?"none":jt?"pan-y":"pan-x"),this.vars.allowContextMenu||kt(c,"contextmenu",Qt);Lt(Wt,!1)}return z(i,_e),s=!0,e&&"soft"!==t&&e.track(a||i,St?"x,y":At?"rotation":"top,left"),a&&a.enable(),i._gsDragID=l="d"+A++,C[l]=this,a&&(a.element._gsDragID=l),n.g.set(i,{x:"+=0",overwrite:!1,data:"_draggable"}),gt={t:i,data:P?$:i._gsTransform,tween:{},setRatio:P?function(){n.g.set(i,V)}:o._internals.setTransformRatio||o._internals.set3DTransformRatio},ae(),zt.update(!0),zt},this.disable=function(t){var n,r,o=zt.isDragging;if(!At)for(n=Wt.length;--n>-1;)Z(Wt[n],"cursor",null);if("soft"!==t){for(n=Wt.length;--n>-1;)r=Wt[n],Z(r,"touchCallout",null),Z(r,"touchAction",null),Ct(r,"mousedown",he),Ct(r,"touchstart",he),Ct(r,"click",me),Ct(r,"contextmenu",Qt);Lt(Wt,!0),ft&&(Ct(ft,"touchcancel",ge),Ct(ft,"touchend",ge),Ct(ft,"touchmove",pe)),Ct(m,"mouseup",ge),Ct(m,"mousemove",pe)}return W(i,_e),s=!1,e&&"soft"!==t&&e.untrack(a||i,St?"x,y":At?"rotation":"top,left"),a&&a.disable(),B(te),zt.isDragging=zt.isPressed=ct=!1,o&&nt(zt,"dragend","onDragEnd"),zt},this.enabled=function(t,e){return arguments.length?t?zt.enable(e):zt.disable(e):s},this.kill=function(){return zt.isThrowing=!1,n.g.killTweensOf(a||i,!0,Ut),zt.disable(),n.g.set(Wt,{clearProps:"userSelect"}),delete C[i._gsDragID],zt},-1!==Tt.indexOf("scroll")&&(a=this.scrollProxy=new function(t,e){t=q(t),e=e||{};var i,r,o,s,a,l,u=m.createElement("div"),c=u.style,f=t.firstChild,h=0,p=0,d=t.scrollTop,g=t.scrollLeft,_=t.scrollWidth,v=t.scrollHeight,y=0,x=0,b=0;st&&!1!==e.force3D?(a="translate3d(",l="px,0px)"):lt&&(a="translate(",l="px)"),this.scrollTop=function(t,e){if(!arguments.length)return-this.top();this.top(-t,e)},this.scrollLeft=function(t,e){if(!arguments.length)return-this.left();this.left(-t,e)},this.left=function(i,r){if(!arguments.length)return-(t.scrollLeft+p);var o=t.scrollLeft-g,s=p;if((o>2||o<-2)&&!r)return g=t.scrollLeft,n.g.killTweensOf(this,!0,{left:1,scrollLeft:1}),this.left(-g),void(e.onKill&&e.onKill());(i=-i)<0?(p=i-.5|0,i=0):i>x?(p=i-x|0,i=x):p=0,(p||s)&&(a?this._suspendTransforms||(c[lt]=a+-p+"px,"+-h+l):c.left=-p+"px",p+y>=0&&(c.paddingRight=p+y+"px")),t.scrollLeft=0|i,g=t.scrollLeft},this.top=function(i,r){if(!arguments.length)return-(t.scrollTop+h);var o=t.scrollTop-d,s=h;if((o>2||o<-2)&&!r)return d=t.scrollTop,n.g.killTweensOf(this,!0,{top:1,scrollTop:1}),this.top(-d),void(e.onKill&&e.onKill());(i=-i)<0?(h=i-.5|0,i=0):i>b?(h=i-b|0,i=b):h=0,(h||s)&&(a?this._suspendTransforms||(c[lt]=a+-p+"px,"+-h+l):c.top=-h+"px"),t.scrollTop=0|i,d=t.scrollTop},this.maxScrollTop=function(){return b},this.maxScrollLeft=function(){return x},this.disable=function(){for(f=u.firstChild;f;)s=f.nextSibling,t.appendChild(f),f=s;t===u.parentNode&&t.removeChild(u)},this.enable=function(){if((f=t.firstChild)!==u){for(;f;)s=f.nextSibling,u.appendChild(f),f=s;t.appendChild(u),this.calibrate()}},this.calibrate=function(e){var n,s,a=t.clientWidth===i;d=t.scrollTop,g=t.scrollLeft,a&&t.clientHeight===r&&u.offsetHeight===o&&_===t.scrollWidth&&v===t.scrollHeight&&!e||((h||p)&&(n=this.left(),s=this.top(),this.left(-t.scrollLeft),this.top(-t.scrollTop)),a&&!e||(c.display="block",c.width="auto",c.paddingRight="0px",(y=Math.max(0,t.scrollWidth-t.clientWidth))&&(y+=it(t,"paddingLeft")+(Dt?it(t,"paddingRight"):0))),c.display="inline-block",c.position="relative",c.overflow="visible",c.verticalAlign="top",c.width="100%",c.paddingRight=y+"px",Dt&&(c.paddingBottom=it(t,"paddingBottom",!0)),P&&(c.zoom="1"),i=t.clientWidth,r=t.clientHeight,_=t.scrollWidth,v=t.scrollHeight,x=t.scrollWidth-i,b=t.scrollHeight-r,o=u.offsetHeight,c.display="block",(n||s)&&(this.left(n),this.top(s)))},this.content=u,this.element=t,this._suspendTransforms=!1,this.enable()}(i,function(t,e){var i;for(i in e)void 0===t[i]&&(t[i]=e[i]);return t}({onKill:function(){zt.isPressed&&ge(null)}},r)),i.style.overflowY=Xt&&!Pt?"auto":"hidden",i.style.overflowX=jt&&!Pt?"auto":"hidden",i=a.content),!1!==r.force3D&&n.g.set(i,{force3D:!0}),At?Ut.rotation=1:(jt&&(Ut[Nt]=1),Xt&&(Ut[It]=1)),At?($=(V=h).css,V.overwrite=!1):St&&($=(V=jt&&Xt?u:jt?c:f).css,V.overwrite=!1),this.enable()},Nt=Ft.prototype=new n.c;Nt.constructor=Ft,Nt.pointerX=Nt.pointerY=Nt.startX=Nt.startY=Nt.deltaX=Nt.deltaY=0,Nt.isDragging=Nt.isPressed=!1,Ft.version="0.16.5",Ft.zIndex=1e3,kt(m,"touchcancel",function(){}),kt(m,"contextmenu",function(t){var e;for(e in C)C[e].isPressed&&C[e].endDrag()}),Ft.create=function(t,e){"string"==typeof t&&(t=n.g.selector(t));for(var i=t&&0!==t.length?St(t)?function(t){var e,i,n,r=[],o=t.length;for(e=0;e<o;e++)if(i=t[e],St(i))for(n=i.length,n=0;n<i.length;n++)r.push(i[n]);else i&&0!==i.length&&r.push(i);return r}(t):[t]:[],r=i.length;--r>-1;)i[r]=new Ft(i[r],e);return i},Ft.get=function(t){return C[(q(t)||{})._gsDragID]},Ft.timeSinceDrag=function(){return(S()-L)/1e3};var It={},Bt=function(t,e){if(t===window)return It.left=It.top=0,It.width=It.right=v.clientWidth||t.innerWidth||m.body.clientWidth||0,It.height=It.bottom=(t.innerHeight||0)-20<v.clientHeight?v.clientHeight:t.innerHeight||m.body.clientHeight||0,It;var i=t.pageX!==e?{left:t.pageX-Y(),top:t.pageY-X(),right:t.pageX-Y()+1,bottom:t.pageY-X()+1}:t.nodeType||t.left===e||t.top===e?P?function(t){var e,i,n=0,r=0;for(e=(t=q(t)).offsetWidth,i=t.offsetHeight;t;)n+=t.offsetTop,r+=t.offsetLeft,t=t.offsetParent;return{top:n,left:r,width:e,height:i}}(t):q(t).getBoundingClientRect():t;return i.right===e&&i.width!==e?(i.right=i.left+i.width,i.bottom=i.top+i.height):i.width===e&&(i={width:i.right-i.left,height:i.bottom-i.top,right:i.right,left:i.left,bottom:i.bottom,top:i.top}),i};return Ft.hitTest=function(t,e,i){if(t===e)return!1;var n,r,o,s=Bt(t),a=Bt(e),l=a.left>s.right||a.right<s.left||a.top>s.bottom||a.bottom<s.top;return l||!i?!l:(o=-1!==(i+"").indexOf("%"),i=parseFloat(i)||0,(n={left:Math.max(s.left,a.left),top:Math.max(s.top,a.top)}).width=Math.min(s.right,a.right)-n.left,n.height=Math.min(s.bottom,a.bottom)-n.top,!(n.width<0||n.height<0)&&(o?(i*=.01,(r=n.width*n.height)>=s.width*s.height*i||r>=a.width*a.height*i):n.width>i&&n.height>i))},O.style.cssText="visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;",Ft},!0);var j=n.h.Draggable;function X(t){void 0===t&&(t="div");var e=t.match(/^[a-z0-9]+/i),i=t.match(/#([a-z]+[a-z0-9-]*)/gi),n=t.match(/\.([a-z]+[a-z0-9-_]*)/gi),r=t.match(/\[([a-z][a-z-]+)(=['|"]?([^\]]*)['|"]?)?\]/gi),o=e?e[0]:"div";if(i&&i.length>1)throw function(t){this.message=t,this.name="CreateElementException"}("only 1 ID is allowed");var s=document.createElement(o);if(i&&(s.id=i[0].replace("#","")),n){var a=n.join(" ").replace(/\./g,"");s.setAttribute("class",a)}r&&r.forEach(function(t){var e=(t=t.slice(0,-1).slice(1)).split("="),i=e[0],n=e[1];n&&(n=n.replace(/^['"](.*)['"]$/,"$1")),s.setAttribute(i,n||"")});for(var l=arguments.length,u=new Array(l>1?l-1:0),c=1;c<l;c++)u[c-1]=arguments[c];return u.forEach(function(t){"string"==typeof t||"number"==typeof t?s.appendChild(document.createTextNode(t)):t.nodeType===document.ELEMENT_NODE&&s.appendChild(t)}),s}function Y(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var z=function(){function t(t,e){this.gameBox=null,this.gameElement=null,this.box=t,this.element=e}return function(t,e,i){e&&Y(t.prototype,e),i&&Y(t,i)}(t,[{key:"box",set:function(t){if(t instanceof HTMLElement==!1)return null;this.gameBox=t},get:function(){return this.gameBox||null}},{key:"element",set:function(t){if(t instanceof HTMLElement==!1)return null;this.gameElement=t},get:function(){return this.gameElement||null}}]),t}();function W(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var U=function(){function t(t){this.deviceSize=800,this.Control=t,this.myDrag=null}var e=t.prototype;return e.addDragEvent=function(){var t=this.Control.box.clientWidth<this.deviceSize?"mobile":"desktop",e=this.Control.box.clientWidth-.5*this.Control.element.clientWidth;"mobile"===t&&(e=this.Control.box.clientWidth-.4*this.Control.element.clientWidth);var i={minX:0,maxX:e};this.drag=j.create(this.Control.element,{type:"x",throwProps:!0,bounds:i}),j.get(this.Control.element).enable()},e.removeDragEvent=function(){j.get(this.Control.element).disable()},e.setLocation=function(){this.Control.element.style.display="inline-block";var t={x:this.Control.box.clientWidth/2-this.Control.element.clientWidth/2,y:this.Control.box.offsetHeight-this.Control.element.offsetHeight+.4*this.Control.element.offsetHeight};TweenMax.set(this.Control.element,t)},function(t,e,i){e&&W(t.prototype,e),i&&W(t,i)}(t,[{key:"drag",set:function(t){this.myDrag=t},get:function(){return this.myDrag[0]}}]),t}(),V=function(){function t(t,e){this.ControlElementDTO=new z,this.ControlElementDTO.box=t,this.ControlElementDTO.element=e,this.myMove=new U(this.ControlElementDTO)}var e=t.prototype;return e.start=function(){this.myMove.setLocation(),this.myMove.addDragEvent()},e.stop=function(){this.myMove.removeDragEvent()},t}();if(Function.prototype.bind||(Function.prototype.bind=function(t){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var e=Array.prototype.slice.call(arguments,1),i=this,n=function(){},r=function(){return i.apply(this instanceof n&&t?this:t,e.concat(Array.prototype.slice.call(arguments)))};return n.prototype=this.prototype,r.prototype=new n,r}),
/*! @source http://purl.eligrey.com/github/Xccessors/blob/master/xccessors-standard.js*/
function(){var t=Object.prototype,e=t.__defineGetter__,i=t.__defineSetter__,n=t.__lookupGetter__,r=t.__lookupSetter__,o=t.hasOwnProperty;e&&i&&n&&r&&(Object.defineProperty||(Object.defineProperty=function(t,s,a){if(arguments.length<3)throw new TypeError("Arguments not optional");if(s+="",o.call(a,"value")&&(n.call(t,s)||r.call(t,s)||(t[s]=a.value),o.call(a,"get")||o.call(a,"set")))throw new TypeError("Cannot specify an accessor and a value");if(!(a.writable&&a.enumerable&&a.configurable))throw new TypeError("This implementation of Object.defineProperty does not support false for configurable, enumerable, or writable.");return a.get&&e.call(t,s,a.get),a.set&&i.call(t,s,a.set),t}),Object.getOwnPropertyDescriptor||(Object.getOwnPropertyDescriptor=function(t,e){if(arguments.length<2)throw new TypeError("Arguments not optional.");e+="";var i={configurable:!0,enumerable:!0,writable:!0},s=n.call(t,e),a=r.call(t,e);return o.call(t,e)?s||a?(delete i.writable,i.get=i.set=void 0,s&&(i.get=s),a&&(i.set=a),i):(i.value=t[e],i):i}),Object.defineProperties||(Object.defineProperties=function(t,e){var i;for(i in e)o.call(e,i)&&Object.defineProperty(t,i,e[i])}))}(),!(document.documentElement.dataset||Object.getOwnPropertyDescriptor(Element.prototype,"dataset")&&Object.getOwnPropertyDescriptor(Element.prototype,"dataset").get)){var G={enumerable:!0,get:function(){var t,e,i,n,r,o,s=this.attributes,a=s.length,l=function(t){return t.charAt(1).toUpperCase()},u=function(){return this},c=function(t,e){return void 0!==e?this.setAttribute(t,e):this.removeAttribute(t)};try{({}).__defineGetter__("test",function(){}),e={}}catch(t){e=document.createElement("div")}for(t=0;t<a;t++)if((o=s[t])&&o.name&&/^data-\w[\w\-]*$/.test(o.name)){i=o.value,r=(n=o.name).substr(5).replace(/-./g,l);try{Object.defineProperty(e,r,{enumerable:this.enumerable,get:u.bind(i||""),set:c.bind(this,n)})}catch(t){e[r]=i}}return e}};try{Object.defineProperty(Element.prototype,"dataset",G)}catch(t){G.enumerable=!1,Object.defineProperty(Element.prototype,"dataset",G)}}Element;HTMLElement.prototype.empty=function(){for(;this.hasChildNodes();)this.removeChild(this.lastChild)},window.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(t,e){e=e||window;for(var i=0;i<this.length;i++)t.call(e,this[i],i,this)}),[Element.prototype,CharacterData.prototype,DocumentType.prototype].forEach(function(t){t.hasOwnProperty("remove")||Object.defineProperty(t,"remove",{configurable:!0,enumerable:!0,writable:!0,value:function(){null!==this.parentNode&&this.parentNode.removeChild(this)}})});HTMLElement,NodeList,Element,CharacterData,DocumentType;var H={container:"#gameBox",scoreBoard:"#score-board",timerBoard:"#timer-board",giftColors:[".ball",".ball_2",".ball_3",".ball_4",".ball_5"],elements:{basket:"#catcher",sensingArea:"#realcatcher",gift:".gift",explosion:".toExplosion"},explosion:".explosion",bombKey:"bomb",hitKey:"hit",total:2e4,billList:[1e3,800,600,400,200],gameTime:30,endCallback:function(t){}},q=function(t,e){return Math.round(Math.random()*(e-t)+t)},$=function(t,e){return Math.random()*(e-t)+t},Z=function(t){for(var e=t.length-1;e>0;e--){var i=Math.floor(Math.random()*(e+1)),n=[t[i],t[e]];t[e]=n[0],t[i]=n[1]}return t},K=function(){function t(t){for(var e in this.defaultOptions={tick:1,onstart:null,ontick:null,onpause:null,onstop:null,onend:null},this.myOption={id:+new Date,options:{},duration:0,status:"initialized",start:0,measures:[]},this.defaultOptions)this.myOption.options[e]=this.defaultOptions[e],this.options(t)}var e=t.prototype;return e.start=function(t){return+t||this.myOption.duration?(t&&(t*=1e3),this.myOption.timeout&&"started"===this.myOption.status?this:(this.myOption.duration=t||this.myOption.duration,this.myOption.timeout=setTimeout(this.end.bind(this),this.myOption.duration),"function"==typeof this.myOption.options.ontick&&(this.myOption.interval=setInterval(function(){this.trigger.call(this,"ontick",this.getDuration())}.bind(this),1e3*+this.myOption.options.tick)),this.myOption.start=+new Date,this.myOption.status="started",this.trigger.call(this,"onstart",this.getDuration()),this)):this},e.pause=function(){return"started"!==this.myOption.status?this:(this.myOption.duration-=+new Date-this.myOption.start,this.clear.call(this,!1),this.myOption.status="paused",this.trigger.call(this,"onpause"),this)},e.stop=function(){return/started|paused/.test(this.myOption.status)?(this.clear.call(this,!0),this.myOption.status="stopped",this.trigger.call(this,"onstop"),this):this},e.getDuration=function(){return"started"===this.myOption.status?this.myOption.duration-(+new Date-this.myOption.start):"paused"===this.myOption.status?this.myOption.duration:0},e.getStatus=function(){return this.myOption.status},e.options=function(t,e){if(t&&e&&(this.myOption.options[t]=e),!e&&"object"==typeof t)for(var i in t)this.myOption.options.hasOwnProperty(i)&&(this.myOption.options[i]=t[i]);return this},e.on=function(t,e){return"string"!=typeof t||"function"!=typeof e?this:(/^on/.test(t)||(t="on"+t),this.myOption.options.hasOwnProperty(t)&&(this.myOption.options[t]=e),this)},e.off=function(t){return"string"!=typeof t?this:"all"===(t=t.toLowerCase())?(this.myOption.options=this.defaultOptions,this):(/^on/.test(t)||(t="on"+t),this.myOption.options.hasOwnProperty(t)&&(this.myOption.options[t]=this.defaultOptions[t]),this)},e.measureStart=function(t){return this.myOption.measures[t||""]=+new Date,this},e.measureStop=function(t){return+new Date-this.myOption.measures[t||""]},e.end=function(){this.clear.call(this),this.myOption.status="stopped",this.trigger.call(this,"onend")},e.trigger=function(t){var e=this.myOption.options[t],i=[].slice.call(arguments,1);"function"==typeof e&&e.apply(this,i)},e.clear=function(t){clearTimeout(this.myOption.timeout),clearInterval(this.myOption.interval),!0===t&&(this.myOption.duration=0)},e.msToSec=function(t){return parseInt((t%6e4/1e3).toFixed(0),10)},t}();var J=function(){function t(t){void 0===t&&(t={});var e=this;this.setConfig(t),this.pointList=[],this.score=0,this.bombPercentage=.5,this.hitAnimateTime=3,this.goTime=0,this.moveWidth=40,this.gameStatus="stop",this.gammaRange=5,this.moveXWidth=80,this.moveXMobile=20,this.startCallbackLock=!0,this.endCallbackLock=!0,this.timer=new K({tick:1,ontick:function(t){var i=this.msToSec(t);e.elements.get("timerBoard").textContent=i},onstart:function(){console.log("timer started");var t=e.elements.get("timerBoard"),i=e.configs.get("gameTime").toString();""===t.textContent&&(t.textContent=i)},onstop:function(){console.log("timer stop")},onpause:function(){console.log("timer set on pause")},onend:function(){e.elements.get("timerBoard").textContent=0,console.log("timer ended normally")}}),this.elements.get("scoreBoard").textContent=0,this.elements.get("timerBoard").textContent=this.configs.get("gametime"),this.addBasket(),this.eventControl=new V(this.elements.get("container"),this.elements.get("basket")),this.startBtn=document.querySelector("#startBtn"),this.pauseBtn=document.querySelector("#pauseBtn"),this.stopBtn=document.querySelector("#stopBtn"),this.resetBtn=document.querySelector("#resetBtn"),this.timeLine=new p({delay:.5,onStart:function(){e.timeLineOnStart()},onComplete:function(){e.timeLineOnComplete()}}),this.initial()}var e=t.prototype;return e.setConfig=function(t){void 0===t&&(t={}),this.elements=new Map,Object.assign(H,t),this.configs=null,this.configs=function t(e){for(var i=new Map,n=Object.keys(e),r=0;r<n.length;r++){var o=n[r];"object"==typeof e[o]?i.set(o,t(e[o])):i.set(o,e[o])}return i}(H);var e=this.elements;this.configs.get("elements").forEach(function(t,i){var n=X(t);e.set(i,n)}),this.gameBoxMapping("container",this.configs.get("container")),this.gameBoxMapping("scoreBoard",this.configs.get("scoreBoard")),this.gameBoxMapping("timerBoard",this.configs.get("timerBoard"))},e.gameBoxMapping=function(t,e){void 0===e&&(e="");var i=document.querySelector(e);null===i&&(i=X(e),document.body.appendChild(i)),this.elements.set(t,i)},e.setPoints=function(t,e){var i=[],n=0;do{(n=e.get(q(0,e.size-1)+"")||0)>e[0]&&e.shift(),n<=t&&(t-=n,i.push(n))}while(t>0);return i},e.bombList=function(t){for(var e=Math.floor(t.length*this.bombPercentage),i=[],n=0;n<e;n++)i.push(this.configs.get("bombKey"));return i},e.addBasket=function(){var t=this.elements.get("container"),e=this.elements.get("basket"),i=this.elements.get("sensingArea");e.appendChild(i),t.appendChild(e);document.querySelector(this.configs.get("container")).querySelector(this.configs.get("basket"));e.style.display="none"},e.addExplosion=function(){this.elements.get("basket").appendChild(this.elements.get("explosion"))},e.addScoreBoard=function(){var t=this.elements.get("container"),e=this.elements.get("scoreBoard");B.set(e,{x:t.offsetWidth-e.offsetWidth,y:t.offsetHeight-2*e.offsetHeight-10})},e.addGift=function(t,e){var i=this,n=this.elements.get("container"),r=this.elements.get("gift").cloneNode(),o=this.configs.get("bombKey"),s=this.configs.get("elements").get("gift"),a=this.configs.get("gameTime");if(t!==o){var l=this.configs.get("giftColors"),u=X(l.get(q(0,l.size-1)+""));r.appendChild(u)}n.querySelectorAll(s).length,this.pointList.length;var c=a-4,f=n.offsetHeight-this.moveWidth,h=$(this.moveWidth,n.offsetWidth-this.moveWidth),p=3.4,d=this.pointList.length-1;e/d<.3?p=2.8:e/d<.6&&(p=3.1);var g=$(3,4),_=0===this.goTime?this.goTime:this.goTime+g/p;this.goTime+=g/p,r.setAttribute("data-point",t),r.setAttribute("data-index",e),_>c&&(_=c-4,this.goTime=$(6,.3*c)),d===e&&(g=3,_=27),t===o&&r.classList.add(o),this.timeLine.fromTo(r,g,{x:h,y:0},{y:"+="+f,ease:Power0.easeNone,onComplete:function(){r.remove()},onUpdate:function(){i.checkHit(r)}},""+_),n.appendChild(r)},e.checkHit=function(t){var e=this.configs.get("bombKey"),i=this.configs.get("hitKey"),n=this.elements.get("scoreBoard"),r=this.eventControl.ControlElementDTO.element,o=this.elements.get("sensingArea");if(j.hitTest(o,t))if(t.className.indexOf(e)>=0){this.timer.pause(),r.classList.add("dark");var s=this.elements.get("explosion");(function(t){var e=[];if(window.getComputedStyle){var i=getComputedStyle(t),n=i.transform||i.webkitTransform||i.mozTransform||i.msTransform,r=n.match(/^matrix3d\((.+)\)$/);r?parseFloat(r[1].split(", ")[13]):((r=n.match(/^matrix\((.+)\)$/))?e.push(parseFloat(r[1].split(", ")[4])):e.push(0),r?e.push(parseFloat(r[1].split(", ")[5])):e.push(0))}})(r);B.set(s,{x:-70,y:-300,scale:2}),s.classList.add(this.configs.get("explosion")),j.get(r).disable(),this.timeLine.paused(!0),this.endToSendPoint()}else if(-1===t.className.indexOf(i)){this.score+=parseInt(t.getAttribute("data-point"),10),n.textContent=this.score.toString(),B.killTweensOf(t),r.classList.add("happy"),setTimeout(function(){r.classList.remove("happy")},600),t.classList.add(i);var a=this.elements.get("boom").cloneNode();B.fromTo(a,3,{x:t._gsTransform.x-t.offsetWidth/2,y:t._gsTransform.y-t.offsetWidth/2},{autoAlpha:0}),gameBox.appendChild(a),t.remove()}},e.keyDownEvent=function(t){t.keyCode&&39===t.which&&this.moveCatcherBox(this.moveXWidth),t.keyCode&&37===t.which&&this.moveCatcherBox(-this.moveXWidth)},e.moveCatcherBox=function(t){if(0===t)return!1;var e=this.elements.get("container"),i=this.elements.get("basket"),n=e.clientWidth-i.clientWidth,r=0;t>0&&(r=i._gsTransform.x+t>n?n:i._gsTransform.x+t),t<0&&(r=i._gsTransform.x+t<0?0:i._gsTransform.x+t),B.to(i,.3,{x:r})},e.setStartEvent=function(t){var e=this;t.addEventListener("click",function(){e.startEvent()}),t.addEventListener("touchend",function(){e.startEvent()})},e.setPauseEvent=function(t){var e=this;t.addEventListener("click",function(){e.pause()}),t.addEventListener("touchend",function(){e.pause()})},e.setPauseEvent=function(t){var e=this;t.addEventListener("click",function(){e.pause()}),t.addEventListener("touchend",function(){e.pause()})},e.setStopEvent=function(t){var e=this;t.addEventListener("click",function(){e.stop()}),t.addEventListener("touchend",function(){e.stop()})},e.startEvent=function(){var t=this;if(t.startBtn.disabled=!0,t.pauseBtn.disabled=!1,this.timeLine._time>=this.timeLine.endTime()||0===this.timeLine._time)this.cleanItems(function(){t.start(),t.timer.start(t.configs.get("gameTime"))});else{this.timeLine.play();var e=t.elements.get("timerBoard").textContent||t.configs.get("gameTime");t.timer.start(e)}},e.start=function(){var t=this;this.clear(),this.timeLine.clear();var e=this.elements.get("container"),i=this.elements.get("basket");this.addExplosion(),e.appendChild(i),this.eventControl.start();var n=Z(this.setPoints(this.configs.get("total"),this.configs.get("billList"))),r=this.bombList(n),o=n.concat(r);n.length>10?this.pointList=o.slice(0,10).concat(Z(o.slice(10))):this.pointList=o.concat(Z(o)),console.log(this.pointList),console.log({"總數":this.pointList.length,"彩球":n.length,"炸彈":r.length}),this.pointList.forEach(function(e,i){return t.addGift(e,i)})},e.pause=function(){this.timeLine.paused(!0),this.startBtn.disabled=!1,this.pauseBtn.disabled=!0,this.timer.pause()},e.stop=function(){},e.reset=function(){},e.empty=function(t){for(;t.hasChildNodes();)t.removeChild(t.lastChild)},e.clear=function(){this.elements.get("container").empty()},e.cleanItems=function(t){var e=this.elements.get("container");e.querySelectorAll(".gift").forEach(function(t,i){e.removeChild(t)}),e.querySelectorAll(this.configs.get("boom")).forEach(function(t,i){e.removeChild(t)}),"function"==typeof t&&t()},e.timeLineOnStart=function(){this.startCallbackLock||(this.startBtn.disabled=!0,this.pauseBtn.disabled=!1,this.startCallbackLock=!0),this.startCallbackLock=!1},e.timeLineOnComplete=function(){this.endCallbackLock||(this.cleanItems(),this.eventControl.stop(),this.endToSendPoint(),this.endCallbackLock=!0),this.endCallbackLock=!1},e.endToSendPoint=function(){var t=this.elements.get("container");this.elements.get("basket");t.querySelectorAll(this.configs.get("elements").get("gift")).forEach(function(t,e){t.children.length>0&&function(t,e){void 0===e&&(e="running"),e=e.toLowerCase(),!(["paused","running"].indexOf(e)<0)&&(t.style.animationPlayState=e)}(t.children[0],"paused")}),this.startBtn.disabled=!0,this.pauseBtn.disabled=!0,this.configs.get("endCallback")(this.score)},e.initial=function(){this.setStartEvent(this.startBtn),this.setPauseEvent(this.pauseBtn),this.startBtn.disabled=!1},t}();document.addEventListener("DOMContentLoaded",function(){new J({easy:{container:"#gameBox",scoreBoard:"#score-board",timerBoard:"#timer-board",giftColors:[".ball",".ball_2",".ball_3",".ball_4",".ball_5"],elements:{gift:".gift",boom:".BoomAnimate",sensingArea:"#realcatcher",basket:".walk",explosion:".toExplosion"},explosion:"explosion",gameTime:60,total:1e4,billList:[1e3,600,400,200],endCallback:function(t){console.log("遊戲結束 callback"),console.log(t)}},normal:{container:"#gameBox",scoreBoard:"#score-board",timerBoard:"#timer-board",giftColors:[".ball",".ball_2",".ball_3",".ball_4",".ball_5"],elements:{gift:".gift",boom:".BoomAnimate",sensingArea:"#realcatcher",basket:".walk",explosion:".toExplosion"},explosion:"explosion",gameTime:30,total:1e4,billList:[1e3,600,400,200],endCallback:function(t){console.log("遊戲結束 callback"),console.log(t)}},hard:{container:"#gameBox",scoreBoard:"#score-board",timerBoard:"#timer-board",giftColors:[".ball",".ball_2",".ball_3",".ball_4",".ball_5"],elements:{gift:".gift",boom:".BoomAnimate",sensingArea:"#realcatcher",basket:".walk",explosion:".toExplosion"},explosion:"explosion",gameTime:10,total:1e4,billList:[1e3,600,400,200],endCallback:function(t){console.log("遊戲結束 callback"),console.log(t)}}}.normal)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,